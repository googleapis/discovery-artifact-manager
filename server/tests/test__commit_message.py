# Copyright 2017, Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from unittest.mock import patch

from tasks import _commit_message


@patch('tasks._commit_message.date')
def test_build_none(date_mock):
    date_mock.today.return_value.isoformat.return_value = '2000-01-01'
    commitmsg = _commit_message.build(None, None, None)
    assert commitmsg == 'Autogenerated update (2000-01-01)'


def test_build_subject():
    commitmsg = _commit_message.build(None, None, None, subject='X')
    assert commitmsg == 'X'


def test_build_added_subject():
    added = {'foo:v1'}
    commitmsg = _commit_message.build(added, None, None, subject='X')
    assert commitmsg == ('X\n'
                         '\n'
                         'Add:\n'
                         '- foo:v1')


def test_build_deleted_subject():
    deleted = {'bar:v1'}
    commitmsg = _commit_message.build(None, deleted, None, subject='X')
    assert commitmsg == ('X\n'
                         '\n'
                         'Delete:\n'
                         '- bar:v1')


def test_build_updated_subject():
    updated = {'baz:v1'}
    commitmsg = _commit_message.build(None, None, updated, subject='X')
    assert commitmsg == ('X\n'
                         '\n'
                         'Update:\n'
                         '- baz:v1')


@patch('tasks._commit_message.date')
def test_build_added_deleted_updated(date_mock):
    date_mock.today.return_value.isoformat.return_value = '2000-01-01'
    added = {'foo:v1', 'foo:v2'}
    deleted = {'bar:v1', 'bar:v2'}
    updated = {'baz:v1', 'baz:v2'}
    commitmsg = _commit_message.build(added, deleted, updated)
    assert commitmsg == ('Autogenerated update (2000-01-01)\n'
                         '\n'
                         'Add:\n'
                         '- foo:v1\n'
                         '- foo:v2\n'
                         '\n'
                         'Delete:\n'
                         '- bar:v1\n'
                         '- bar:v2\n'
                         '\n'
                         'Update:\n'
                         '- baz:v1\n'
                         '- baz:v2')

import logging

from datetime import date
from flask import abort, Flask, request
from google.cloud import datastore
from tempfile import TemporaryDirectory
import glob
import json
import os
import re
import shlex
import subprocess


app = Flask(__name__)


_DEVNULL = open(os.devnull, 'w')


@app.route('/cron/clients/php')
def cron_clients_php():
    if request.headers.get('X-AppEngine-Cron') is None:
        abort(403)

    with TemporaryDirectory() as tmp_dir:
        client_lib_dir = os.path.join(tmp_dir, 'google-api-php-client-services')
        cmd = ('git clone'
               ' https://github.com/saicheems/google-api-php-client-services'
               ' {}').format(client_lib_dir)
        subprocess.check_call(shlex.split(cmd))

        dartman_dir = os.path.join(tmp_dir, 'discovery-artifact-manager')
        cmd = ('git clone https://github.com/saicheems/discovery-artifact-manager'
               ' {}').format(dartman_dir)
        subprocess.check_call(shlex.split(cmd))

        index_filename = os.path.join(dartman_dir, 'discoveries', 'index.json')
        preferred = {}
        with open(index_filename) as file_:
            root = json.load(file_)
            for api in root['items']:
                preferred[api['id']] = api['preferred']
        preferred['admin:directory_v1'] = True
        preferred['admin:datatransfer_v1'] = True
        print(preferred)

        discovery_document_filenames = glob.glob(
                os.path.join(dartman_dir, 'discoveries', '*.json'))
        # Skip index.json
        discovery_document_filenames = [
                fn for fn in discovery_document_filenames
                if os.path.basename(fn) != 'index.json']

        venv_dir = os.path.join(tmp_dir, 'venv')
        cmd = 'virtualenv {}'.format(venv_dir)  # Need Python 2.7 venv.
        subprocess.check_call(shlex.split(cmd))

        cmd = '{} setup.py install'.format(
                os.path.join(venv_dir, 'bin', 'python'))
        subprocess.check_call(shlex.split(cmd),
                cwd=os.path.join(dartman_dir, 'google-api-client-generator'))

        service_dir = os.path.join(client_lib_dir, 'src', 'Google', 'Service')

        returncode = -1

        for filename in discovery_document_filenames:
            root = {}
            with open(filename) as file_:
                root = json.load(file_)
            id_ = root['id']
            name = root['name']
            version = root['version']

            if name == 'discovery':
                continue
            if not preferred[id_]:
                continue

            with TemporaryDirectory() as tmp_dir2:
                cmd = ('venv/bin/generate_library'
                       ' --input {}'
                       ' --language php'
                       ' --language_variant 1.2.0'
                       ' --output_dir {}')
                cmd = cmd.format(filename, tmp_dir2)
                subprocess.check_call(shlex.split(cmd), cwd=tmp_dir)

                dirs = os.listdir(tmp_dir2)
                # Drop the extension if it's there, so we just get something
                # like "BigQuery" instead of "BigQuery.php"
                service_name = os.path.splitext(dirs[0])[0]
                cmd = 'rm -rf {}.php {}'.format(
                        os.path.join(service_dir, service_name),
                        os.path.join(service_dir, service_name))
                print(cmd)
                subprocess.check_call(shlex.split(cmd))
                cmd = 'cp {}.php {}'.format(
                        os.path.join(tmp_dir2, service_name), service_dir)
                print(cmd)
                subprocess.check_call(shlex.split(cmd))
                cmd = 'cp -r {} {}'.format(
                        os.path.join(tmp_dir2, service_name),
                        service_dir)
                print(cmd)
                subprocess.check_call(shlex.split(cmd))

            cmd = 'git add src'
            subprocess.check_call(shlex.split(cmd), cwd=client_lib_dir)
            msg = 'Autogenerated update for {} version {} ({})'
            msg = msg.format(name, version, date.today().isoformat())
            cmd = 'git commit -a -m "{}"'.format(msg)
            # Zero returncode if there's anything to push.
            if subprocess.call(shlex.split(cmd), cwd=client_lib_dir) == 0:
                returncode = 0

        if not returncode:
            cmd = 'git describe --tags --abbrev=0'
            output = subprocess.check_output(
                    shlex.split(cmd), cwd=client_lib_dir)
            latest_tag = output.decode('utf-8').strip()

            version_re = re.compile(r'^(v[0-9]+)\.([0-9]+)$')
            match = version_re.match(latest_tag)
            if not match:
                msg = 'latest tag does not match the pattern \'{}\': {}'
                raise Exception(msg.format(version_re.pattern, latest_tag))

            minor_revision = match.group(2)
            new_minor_revision = str(int(minor_revision) + 1)
            new_version = version_re.sub(
                    r'\1.{}'.format(new_minor_revision), latest_tag)

            cmd = 'git tag {}'.format(new_version)
            subprocess.check_call(shlex.split(cmd), cwd=client_lib_dir)

            ds = datastore.Client()
            github_cred = list(ds.query(kind='GithubCredential').fetch())[0]
            personal_access_token = github_cred['personal_access_token']
            remote_url = ('https://saicheems:{}@github.com'
                          '/saicheems/google-api-php-client-services')
            remote_url = remote_url.format(personal_access_token)

            # send output to /dev/null so the remote url isn't logged.
            cmd = 'git remote add github {}'.format(remote_url)
            subprocess.check_call(shlex.split(cmd), cwd=client_lib_dir,
                                  stdout=_DEVNULL, stderr=_DEVNULL)
            cmd = 'git push github'
            subprocess.check_call(shlex.split(cmd), cwd=client_lib_dir,
                                  stdout=_DEVNULL, stderr=_DEVNULL)
            # Tags have to be pushed separately.
            cmd = 'git push github --tags'
            subprocess.check_call(shlex.split(cmd), cwd=client_lib_dir,
                                  stdout=_DEVNULL, stderr=_DEVNULL)

    return ''


@app.route('/cron/discoveries')
def cron_discoveries():
    # This header can't be spoofed, see
    # https://cloud.google.com/appengine/docs/flexible/nodejs/scheduling-jobs-with-cron-yaml#securing_urls_for_cron
    if request.headers.get('X-AppEngine-Cron') is None:
        abort(403)

    with TemporaryDirectory() as tmp_dir:
        go_dir = os.path.join(tmp_dir, 'go')  # /tmp/go
        os.makedirs(os.path.join(go_dir, 'src'))  # mkdir -p /tmp/go/src

        # /tmp/discovery-artifact-manager
        dartman_dir = os.path.join(tmp_dir, 'discovery-artifact-manager')

        cmd = ('git clone'
               ' https://github.com/saicheems/discovery-artifact-manager'
               ' {}').format(dartman_dir)
        subprocess.check_call(shlex.split(cmd))

        # ln -s /tmp/discovery-artifact-manager/src /tmp/go/src/discovery-artifact-manager
        cmd = 'ln -s {} {}'.format(
                os.path.join(dartman_dir, 'src'),
                os.path.join(go_dir, 'src', 'discovery-artifact-manager'))
        subprocess.check_call(shlex.split(cmd))

        env = os.environ.copy()
        env['GOPATH'] = go_dir

        cmd = 'go run src/main/updatedisco/main.go'
        subprocess.check_call(shlex.split(cmd), cwd=dartman_dir, env=env)

        cmd = 'git add discoveries'
        subprocess.check_call(shlex.split(cmd), cwd=dartman_dir)

        # TODO: Add author information here instead of in the Dockerifle.
        cmd = 'git commit -a -m "Autogenerated Discovery document update"'
        returncode = subprocess.call(shlex.split(cmd), cwd=dartman_dir)

        # returncode is non-zero if there's nothing to commit.
        if not returncode:
            ds = datastore.Client()
            github_cred = list(ds.query(kind='GithubCredential').fetch())[0]
            personal_access_token = github_cred['personal_access_token']
            remote_url = ('https://saicheems:{}@github.com'
                          '/saicheems/discovery-artifact-manager')
            remote_url = remote_url.format(personal_access_token)

            # send output to /dev/null so the remote url isn't logged.
            cmd = 'git remote add github {}'.format(remote_url)
            subprocess.check_call(shlex.split(cmd), cwd=dartman_dir,
                                  stdout=_DEVNULL, stderr=_DEVNULL)
            cmd = 'git push github'
            subprocess.check_call(shlex.split(cmd), cwd=dartman_dir,
                                  stdout=_DEVNULL, stderr=_DEVNULL)

    return ''


if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8080, debug=True)

import os
import shlex
import subprocess
from collections import namedtuple
from tempfile import TemporaryDirectory

from flask import Flask, abort, request
from google.cloud import datastore

app = Flask(__name__)

_DEVNULL = open(os.devnull, 'w')

GitHubAccount = namedtuple('GitHubAccount',
                           'name email username personal_access_token')


def _get_github_account():
    """Returns the GitHub account stored in Datastore.

    Returns:
        GitHubAccount: a GitHub account.
    """
    ds = datastore.Client()
    account = list(ds.query(kind='GitHubAccount').fetch())[0]
    return GitHubAccount(account['name'], account['email'],
                         account['username'], account['personal_access_token'])


def _call(cmd, check=False, **kwargs):
    """A wrapper over subprocess.call that splits cmd with shlex.split

    If check is True, then check_call is run instead of call.

    Args:
        cmd (string): A command to run.
        check (bool, optional): If true, check_call is run instead of call.

    Returns:
        int: The return code of the call.
    """
    fn = subprocess.call
    if check:
        fn = subprocess.check_call
    return fn(shlex.split(cmd), **kwargs)


@app.route('/cron/discoveries')
def cron_discoveries():
    # This header can't be spoofed, see
    # https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#securing_urls_for_cron
    if request.headers.get('X-Appengine-Cron') is None:
        abort(403)

    with TemporaryDirectory() as tmp_dir:
        go_dir = os.path.join(tmp_dir, 'go')      # /tmp/go
        os.makedirs(os.path.join(go_dir, 'src'))  # mkdir -p /tmp/go/src

        # /tmp/discovery-artifact-manager
        dartman_dir = os.path.join(tmp_dir, 'discovery-artifact-manager')

        _call(('git clone'
               ' https://github.com/googleapis/discovery-artifact-manager'
               ' {}').format(dartman_dir), check=True)

        # ln -s /tmp/discovery-artifact-manager/src \
        #       /tmp/go/src/discovery-artifact-manager
        _call('ln -s {} {}'.format(
            os.path.join(dartman_dir, 'src'),
            os.path.join(go_dir, 'src', 'discovery-artifact-manager')),
              check=True)

        env = os.environ.copy()
        env['GOPATH'] = go_dir

        _call('go run src/main/updatedisco/main.go', check=True,
              cwd=dartman_dir, env=env)

        _call('git add discoveries', check=True, cwd=dartman_dir)

        account = _get_github_account()

        returncode = _call(
            ('git -c user.name="{}" -c user.email="{}"'
             ' commit -m "Autogenerated Discovery document update"').format(
                 account.name, account.email),
            cwd=dartman_dir)

        # returncode is non-zero if there's nothing to commit.
        if not returncode:
            remote_url = ('https://{}:{}@github.com'
                          '/googleapis/discovery-artifact-manager')
            remote_url = remote_url.format(account.username,
                                           account.personal_access_token)

            # Send output to /dev/null so remote_url isn't logged.
            _call('git remote add github {}'.format(remote_url), check=True,
                  cwd=dartman_dir, stdout=_DEVNULL, stderr=_DEVNULL)
            _call('git push github', check=True, cwd=dartman_dir,
                  stdout=_DEVNULL, stderr=_DEVNULL)

    return ''


if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8080, debug=True)

part of {{ api.name }}_{{ api.version }}_api_console;

/** Client to access the {{ api.name }} {{ api.version }} API */
/** {{ api.description }} */
class {{ api.className }} extends ConsoleClient {

{% filter noblanklines %}
{% comment %} TODO(aiuto): This has to recurse to subresources.{% endcomment %}
{% for r in api.resources %}
  {{ r.className }} _{{ r.codeName }};
  {{ r.className }} get {{ r.codeName }} => _{{ r.codeName }};
{% endfor %}
{% endfilter %}

{% for s in api.authscopes %}
  /** OAuth2 scope: {{ s.description }} */
  static const core.String {{ s.name }}_SCOPE = {% literal s.value %};
{% endfor %}

  /**
   * Data format for the response.
   * Added as queryParameter for each request.
   */
  core.String get alt => params["alt"];
  set alt(core.String value) => params["alt"] = value;

  /**
   * Selector specifying which fields to include in a partial response.
   * Added as queryParameter for each request.
   */
  core.String get fields => params["fields"];
  set fields(core.String value) => params["fields"] = value;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   * Added as queryParameter for each request.
   */
  core.String get key => params["key"];
  set key(core.String value) => params["key"] = value;

  /**
   * OAuth 2.0 token for the current user.
   * Added as queryParameter for each request.
   */
  core.String get oauth_token => params["oauth_token"];
  set oauth_token(core.String value) => params["oauth_token"] = value;

  /**
   * Returns response with indentations and line breaks.
   * Added as queryParameter for each request.
   */
  core.bool get prettyPrint => params["prettyPrint"];
  set prettyPrint(core.bool value) => params["prettyPrint"] = value;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
   * Added as queryParameter for each request.
   */
  core.String get quotaUser => params["quotaUser"];
  set quotaUser(core.String value) => params["quotaUser"] = value;

  /**
   * IP address of the site where the request originates. Use this if you want to enforce per-user limits.
   * Added as queryParameter for each request.
   */
  core.String get userIp => params["userIp"];
  set userIp(core.String value) => params["userIp"] = value;

{% filter noblanklines %}
  {{ api.className }}([oauth2.OAuth2Console auth]) : super(auth) {
    servicePath = {% literal api.servicePath %};
    rootUrl = {% literal api.rootUrl %};
{% comment %} TODO(aiuto): This has to recurse to subresources.{% endcomment %}
{% for r in api.resources %}
    _{{ r.codeName }} = new {{ r.className }}(this);
{% endfor %}
  }
{% endfilter %}
}

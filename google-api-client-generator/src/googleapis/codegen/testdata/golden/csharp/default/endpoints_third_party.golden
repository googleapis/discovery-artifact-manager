=== begin: ./Nasa.Apis.public.EccoDomaniIeri.v1.1.10.0.00.nuspec
<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd">
    <metadata>
        <id>Nasa.Apis.public.EccoDomaniIeri.v1</id>
        <version>1.10.0.00</version>
        <title>Nasa.Apis.public.EccoDomaniIeri.v1 Client Library</title>
        <authors>NASA</authors>
        <owners></owners>
        <licenseUrl>http://www.apache.org/licenses/LICENSE-2.0</licenseUrl>
        <projectUrl>https://code.google.com/p/google-api-dotnet-client/</projectUrl>
        <requireLicenseAcceptance>false</requireLicenseAcceptance>
        <description>NASA APIs Client Library for working with Helloworld v1.
          Supported Platforms:

          - .NET Framework 4 and 4.5

          - Windows Store apps

          - Windows Phone 8 and 8.1

          - Portable Class Libraries

          More documentation on the API is available at:
          https://developers.google.com/api-client-library/dotnet/apis/helloworld/v1

          The package source code is available at:
          https://developers.google.com/resources/api-libraries/download/helloworld/v1/csharp
        </description>
        <tags>NASA</tags>
        <dependencies>
            <group>
                <dependency id="Google.Apis" version="1.10.0" />
                <dependency id="Google.Apis.Auth" version="1.10.0" />
            </group>
        </dependencies>
    </metadata>
    <files>
        <file src="bin\ReleaseSigned\Nasa.Apis.public.EccoDomaniIeri.v1.dll" target="lib\portable-net40+sl50+win+wpa81+wp80\Nasa.Apis.public.EccoDomaniIeri.v1.dll" />
        <file src="bin\ReleaseSigned\Nasa.Apis.public.EccoDomaniIeri.v1.pdb" target="lib\portable-net40+sl50+win+wpa81+wp80\Nasa.Apis.public.EccoDomaniIeri.v1.pdb" />
        <file src="bin\ReleaseSigned\Nasa.Apis.public.EccoDomaniIeri.v1.xml" target="lib\portable-net40+sl50+win+wpa81+wp80\Nasa.Apis.public.EccoDomaniIeri.v1.xml" />
    </files>
</package>
=== end: ./Nasa.Apis.public.EccoDomaniIeri.v1.1.10.0.00.nuspec
=== begin: ./Nasa.Apis.public.EccoDomaniIeri.v1.cs
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by google-apis-code-generator 1.5.1
//     C# generator version: 1.10.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/**
 * \mainpage
 *   Schmecken Sie Gut Version v1
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='http://developers.google.com/appengine'>Schmecken Sie Gut</a>
 *      <tr><th>API Version<td>v1
 *      <tr><th>API Rev<td>0
 *      <tr><th>API Docs
 *          <td><a href='http://developers.google.com/appengine'>
 *              http://developers.google.com/appengine</a>
 *      <tr><th>Discovery Name<td>helloworld
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Schmecken Sie Gut can be found at
 * <a href='http://developers.google.com/appengine'>http://developers.google.com/appengine</a>.
 *
 * For more information about the Google APIs Client Library for .NET, see
 * <a href='https://developers.google.com/api-client-library/dotnet/get_started'>
 * https://developers.google.com/api-client-library/dotnet/get_started</a>
 */

namespace Nasa.Apis.public.EccoDomaniIeri.v1.Data
{    

    /// <summary>Greeting that stores a message.</summary>
    public class HelloGreeting : Google.Apis.Requests.IDirectResponseSchema
    {
        [Newtonsoft.Json.JsonPropertyAttribute("message")]
        public virtual string Message { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }    

    /// <summary>Collection of Greetings.</summary>
    public class HelloGreetingCollection : Google.Apis.Requests.IDirectResponseSchema
    {
        /// <summary>Greeting that stores a message.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("items")]
        public virtual System.Collections.Generic.IList<HelloGreeting> Items { get; set; } 

        /// <summary>The ETag of the item.</summary>
        public virtual string ETag { get; set; }
    }
}

namespace Nasa.Apis.public.EccoDomaniIeri.v1
{
    /// <summary>The EccoDomaniIeri Service.</summary>
    public class EccoDomaniIeriService : Google.Apis.Services.BaseClientService
    {
        /// <summary>The API version.</summary>
        public const string Version = "v1";

        /// <summary>The discovery version used to generate this service.</summary>
        public static Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed =
            Google.Apis.Discovery.DiscoveryVersion.Version_1_0;

        /// <summary>Constructs a new service.</summary>
        public EccoDomaniIeriService() :
            this(new Google.Apis.Services.BaseClientService.Initializer()) {}

        /// <summary>Constructs a new service.</summary>
        /// <param name="initializer">The service initializer.</param>
        public EccoDomaniIeriService(Google.Apis.Services.BaseClientService.Initializer initializer)
            : base(initializer)
        {
            greetings = new GreetingsResource(this);
        }

        /// <summary>Gets the service supported features.</summary>
        public override System.Collections.Generic.IList<string> Features
        {
            get { return new string[0]; }
        }

        /// <summary>Gets the service name.</summary>
        public override string Name
        {
            get { return "helloworld"; }
        }

        /// <summary>Gets the service base URI.</summary>
        public override string BaseUri
        {
            get { return "https://peer-pontus.appspot.com/_ah/api/helloworld/v1/"; }
        }

        /// <summary>Gets the service base path.</summary>
        public override string BasePath
        {
            get { return "helloworld/v1/"; }
        }

        /// <summary>Available OAuth 2.0 scopes for use with the Schmecken Sie Gut.</summary>
        public class Scope
        {
            /// <summary>View your email address</summary>
            public static string UserinfoEmail = "https://www.googleapis.com/auth/userinfo.email";

        }



        private readonly GreetingsResource greetings;

        /// <summary>Gets the Greetings resource.</summary>
        public virtual GreetingsResource Greetings
        {
            get { return greetings; }
        }
    }

    ///<summary>A base abstract class for EccoDomaniIeri requests.</summary>
    public abstract class EccoDomaniIeriBaseServiceRequest<TResponse> : Google.Apis.Requests.ClientServiceRequest<TResponse>
    {
        ///<summary>Constructs a new EccoDomaniIeriBaseServiceRequest instance.</summary>
        protected EccoDomaniIeriBaseServiceRequest(Google.Apis.Services.IClientService service)
            : base(service)
        {
        }

        /// <summary>Data format for the response.</summary>
        /// [default: json]
        [Google.Apis.Util.RequestParameterAttribute("alt", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<AltEnum> Alt { get; set; }

        /// <summary>Data format for the response.</summary>
        public enum AltEnum
        {
            /// <summary>Responses with Content-Type of application/json</summary>
            [Google.Apis.Util.StringValueAttribute("json")]
            Json,
        }

        /// <summary>Selector specifying which fields to include in a partial response.</summary>
        [Google.Apis.Util.RequestParameterAttribute("fields", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Fields { get; set; }

        /// <summary>API key. Your API key identifies your project and provides you with API access, quota, and reports.
        /// Required unless you provide an OAuth 2.0 token.</summary>
        [Google.Apis.Util.RequestParameterAttribute("key", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string Key { get; set; }

        /// <summary>OAuth 2.0 token for the current user.</summary>
        [Google.Apis.Util.RequestParameterAttribute("oauth_token", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string OauthToken { get; set; }

        /// <summary>Returns response with indentations and line breaks.</summary>
        /// [default: true]
        [Google.Apis.Util.RequestParameterAttribute("prettyPrint", Google.Apis.Util.RequestParameterType.Query)]
        public virtual System.Nullable<bool> PrettyPrint { get; set; }

        /// <summary>Available to use for quota purposes for server-side applications. Can be any arbitrary string
        /// assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.</summary>
        [Google.Apis.Util.RequestParameterAttribute("quotaUser", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string QuotaUser { get; set; }

        /// <summary>IP address of the site where the request originates. Use this if you want to enforce per-user
        /// limits.</summary>
        [Google.Apis.Util.RequestParameterAttribute("userIp", Google.Apis.Util.RequestParameterType.Query)]
        public virtual string UserIp { get; set; }

        /// <summary>Initializes EccoDomaniIeri parameter list.</summary>
        protected override void InitParameters()
        {
            base.InitParameters();

            RequestParameters.Add(
                "alt", new Google.Apis.Discovery.Parameter
                {
                    Name = "alt",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "json",
                    Pattern = null,
                });
            RequestParameters.Add(
                "fields", new Google.Apis.Discovery.Parameter
                {
                    Name = "fields",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "key", new Google.Apis.Discovery.Parameter
                {
                    Name = "key",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "oauth_token", new Google.Apis.Discovery.Parameter
                {
                    Name = "oauth_token",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "prettyPrint", new Google.Apis.Discovery.Parameter
                {
                    Name = "prettyPrint",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = "true",
                    Pattern = null,
                });
            RequestParameters.Add(
                "quotaUser", new Google.Apis.Discovery.Parameter
                {
                    Name = "quotaUser",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
            RequestParameters.Add(
                "userIp", new Google.Apis.Discovery.Parameter
                {
                    Name = "userIp",
                    IsRequired = false,
                    ParameterType = "query",
                    DefaultValue = null,
                    Pattern = null,
                });
        }
    }

    /// <summary>The "greetings" collection of methods.</summary>
    public class GreetingsResource
    {
        private const string Resource = "greetings";

        /// <summary>The service which this resource belongs to.</summary>
        private readonly Google.Apis.Services.IClientService service;

        /// <summary>Constructs a new resource.</summary>
        public GreetingsResource(Google.Apis.Services.IClientService service)
        {
            this.service = service;

        }



        public virtual AuthedRequest Authed()
        {
            return new AuthedRequest(service);
        }


        public class AuthedRequest : EccoDomaniIeriBaseServiceRequest<Nasa.Apis.public.EccoDomaniIeri.v1.Data.HelloGreeting>
        {
            /// <summary>Constructs a new Authed request.</summary>
            public AuthedRequest(Google.Apis.Services.IClientService service)
                : base(service)
            {
                InitParameters();
            }



            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "authed"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "hellogreeting/authed"; }
            }

            /// <summary>Initializes Authed parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

            }

        }


        /// <param name="id"></param>
        public virtual GetGreetingRequest GetGreeting(int id)
        {
            return new GetGreetingRequest(service, id);
        }


        public class GetGreetingRequest : EccoDomaniIeriBaseServiceRequest<Nasa.Apis.public.EccoDomaniIeri.v1.Data.HelloGreeting>
        {
            /// <summary>Constructs a new GetGreeting request.</summary>
            public GetGreetingRequest(Google.Apis.Services.IClientService service, int id)
                : base(service)
            {
                Id = id;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("id", Google.Apis.Util.RequestParameterType.Path)]
            public virtual int Id { get; private set; }


            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "getGreeting"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "hellogreeting/{id}"; }
            }

            /// <summary>Initializes GetGreeting parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "id", new Google.Apis.Discovery.Parameter
                    {
                        Name = "id",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }


        public virtual ListGreetingRequest ListGreeting()
        {
            return new ListGreetingRequest(service);
        }


        public class ListGreetingRequest : EccoDomaniIeriBaseServiceRequest<Nasa.Apis.public.EccoDomaniIeri.v1.Data.HelloGreetingCollection>
        {
            /// <summary>Constructs a new ListGreeting request.</summary>
            public ListGreetingRequest(Google.Apis.Services.IClientService service)
                : base(service)
            {
                InitParameters();
            }



            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "listGreeting"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "GET"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "hellogreeting"; }
            }

            /// <summary>Initializes ListGreeting parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

            }

        }


        /// <param name="body">The body of the request.</param>
        /// <param name="times"></param>
        public virtual MultiplyRequest Multiply(Nasa.Apis.public.EccoDomaniIeri.v1.Data.HelloGreeting body, int times)
        {
            return new MultiplyRequest(service, body, times);
        }


        public class MultiplyRequest : EccoDomaniIeriBaseServiceRequest<Nasa.Apis.public.EccoDomaniIeri.v1.Data.HelloGreeting>
        {
            /// <summary>Constructs a new Multiply request.</summary>
            public MultiplyRequest(Google.Apis.Services.IClientService service, Nasa.Apis.public.EccoDomaniIeri.v1.Data.HelloGreeting body, int times)
                : base(service)
            {
                Times = times;
                Body = body;
                InitParameters();
            }



            [Google.Apis.Util.RequestParameterAttribute("times", Google.Apis.Util.RequestParameterType.Path)]
            public virtual int Times { get; private set; }


            /// <summary>Gets or sets the body of this request.</summary>
            Nasa.Apis.public.EccoDomaniIeri.v1.Data.HelloGreeting Body { get; set; }

            ///<summary>Returns the body of the request.</summary>
            protected override object GetBody() { return Body; }

            ///<summary>Gets the method name.</summary>
            public override string MethodName
            {
                get { return "multiply"; }
            }

            ///<summary>Gets the HTTP method.</summary>
            public override string HttpMethod
            {
                get { return "POST"; }
            }

            ///<summary>Gets the REST path.</summary>
            public override string RestPath
            {
                get { return "hellogreeting/{times}"; }
            }

            /// <summary>Initializes Multiply parameter list.</summary>
            protected override void InitParameters()
            {
                base.InitParameters();

                RequestParameters.Add(
                    "times", new Google.Apis.Discovery.Parameter
                    {
                        Name = "times",
                        IsRequired = true,
                        ParameterType = "path",
                        DefaultValue = null,
                        Pattern = null,
                    });
            }

        }
    }
}
=== end: ./Nasa.Apis.public.EccoDomaniIeri.v1.cs
=== begin: ./Nasa.Apis.public.EccoDomaniIeri.v1.csproj
﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')"/>
  <PropertyGroup>
    <MinimumVisualStudioVersion>10.0</MinimumVisualStudioVersion>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{6745AAF1-A1B5-4C28-8B33-195FA88BCDAF}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Nasa.Apis.public.EccoDomaniIeri.v1</RootNamespace>
    <AssemblyName>Nasa.Apis.public.EccoDomaniIeri.v1</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <TargetFrameworkProfile>Profile328</TargetFrameworkProfile>
    <FileAlignment>512</FileAlignment>
    <ProjectTypeGuids>{786C830F-07A1-408B-BD7F-6EE04809D6DB};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <RestorePackages>true</RestorePackages>
    <DocumentationFile>Nasa.Apis.public.EccoDomaniIeri.v1.xml</DocumentationFile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'ReleaseSigned|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\ReleaseSigned\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <SignAssembly>True</SignAssembly>
    <AssemblyOriginatorKeyFile>c:\code\google.apis.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="Nasa.Apis.public.EccoDomaniIeri.v1.cs"/>
    <Compile Include="Properties\AssemblyInfo.cs"/>
  </ItemGroup>
  <ItemGroup>
    <Reference Include="Google.Apis.Core">
      <HintPath>..\packages\Google.Apis.Core.1.10.0\lib\portable-net40+sl50+win+wpa81+wp80\Google.Apis.Core.dll</HintPath>
    </Reference>
    <Reference Include="Google.Apis">
      <HintPath>..\packages\Google.Apis.1.10.0\lib\portable-net40+sl50+win+wpa81+wp80\Google.Apis.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.Threading.Tasks">
      <HintPath>..\packages\Microsoft.Bcl.Async.1.0.168\lib\portable-net40+sl4+win8+wp71+wpa81\Microsoft.Threading.Tasks.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.Threading.Tasks.Extensions">
      <HintPath>..\packages\Microsoft.Bcl.Async.1.0.168\lib\portable-net40+sl4+win8+wp71+wpa81\Microsoft.Threading.Tasks.Extensions.dll</HintPath>
    </Reference>
    <Reference Include="Newtonsoft.Json">
      <HintPath>..\packages\Newtonsoft.Json.7.0.1\lib\portable-net40+sl5+wp80+win8+wpa81\Newtonsoft.Json.dll</HintPath>
    </Reference>
    <Reference Include="System.IO">
      <HintPath>..\packages\Microsoft.Bcl.1.1.10\lib\portable-net40+sl5+win8+wp8+wpa81\System.IO.dll</HintPath>
    </Reference>
    <Reference Include="System.Net.Http">
      <HintPath>..\packages\Microsoft.Net.Http.2.2.29\lib\portable-net40+sl4+win8+wp71+wpa81\System.Net.Http.dll</HintPath>
    </Reference>
    <Reference Include="System.Net.Http.Extensions">
      <HintPath>..\packages\Microsoft.Net.Http.2.2.29\lib\portable-net40+sl4+win8+wp71+wpa81\System.Net.Http.Extensions.dll</HintPath>
    </Reference>
    <Reference Include="System.Net.Http.Primitives">
      <HintPath>..\packages\Microsoft.Net.Http.2.2.29\lib\portable-net40+sl4+win8+wp71+wpa81\System.Net.Http.Primitives.dll</HintPath>
    </Reference>
    <Reference Include="System.Runtime">
      <HintPath>..\packages\Microsoft.Bcl.1.1.10\lib\portable-net40+sl5+win8+wp8+wpa81\System.Runtime.dll</HintPath>
    </Reference>
    <Reference Include="System.Threading.Tasks">
      <HintPath>..\packages\Microsoft.Bcl.1.1.10\lib\portable-net40+sl5+win8+wp8+wpa81\System.Threading.Tasks.dll</HintPath>
    </Reference>
    <Reference Include="Zlib.Portable">
      <HintPath>..\packages\Zlib.Portable.Signed.1.11.0\lib\portable-net4+sl5+wp8+win8+wpa81+MonoTouch+MonoAndroid\Zlib.Portable.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <None Include="packages.config"/>
  </ItemGroup>
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.CSharp.targets" />
  <Import Project="..\.nuget\NuGet.targets" Condition="Exists('..\.nuget\NuGet.targets')"/>
  <Import Project="..\packages\Microsoft.Bcl.Build.1.0.21\build\Microsoft.Bcl.Build.targets" Condition="Exists('..\packages\Microsoft.Bcl.Build.1.0.21\build\Microsoft.Bcl.Build.targets')" />
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('..\packages\Microsoft.Bcl.Build.1.0.21\build\Microsoft.Bcl.Build.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Microsoft.Bcl.Build.1.0.21\build\Microsoft.Bcl.Build.targets'))" />
  </Target>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it.
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>
=== end: ./Nasa.Apis.public.EccoDomaniIeri.v1.csproj
=== begin: ./packages.config
﻿<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Google.Apis" version="1.10.0" targetFramework="portable-net40+sl50+win+wpa81+wp80"/>
  <package id="Google.Apis.Core" version="1.10.0" targetFramework="portable-net40+sl50+win+wpa81+wp80"/>
  <package id="Microsoft.Bcl" version="1.1.10" targetFramework="portable-net40+sl50+win+wpa81+wp80" />
  <package id="Microsoft.Bcl.Async" version="1.0.168" targetFramework="portable-net40+sl50+win+wpa81+wp80" />
  <package id="Microsoft.Bcl.Build" version="1.0.21" targetFramework="portable-net40+sl50+win+wpa81+wp80" />
  <package id="Microsoft.Net.Http" version="2.2.29" targetFramework="portable-net40+sl50+win+wpa81+wp80" />
  <package id="Newtonsoft.Json" version="7.0.1" targetFramework="portable-net40+sl50+win+wpa81+wp80" />
  <package id="Zlib.Portable.Signed" version="1.11.0" targetFramework="portable-net40+sl50+win+wpa81+wp80" />
</packages>
=== end: ./packages.config
=== begin: ./Properties/AssemblyInfo.cs
﻿/*
Copyright 2013 Google Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

using System.Resources;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Nasa.Apis.public.EccoDomaniIeri.v1")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyProduct("Nasa.Apis.public.EccoDomaniIeri.v1")]
[assembly: AssemblyCompany("NASA")]
[assembly: AssemblyCopyright("Copyright © NASA 2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
[assembly: AssemblyVersion("1.10.0.0")]
=== end: ./Properties/AssemblyInfo.cs

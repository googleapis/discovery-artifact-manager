=== begin: ./google/kitch_sink_api/CMakeLists.txt
# This is a CMake file for kitch_sink v1
# using the Google APIs Client Library for C++.
#
# See http://google.github.io/google-api-cpp-client/latest/start/get_started
# for more information about what to do with this file.

project (google_kitch_sink_api)

# These sources assume that the CMakeLists.txt in ../.. added itself to
# the include directories so that include paths are specified explicitly
# with the directory #include "google/kitch_sink_api/..."
add_library(google_kitch_sink_api STATIC
            enum.cc
            geometry.cc
            geometry_collection.cc
            geometry_polygon.cc
            geometry_reference.cc
            lat_long.cc
            moderator_topics_resource_partial.cc
            profile.cc
            rule.cc
            series.cc
            series_list.cc
            submission.cc
            submission_list.cc
            tag.cc
            tag_list.cc
            topic.cc
            topic2.cc
            topic_list.cc
            translation.cc
            vote.cc
            vote_list.cc
            kitch_sink_service.cc)
target_link_libraries(google_kitch_sink_api googleapis_http)
target_link_libraries(google_kitch_sink_api googleapis_internal)
target_link_libraries(google_kitch_sink_api googleapis_jsoncpp)
target_link_libraries(google_kitch_sink_api googleapis_utils)
=== end: ./google/kitch_sink_api/CMakeLists.txt
=== begin: ./google/kitch_sink_api/enum.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   Enum
// Documentation:
//   

#include "google/kitch_sink_api/enum.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "strings/stringpiece.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {


// Object factory method (static).
Enum* Enum::New() {
  return new googleapis_client::JsonCppCapsule<Enum>;
}

// Standard immutable constructor.
Enum::Enum(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Enum::Enum(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Enum::~Enum() {
}

// Properties.
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/enum.cc
=== begin: ./google/kitch_sink_api/enum.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_ENUM_H_
#define  GOOGLE_KITCH_SINK_API_ENUM_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * Enum type definition.
 *
 * @ingroup DataObject
 */
class Enum : public googleapis_client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Enum* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Enum(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Enum(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Enum();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::Enum</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::Enum";
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * Enum type name.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

 private:
  void operator=(const Enum&);
};  // Enum
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_ENUM_H_
=== end: ./google/kitch_sink_api/enum.h
=== begin: ./google/kitch_sink_api/geometry.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   Geometry
// Documentation:
//   

#include "google/kitch_sink_api/geometry.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "strings/stringpiece.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {


// Object factory method (static).
Geometry* Geometry::New() {
  return new googleapis_client::JsonCppCapsule<Geometry>;
}

// Standard immutable constructor.
Geometry::Geometry(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Geometry::Geometry(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Geometry::~Geometry() {
}

// Properties.
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/geometry.cc
=== begin: ./google/kitch_sink_api/geometry_collection.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   GeometryCollection
// Documentation:
//   

#include "google/kitch_sink_api/geometry_collection.h"
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/geometry.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {


// Object factory method (static).
GeometryCollection* GeometryCollection::New() {
  return new googleapis_client::JsonCppCapsule<GeometryCollection>;
}

// Standard immutable constructor.
GeometryCollection::GeometryCollection(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
GeometryCollection::GeometryCollection(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
GeometryCollection::~GeometryCollection() {
}

// Properties.

const googleapis_client::JsonCppArray<Geometry > GeometryCollection::get_geometries() const {
   const Json::Value& storage = Storage("geometries");
   return googleapis_client::JsonValueToCppValueHelper<googleapis_client::JsonCppArray<Geometry > >(storage);
}

googleapis_client::JsonCppArray<Geometry > GeometryCollection::mutable_geometries() {
  Json::Value* storage = MutableStorage("geometries");
  return googleapis_client::JsonValueToMutableCppValueHelper<googleapis_client::JsonCppArray<Geometry > >(storage);
}
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/geometry_collection.cc
=== begin: ./google/kitch_sink_api/geometry_collection.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_GEOMETRY_COLLECTION_H_
#define  GOOGLE_KITCH_SINK_API_GEOMETRY_COLLECTION_H_

#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/geometry.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class GeometryCollection : public googleapis_client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static GeometryCollection* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit GeometryCollection(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit GeometryCollection(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~GeometryCollection();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::GeometryCollection</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::GeometryCollection";
  }

  /**
   * Determine if the '<code>geometries</code>' attribute was set.
   *
   * @return true if the '<code>geometries</code>' attribute was set.
   */
  bool has_geometries() const {
    return Storage().isMember("geometries");
  }

  /**
   * Clears the '<code>geometries</code>' attribute.
   */
  void clear_geometries() {
    MutableStorage()->removeMember("geometries");
  }


  /**
   * Get a reference to the value of the '<code>geometries</code>' attribute.
   */
  const googleapis_client::JsonCppArray<Geometry > get_geometries() const;

  /**
   * Gets a reference to a mutable value of the '<code>geometries</code>'
   * property.
   * @return The result can be modified to change the attribute value.
   */
  googleapis_client::JsonCppArray<Geometry > mutable_geometries();

 private:
  void operator=(const GeometryCollection&);
};  // GeometryCollection
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_GEOMETRY_COLLECTION_H_
=== end: ./google/kitch_sink_api/geometry_collection.h
=== begin: ./google/kitch_sink_api/geometry.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_GEOMETRY_H_
#define  GOOGLE_KITCH_SINK_API_GEOMETRY_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class Geometry : public googleapis_client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Geometry* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Geometry(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Geometry(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Geometry();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::Geometry</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::Geometry";
  }

  /**
   * Determine if the '<code>type</code>' attribute was set.
   *
   * @return true if the '<code>type</code>' attribute was set.
   */
  bool has_type() const {
    return Storage().isMember("type");
  }

  /**
   * Clears the '<code>type</code>' attribute.
   */
  void clear_type() {
    MutableStorage()->removeMember("type");
  }


  /**
   * Get the value of the '<code>type</code>' attribute.
   */
  const StringPiece get_type() const {
    const Json::Value& v = Storage("type");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>type</code>' attribute.
   * @param[in] value The new value.
   */
  void set_type(const StringPiece& value) {
    *MutableStorage("type") = value.data();
  }

 private:
  void operator=(const Geometry&);
};  // Geometry
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_GEOMETRY_H_
=== end: ./google/kitch_sink_api/geometry.h
=== begin: ./google/kitch_sink_api/geometry_polygon.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   GeometryPolygon
// Documentation:
//   

#include "google/kitch_sink_api/geometry_polygon.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "strings/stringpiece.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {


// Object factory method (static).
GeometryPolygon* GeometryPolygon::New() {
  return new googleapis_client::JsonCppCapsule<GeometryPolygon>;
}

// Standard immutable constructor.
GeometryPolygon::GeometryPolygon(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
GeometryPolygon::GeometryPolygon(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
GeometryPolygon::~GeometryPolygon() {
}

// Properties.
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/geometry_polygon.cc
=== begin: ./google/kitch_sink_api/geometry_polygon.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_GEOMETRY_POLYGON_H_
#define  GOOGLE_KITCH_SINK_API_GEOMETRY_POLYGON_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class GeometryPolygon : public googleapis_client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static GeometryPolygon* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit GeometryPolygon(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit GeometryPolygon(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~GeometryPolygon();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::GeometryPolygon</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::GeometryPolygon";
  }

  /**
   * Determine if the '<code>coordinates</code>' attribute was set.
   *
   * @return true if the '<code>coordinates</code>' attribute was set.
   */
  bool has_coordinates() const {
    return Storage().isMember("coordinates");
  }

  /**
   * Clears the '<code>coordinates</code>' attribute.
   */
  void clear_coordinates() {
    MutableStorage()->removeMember("coordinates");
  }


  /**
   * Get the value of the '<code>coordinates</code>' attribute.
   */
  const StringPiece get_coordinates() const {
    const Json::Value& v = Storage("coordinates");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>coordinates</code>' attribute.
   * @param[in] value The new value.
   */
  void set_coordinates(const StringPiece& value) {
    *MutableStorage("coordinates") = value.data();
  }

 private:
  void operator=(const GeometryPolygon&);
};  // GeometryPolygon
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_GEOMETRY_POLYGON_H_
=== end: ./google/kitch_sink_api/geometry_polygon.h
=== begin: ./google/kitch_sink_api/geometry_reference.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   GeometryReference
// Documentation:
//   

#include "google/kitch_sink_api/geometry_reference.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "strings/stringpiece.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {


// Object factory method (static).
GeometryReference* GeometryReference::New() {
  return new googleapis_client::JsonCppCapsule<GeometryReference>;
}

// Standard immutable constructor.
GeometryReference::GeometryReference(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
GeometryReference::GeometryReference(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
GeometryReference::~GeometryReference() {
}

// Properties.
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/geometry_reference.cc
=== begin: ./google/kitch_sink_api/geometry_reference.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_GEOMETRY_REFERENCE_H_
#define  GOOGLE_KITCH_SINK_API_GEOMETRY_REFERENCE_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class GeometryReference : public googleapis_client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static GeometryReference* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit GeometryReference(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit GeometryReference(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~GeometryReference();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::GeometryReference</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::GeometryReference";
  }

  /**
   * Determine if the '<code>coordinates</code>' attribute was set.
   *
   * @return true if the '<code>coordinates</code>' attribute was set.
   */
  bool has_coordinates() const {
    return Storage().isMember("coordinates");
  }

  /**
   * Clears the '<code>coordinates</code>' attribute.
   */
  void clear_coordinates() {
    MutableStorage()->removeMember("coordinates");
  }


  /**
   * Get the value of the '<code>coordinates</code>' attribute.
   */
  const StringPiece get_coordinates() const {
    const Json::Value& v = Storage("coordinates");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>coordinates</code>' attribute.
   * @param[in] value The new value.
   */
  void set_coordinates(const StringPiece& value) {
    *MutableStorage("coordinates") = value.data();
  }

  /**
   * Determine if the '<code>type</code>' attribute was set.
   *
   * @return true if the '<code>type</code>' attribute was set.
   */
  bool has_type() const {
    return Storage().isMember("type");
  }

  /**
   * Clears the '<code>type</code>' attribute.
   */
  void clear_type() {
    MutableStorage()->removeMember("type");
  }


  /**
   * Get the value of the '<code>type</code>' attribute.
   */
  const StringPiece get_type() const {
    const Json::Value& v = Storage("type");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>type</code>' attribute.
   * @param[in] value The new value.
   */
  void set_type(const StringPiece& value) {
    *MutableStorage("type") = value.data();
  }

 private:
  void operator=(const GeometryReference&);
};  // GeometryReference
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_GEOMETRY_REFERENCE_H_
=== end: ./google/kitch_sink_api/geometry_reference.h
=== begin: ./google/kitch_sink_api/kitch_sink_api.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
// This code was generated by google-apis-code-generator 1.5.1

#ifndef  GOOGLE_KITCH_SINK_API_KITCH_SINK_API_H_
#define  GOOGLE_KITCH_SINK_API_KITCH_SINK_API_H_

#include "google/kitch_sink_api/enum.h"
#include "google/kitch_sink_api/geometry.h"
#include "google/kitch_sink_api/geometry_collection.h"
#include "google/kitch_sink_api/geometry_polygon.h"
#include "google/kitch_sink_api/geometry_reference.h"
#include "google/kitch_sink_api/lat_long.h"
#include "google/kitch_sink_api/moderator_topics_resource_partial.h"
#include "google/kitch_sink_api/profile.h"
#include "google/kitch_sink_api/rule.h"
#include "google/kitch_sink_api/series.h"
#include "google/kitch_sink_api/series_list.h"
#include "google/kitch_sink_api/translation.h"
#include "google/kitch_sink_api/submission.h"
#include "google/kitch_sink_api/submission_list.h"
#include "google/kitch_sink_api/tag.h"
#include "google/kitch_sink_api/tag_list.h"
#include "google/kitch_sink_api/topic.h"
#include "google/kitch_sink_api/topic2.h"
#include "google/kitch_sink_api/topic_list.h"
#include "google/kitch_sink_api/vote.h"
#include "google/kitch_sink_api/vote_list.h"

#include "google/kitch_sink_api/kitch_sink_service.h"


#endif  // GOOGLE_KITCH_SINK_API_KITCH_SINK_API_H_
=== end: ./google/kitch_sink_api/kitch_sink_api.h
=== begin: ./google/kitch_sink_api/kitch_sink_service.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.5.1
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#include "google/kitch_sink_api/kitch_sink_service.h"

#include <string>
#include "apiserving/clients/cpp/service/client_service.h"
#include "apiserving/clients/cpp/service/media_uploader.h"
#include "apiserving/clients/cpp/util/status.h"
#include "base/integral_types.h"

#include "google/kitch_sink_api/profile.h"
#include "google/kitch_sink_api/series.h"
#include "google/kitch_sink_api/series_list.h"
#include "google/kitch_sink_api/submission.h"
#include "google/kitch_sink_api/submission_list.h"
#include "google/kitch_sink_api/tag.h"
#include "google/kitch_sink_api/topic.h"
#include "google/kitch_sink_api/topic2.h"
#include "google/kitch_sink_api/topic_list.h"
#include "google/kitch_sink_api/vote.h"
#include "google/kitch_sink_api/vote_list.h"


#include "apiserving/clients/cpp/data/data_reader.h"
#include "apiserving/clients/cpp/transport/http_request.h"
#include "apiserving/clients/cpp/transport/http_transport.h"
#include "apiserving/clients/cpp/util/uri_utils.h"
#include "strings/strcat.h"

namespace google_kitch_sink_api {

const char KitchSinkService::googleapis_API_NAME[] = { "kitch_sink" };

const char KitchSinkService::googleapis_API_VERSION[] = { "v1" };

const char KitchSinkService::googleapis_API_GENERATOR[] = {
  "google-apis-code-generator 1.5.1 / 0.1.5"};


const char KitchSinkService::SCOPES::MAIL_GOOGLE_COM[] = {"https://mail.google.com/"};

const char KitchSinkService::SCOPES::PRODUCT[] = {"https://www.googleapis.com/auth/product"};

const char KitchSinkService::SCOPES::USERINFO_EMAIL[] = {"https://www.googleapis.com/auth/userinfo.email"};
KitchSinkServiceBaseRequest::KitchSinkServiceBaseRequest(
      const googleapis_client::ClientService* service,
      googleapis_client::AuthorizationCredential* credential,
      googleapis_client::HttpRequest::HttpMethod method,
      const string& uri_template)
    : googleapis_client::ClientServiceRequest(
          service, credential, method, uri_template),
      alt_("json"),
      pretty_print_(true),
      _have_alt_(false),
      _have_oauth_token_(false),
      _have_pretty_print_(false) {
}

KitchSinkServiceBaseRequest::~KitchSinkServiceBaseRequest() {
}

::util::Status KitchSinkServiceBaseRequest::AppendVariable(
    const string& variable_name,
    const googleapis_client::UriTemplateConfig& config,
    string* target) {
  return googleapis_client::StatusInvalidArgument(
      StrCat("Unknown url variable='", variable_name, "'"));
}

::util::Status KitchSinkServiceBaseRequest::AppendOptionalQueryParameters(
    string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_alt_) {
    StrAppend(target, sep, "alt=",
              googleapis_client::CppValueToEscapedUrlValue(
                alt_));
    sep = "&";
  }
  if (_have_oauth_token_) {
    StrAppend(target, sep, "oauth_token=",
              googleapis_client::CppValueToEscapedUrlValue(
                oauth_token_));
    sep = "&";
  }
  if (_have_pretty_print_) {
    StrAppend(target, sep, "prettyPrint=",
              googleapis_client::CppValueToEscapedUrlValue(
                pretty_print_));
    sep = "&";
  }
  return googleapis_client::ClientServiceRequest
         ::AppendOptionalQueryParameters(target);
}


void KitchSinkServiceBaseRequest::AddJsonContentToRequest(
    const googleapis_client::JsonCppData *content) {
  googleapis_client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
        googleapis_client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(content->MakeJsonReader());
}






// Standard constructor.
FeaturedResource_SeriesResource_ListMethod::FeaturedResource_SeriesResource_ListMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "series/featured") {
}

// Standard destructor.
FeaturedResource_SeriesResource_ListMethod::~FeaturedResource_SeriesResource_ListMethod() {
}





// Standard constructor.
GlobalResource_SeriesResource_ListMethod::GlobalResource_SeriesResource_ListMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "search"),
      _have_max_results_(false),
      _have_q_(false),
      _have_start_index_(false),
      _have_enum_(false) {
}

// Standard destructor.
GlobalResource_SeriesResource_ListMethod::~GlobalResource_SeriesResource_ListMethod() {
}

::util::Status GlobalResource_SeriesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              googleapis_client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_q_) {
    StrAppend(target, sep, "q=",
              googleapis_client::CppValueToEscapedUrlValue(
                q_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              googleapis_client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  if (_have_enum_) {
    StrAppend(target, sep, "enum=",
              googleapis_client::CppValueToEscapedUrlValue(
                enum_));
    sep = "&";
  }
  return KitchSinkServiceBaseRequest::AppendOptionalQueryParameters(target);
}
::util::Status GlobalResource_SeriesResource_ListMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}





// Standard constructor.
MyResource_SeriesResource_ListMethod::MyResource_SeriesResource_ListMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "series/@me/mine") {
}

// Standard destructor.
MyResource_SeriesResource_ListMethod::~MyResource_SeriesResource_ListMethod() {
}





// Standard constructor.
MyrecentResource_PrivateResource_ListMethod::MyrecentResource_PrivateResource_ListMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "series/@me/recent") {
}

// Standard destructor.
MyrecentResource_PrivateResource_ListMethod::~MyrecentResource_PrivateResource_ListMethod() {
}


// Standard constructor.
ProfilesResource_GetMethod::ProfilesResource_GetMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "profiles/@me") {
}

// Standard destructor.
ProfilesResource_GetMethod::~ProfilesResource_GetMethod() {
}


// Standard constructor.
ProfilesResource_UpdateMethod::ProfilesResource_UpdateMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const Profile& __request_content__)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::PUT,
        "profiles/@me") {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProfilesResource_UpdateMethod::~ProfilesResource_UpdateMethod() {
}


// static
const googleapis_client::MediaUploadSpec
ResponsesResource_InsertMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/sink/v1/files", true);


// static
const googleapis_client::MediaUploadSpec
ResponsesResource_InsertMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/sink/v1/files", true);



// Deprecated constructor did not take media upload arguments.
ResponsesResource_InsertMethod::ResponsesResource_InsertMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& topic_id, const int32& parent_submission_id)
    : KitchSinkServiceBaseRequest(
      _service_, _credential_,
      googleapis_client::HttpRequest::POST,
      "series/{seriesId}/topics/{topicId}/submissions/{parentSubmissionId}/responses"),
      series_id_(series_id),
      topic_id_(topic_id),
      parent_submission_id_(parent_submission_id),
      _have_anonymous_(false) {
  uploader_.reset(new googleapis_client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      googleapis_client::JoinPath(
          _service_->url_path(), "series/{seriesId}/topics/{topicId}/submissions/{parentSubmissionId}/responses")));
}
// Standard constructor.
ResponsesResource_InsertMethod::ResponsesResource_InsertMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& topic_id, const int32& parent_submission_id, const Submission* _metadata_, const char* _media_content_type_, googleapis_client::DataReader* _media_content_reader_)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::POST,
        "series/{seriesId}/topics/{topicId}/submissions/{parentSubmissionId}/responses"),
      series_id_(series_id),
      topic_id_(topic_id),
      parent_submission_id_(parent_submission_id),
      _have_anonymous_(false) {
  if (_media_content_reader_) {
    googleapis_client::MediaUploader* uploader =
        new googleapis_client::MediaUploader(
            &SIMPLE_MEDIA_UPLOAD,
            _service_->url_root(),
            googleapis_client::JoinPath(
                _service_->url_path(), "series/{seriesId}/topics/{topicId}/submissions/{parentSubmissionId}/responses"));
    if (_metadata_) {
      uploader->set_metadata(*_metadata_);
    }
    uploader->set_media_content_reader(
        _media_content_type_, _media_content_reader_);
    ResetMediaUploader(uploader);
  } else {
    AddJsonContentToRequest(_metadata_);
  }
}

// Standard destructor.
ResponsesResource_InsertMethod::~ResponsesResource_InsertMethod() {
}

::util::Status ResponsesResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_anonymous_) {
    StrAppend(target, sep, "anonymous=",
              googleapis_client::CppValueToEscapedUrlValue(
                anonymous_));
    sep = "&";
  }
  return KitchSinkServiceBaseRequest::AppendOptionalQueryParameters(target);
}
::util::Status ResponsesResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  if (variable_name == "topicId") {
    googleapis_client::UriTemplate::AppendValue(
        topic_id_, config, target);
    return googleapis_client::StatusOk();
  }
  if (variable_name == "parentSubmissionId") {
    googleapis_client::UriTemplate::AppendValue(
        parent_submission_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ResponsesResource_ListMethod::ResponsesResource_ListMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& submission_id)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "series/{seriesId}/submissions/{submissionId}/responses"),
      series_id_(series_id),
      submission_id_(submission_id),
      _have_author_(false),
      _have_has_attached_video_(false),
      _have_q_(false),
      _have_sort_(false),
      _have_start_index_(false) {
}

// Standard destructor.
ResponsesResource_ListMethod::~ResponsesResource_ListMethod() {
}

::util::Status ResponsesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_author_) {
    StrAppend(target, sep, "author=",
              googleapis_client::CppValueToEscapedUrlValue(
                author_));
    sep = "&";
  }
  if (_have_has_attached_video_) {
    StrAppend(target, sep, "hasAttachedVideo=",
              googleapis_client::CppValueToEscapedUrlValue(
                has_attached_video_));
    sep = "&";
  }
  if (_have_q_) {
    StrAppend(target, sep, "q=",
              googleapis_client::CppValueToEscapedUrlValue(
                q_));
    sep = "&";
  }
  if (_have_sort_) {
    StrAppend(target, sep, "sort=",
              googleapis_client::CppValueToEscapedUrlValue(
                sort_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              googleapis_client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return KitchSinkServiceBaseRequest::AppendOptionalQueryParameters(target);
}
::util::Status ResponsesResource_ListMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  if (variable_name == "submissionId") {
    googleapis_client::UriTemplate::AppendValue(
        submission_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SeriesResource_GetMethod::SeriesResource_GetMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "series/{seriesId}"),
      series_id_(series_id) {
}

// Standard destructor.
SeriesResource_GetMethod::~SeriesResource_GetMethod() {
}


::util::Status SeriesResource_GetMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const googleapis_client::MediaUploadSpec
SeriesResource_InsertMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/sink/v1/series", true);


// static
const googleapis_client::MediaUploadSpec
SeriesResource_InsertMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/sink/v1/series", true);



// Standard constructor.
SeriesResource_InsertMethod::SeriesResource_InsertMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const char* _media_content_type_, googleapis_client::DataReader* _media_content_reader_)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::POST,
        "series") {
  if (_media_content_reader_) {
    googleapis_client::MediaUploader* uploader =
        new googleapis_client::MediaUploader(
            &SIMPLE_MEDIA_UPLOAD,
            _service_->url_root(),
            googleapis_client::JoinPath(
                _service_->url_path(), "series"));
    uploader->set_media_content_reader(
        _media_content_type_, _media_content_reader_);
    ResetMediaUploader(uploader);
  }
}

// Standard destructor.
SeriesResource_InsertMethod::~SeriesResource_InsertMethod() {
}


// Standard constructor.
SeriesResource_ListMethod::SeriesResource_ListMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "series"),
      _have_max_results_(false),
      _have_q_(false),
      _have_start_index_(false) {
}

// Standard destructor.
SeriesResource_ListMethod::~SeriesResource_ListMethod() {
}

::util::Status SeriesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              googleapis_client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_q_) {
    StrAppend(target, sep, "q=",
              googleapis_client::CppValueToEscapedUrlValue(
                q_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              googleapis_client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return KitchSinkServiceBaseRequest::AppendOptionalQueryParameters(target);
}
::util::Status SeriesResource_ListMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SeriesResource_UpdateMethod::SeriesResource_UpdateMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const Series& __request_content__)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::PUT,
        "series/{seriesId}"),
      series_id_(series_id) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
SeriesResource_UpdateMethod::~SeriesResource_UpdateMethod() {
}


::util::Status SeriesResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}





// Standard constructor.
SeriesResource_ResponsesResource_ListMethod::SeriesResource_ResponsesResource_ListMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const StringPiece& q)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "series/{seriesId}/responses"),
      series_id_(series_id),
      q_(q.as_string()),
      _have_author_(false),
      _have_has_attached_video_(false),
      _have_max_results_(false),
      _have_sort_(false),
      _have_start_index_(false) {
}

// Standard destructor.
SeriesResource_ResponsesResource_ListMethod::~SeriesResource_ResponsesResource_ListMethod() {
}

::util::Status SeriesResource_ResponsesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_author_) {
    StrAppend(target, sep, "author=",
              googleapis_client::CppValueToEscapedUrlValue(
                author_));
    sep = "&";
  }
  if (_have_has_attached_video_) {
    StrAppend(target, sep, "hasAttachedVideo=",
              googleapis_client::CppValueToEscapedUrlValue(
                has_attached_video_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              googleapis_client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
    StrAppend(target, sep, "q=",
              googleapis_client::CppValueToEscapedUrlValue(
                q_));
    sep = "&";
  if (_have_sort_) {
    StrAppend(target, sep, "sort=",
              googleapis_client::CppValueToEscapedUrlValue(
                sort_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              googleapis_client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return KitchSinkServiceBaseRequest::AppendOptionalQueryParameters(target);
}
::util::Status SeriesResource_ResponsesResource_ListMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
SeriesResource_SubmissionsResource_ListMethod::SeriesResource_SubmissionsResource_ListMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "series/{seriesId}/submissions"),
      series_id_(series_id),
      _have_author_(false),
      _have_has_attached_video_(false),
      _have_lang_(false),
      _have_q_(false),
      _have_sort_(false),
      _have_start_index_(false) {
}

// Standard destructor.
SeriesResource_SubmissionsResource_ListMethod::~SeriesResource_SubmissionsResource_ListMethod() {
}

::util::Status SeriesResource_SubmissionsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_author_) {
    StrAppend(target, sep, "author=",
              googleapis_client::CppValueToEscapedUrlValue(
                author_));
    sep = "&";
  }
  if (_have_has_attached_video_) {
    StrAppend(target, sep, "hasAttachedVideo=",
              googleapis_client::CppValueToEscapedUrlValue(
                has_attached_video_));
    sep = "&";
  }
  if (_have_lang_) {
    StrAppend(target, sep, "lang=",
              googleapis_client::CppValueToEscapedUrlValue(
                lang_));
    sep = "&";
  }
  if (_have_q_) {
    StrAppend(target, sep, "q=",
              googleapis_client::CppValueToEscapedUrlValue(
                q_));
    sep = "&";
  }
  if (_have_sort_) {
    StrAppend(target, sep, "sort=",
              googleapis_client::CppValueToEscapedUrlValue(
                sort_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              googleapis_client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return KitchSinkServiceBaseRequest::AppendOptionalQueryParameters(target);
}
::util::Status SeriesResource_SubmissionsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SubmissionsResource_GetMethod::SubmissionsResource_GetMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& submission_id)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "series/{seriesId}/submissions/{submissionId}"),
      series_id_(series_id),
      submission_id_(submission_id),
      _have_lang_(false) {
}

// Standard destructor.
SubmissionsResource_GetMethod::~SubmissionsResource_GetMethod() {
}

::util::Status SubmissionsResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_lang_) {
    StrAppend(target, sep, "lang=",
              googleapis_client::CppValueToEscapedUrlValue(
                lang_));
    sep = "&";
  }
  return KitchSinkServiceBaseRequest::AppendOptionalQueryParameters(target);
}
::util::Status SubmissionsResource_GetMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  if (variable_name == "submissionId") {
    googleapis_client::UriTemplate::AppendValue(
        submission_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
SubmissionsResource_InsertMethod::SubmissionsResource_InsertMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& topic_id, const Submission& __request_content__)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::POST,
        "series/{seriesId}/topics/{topicId}/submissions"),
      series_id_(series_id),
      topic_id_(topic_id),
      _have_anonymous_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
SubmissionsResource_InsertMethod::~SubmissionsResource_InsertMethod() {
}

::util::Status SubmissionsResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_anonymous_) {
    StrAppend(target, sep, "anonymous=",
              googleapis_client::CppValueToEscapedUrlValue(
                anonymous_));
    sep = "&";
  }
  return KitchSinkServiceBaseRequest::AppendOptionalQueryParameters(target);
}
::util::Status SubmissionsResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  if (variable_name == "topicId") {
    googleapis_client::UriTemplate::AppendValue(
        topic_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TagsResource_DeleteMethod::TagsResource_DeleteMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& submission_id, const StringPiece& tag_id)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::DELETE,
        "series/{seriesId}/submissions/{submissionId}/tags/{tagId}"),
      series_id_(series_id),
      submission_id_(submission_id),
      tag_id_(tag_id.as_string()) {
}

// Standard destructor.
TagsResource_DeleteMethod::~TagsResource_DeleteMethod() {
}


::util::Status TagsResource_DeleteMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  if (variable_name == "submissionId") {
    googleapis_client::UriTemplate::AppendValue(
        submission_id_, config, target);
    return googleapis_client::StatusOk();
  }
  if (variable_name == "tagId") {
    googleapis_client::UriTemplate::AppendValue(
        tag_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TagsResource_InsertMethod::TagsResource_InsertMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& submission_id, const Tag& __request_content__)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::POST,
        "series/{seriesId}/submissions/{submissionId}/tags"),
      series_id_(series_id),
      submission_id_(submission_id) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TagsResource_InsertMethod::~TagsResource_InsertMethod() {
}


::util::Status TagsResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  if (variable_name == "submissionId") {
    googleapis_client::UriTemplate::AppendValue(
        submission_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TagsResource_ListMethod::TagsResource_ListMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const StringPiece& id, const StringPiece& else__)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "series/{id}/submissions/{else}/tags"),
      id_(id.as_string()),
      else_(else__.as_string()) {
}

// Standard destructor.
TagsResource_ListMethod::~TagsResource_ListMethod() {
}


::util::Status TagsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "id") {
    googleapis_client::UriTemplate::AppendValue(
        id_, config, target);
    return googleapis_client::StatusOk();
  }
  if (variable_name == "else") {
    googleapis_client::UriTemplate::AppendValue(
        else_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TopicsResource_GetMethod::TopicsResource_GetMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& topic_id)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "series/{seriesId}/topics/{topicId}"),
      series_id_(series_id),
      topic_id_(topic_id) {
}

// Standard destructor.
TopicsResource_GetMethod::~TopicsResource_GetMethod() {
}


::util::Status TopicsResource_GetMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  if (variable_name == "topicId") {
    googleapis_client::UriTemplate::AppendValue(
        topic_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TopicsResource_InsertMethod::TopicsResource_InsertMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const Topic& __request_content__)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::POST,
        "series/{seriesId}/topics"),
      series_id_(series_id) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TopicsResource_InsertMethod::~TopicsResource_InsertMethod() {
}


::util::Status TopicsResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TopicsResource_ListMethod::TopicsResource_ListMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "series/{seriesId}/topics"),
      series_id_(series_id),
      _have_max_results_(false),
      _have_mode_(false),
      _have_q_(false),
      _have_start_index_(false) {
}

// Standard destructor.
TopicsResource_ListMethod::~TopicsResource_ListMethod() {
}

::util::Status TopicsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_max_results_) {
    StrAppend(target, sep, "max-results=",
              googleapis_client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_mode_) {
    StrAppend(target, sep, "mode=",
              googleapis_client::CppValueToEscapedUrlValue(
                mode_));
    sep = "&";
  }
  if (_have_q_) {
    StrAppend(target, sep, "q=",
              googleapis_client::CppValueToEscapedUrlValue(
                q_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              googleapis_client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return KitchSinkServiceBaseRequest::AppendOptionalQueryParameters(target);
}
::util::Status TopicsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
TopicsResource_UpdateMethod::TopicsResource_UpdateMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& topic_id, const Topic& __request_content__)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::PUT,
        "series/{seriesId}/topics/{topicId}"),
      series_id_(series_id),
      topic_id_(topic_id) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
TopicsResource_UpdateMethod::~TopicsResource_UpdateMethod() {
}


::util::Status TopicsResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  if (variable_name == "topicId") {
    googleapis_client::UriTemplate::AppendValue(
        topic_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}





// Standard constructor.
TopicsResource_SubmissionsResource_ListMethod::TopicsResource_SubmissionsResource_ListMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& topic_id)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "series/{seriesId}/topics/{topicId}/submissions"),
      series_id_(series_id),
      topic_id_(topic_id),
      _have_author_(false),
      _have_has_attached_video_(false),
      _have_q_(false),
      _have_sort_(false),
      _have_start_index_(false) {
}

// Standard destructor.
TopicsResource_SubmissionsResource_ListMethod::~TopicsResource_SubmissionsResource_ListMethod() {
}

::util::Status TopicsResource_SubmissionsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_author_) {
    StrAppend(target, sep, "author=",
              googleapis_client::CppValueToEscapedUrlValue(
                author_));
    sep = "&";
  }
  if (_have_has_attached_video_) {
    StrAppend(target, sep, "hasAttachedVideo=",
              googleapis_client::CppValueToEscapedUrlValue(
                has_attached_video_));
    sep = "&";
  }
  if (_have_q_) {
    StrAppend(target, sep, "q=",
              googleapis_client::CppValueToEscapedUrlValue(
                q_));
    sep = "&";
  }
  if (_have_sort_) {
    StrAppend(target, sep, "sort=",
              googleapis_client::CppValueToEscapedUrlValue(
                sort_));
    sep = "&";
  }
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              googleapis_client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return KitchSinkServiceBaseRequest::AppendOptionalQueryParameters(target);
}
::util::Status TopicsResource_SubmissionsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  if (variable_name == "topicId") {
    googleapis_client::UriTemplate::AppendValue(
        topic_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
VotesResource_GetMethod::VotesResource_GetMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& submission_id)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "series/{seriesId}/submissions/{submissionId}/votes/@me"),
      series_id_(series_id),
      submission_id_(submission_id),
      _have_user_id_(false) {
}

// Standard destructor.
VotesResource_GetMethod::~VotesResource_GetMethod() {
}

::util::Status VotesResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_user_id_) {
    StrAppend(target, sep, "userId=",
              googleapis_client::CppValueToEscapedUrlValue(
                user_id_));
    sep = "&";
  }
  return KitchSinkServiceBaseRequest::AppendOptionalQueryParameters(target);
}
::util::Status VotesResource_GetMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  if (variable_name == "submissionId") {
    googleapis_client::UriTemplate::AppendValue(
        submission_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
VotesResource_InsertMethod::VotesResource_InsertMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& submission_id, const Vote& __request_content__)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::POST,
        "series/{seriesId}/submissions/{submissionId}/votes/@me"),
      series_id_(series_id),
      submission_id_(submission_id) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
VotesResource_InsertMethod::~VotesResource_InsertMethod() {
}


::util::Status VotesResource_InsertMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  if (variable_name == "submissionId") {
    googleapis_client::UriTemplate::AppendValue(
        submission_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
VotesResource_ListMethod::VotesResource_ListMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::GET,
        "series/{seriesId}/votes/@me"),
      series_id_(series_id),
      _have_start_index_(false) {
}

// Standard destructor.
VotesResource_ListMethod::~VotesResource_ListMethod() {
}

::util::Status VotesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_start_index_) {
    StrAppend(target, sep, "start-index=",
              googleapis_client::CppValueToEscapedUrlValue(
                start_index_));
    sep = "&";
  }
  return KitchSinkServiceBaseRequest::AppendOptionalQueryParameters(target);
}
::util::Status VotesResource_ListMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
VotesResource_UpdateMethod::VotesResource_UpdateMethod(
    const KitchSinkService* _service_, googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& submission_id, const Vote& __request_content__)
    : KitchSinkServiceBaseRequest(
        _service_, _credential_,
        googleapis_client::HttpRequest::PUT,
        "series/{seriesId}/submissions/{submission_id}/votes/@me"),
      series_id_(series_id),
      submission_id_(submission_id),
      _have_user_id_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
VotesResource_UpdateMethod::~VotesResource_UpdateMethod() {
}

::util::Status VotesResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_user_id_) {
    StrAppend(target, sep, "userId=",
              googleapis_client::CppValueToEscapedUrlValue(
                user_id_));
    sep = "&";
  }
  return KitchSinkServiceBaseRequest::AppendOptionalQueryParameters(target);
}
::util::Status VotesResource_UpdateMethod::AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "seriesId") {
    googleapis_client::UriTemplate::AppendValue(
        series_id_, config, target);
    return googleapis_client::StatusOk();
  }
  if (variable_name == "submission_id") {
    googleapis_client::UriTemplate::AppendValue(
        submission_id_, config, target);
    return googleapis_client::StatusOk();
  }
  return KitchSinkServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



KitchSinkService::KitchSinkService(googleapis_client::HttpTransport* transport)
  : ClientService("https://www.googleapis.com/", "sink/v1/", transport), featured_(this), global_(this), my_(this), myrecent_(this), profiles_(this), responses_(this), series_(this), submissions_(this), tags_(this), topics_(this), votes_(this) {
}

KitchSinkService::~KitchSinkService() {
}


KitchSinkService::FeaturedResource::FeaturedResource(KitchSinkService* service)
  : service_(service), series_(service) {
}




KitchSinkService::FeaturedResource::SeriesResource::SeriesResource(KitchSinkService* service)
  : service_(service) {
}



FeaturedResource_SeriesResource_ListMethod* KitchSinkService::FeaturedResource::SeriesResource::NewListMethod(googleapis_client::AuthorizationCredential* _credential_) const {
  return new FeaturedResource_SeriesResource_ListMethod(service_, _credential_);
}

KitchSinkService::GlobalResource::GlobalResource(KitchSinkService* service)
  : service_(service), series_(service) {
}




KitchSinkService::GlobalResource::SeriesResource::SeriesResource(KitchSinkService* service)
  : service_(service) {
}



GlobalResource_SeriesResource_ListMethod* KitchSinkService::GlobalResource::SeriesResource::NewListMethod(googleapis_client::AuthorizationCredential* _credential_) const {
  return new GlobalResource_SeriesResource_ListMethod(service_, _credential_);
}

KitchSinkService::MyResource::MyResource(KitchSinkService* service)
  : service_(service), series_(service) {
}




KitchSinkService::MyResource::SeriesResource::SeriesResource(KitchSinkService* service)
  : service_(service) {
}



MyResource_SeriesResource_ListMethod* KitchSinkService::MyResource::SeriesResource::NewListMethod(googleapis_client::AuthorizationCredential* _credential_) const {
  return new MyResource_SeriesResource_ListMethod(service_, _credential_);
}

KitchSinkService::MyrecentResource::MyrecentResource(KitchSinkService* service)
  : service_(service), private_(service) {
}




KitchSinkService::MyrecentResource::PrivateResource::PrivateResource(KitchSinkService* service)
  : service_(service) {
}



MyrecentResource_PrivateResource_ListMethod* KitchSinkService::MyrecentResource::PrivateResource::NewListMethod(googleapis_client::AuthorizationCredential* _credential_) const {
  return new MyrecentResource_PrivateResource_ListMethod(service_, _credential_);
}

KitchSinkService::ProfilesResource::ProfilesResource(KitchSinkService* service)
  : service_(service) {
}



ProfilesResource_GetMethod* KitchSinkService::ProfilesResource::NewGetMethod(googleapis_client::AuthorizationCredential* _credential_) const {
  return new ProfilesResource_GetMethod(service_, _credential_);
}


ProfilesResource_UpdateMethod* KitchSinkService::ProfilesResource::NewUpdateMethod(googleapis_client::AuthorizationCredential* _credential_, const Profile& __request_content__) const {
  return new ProfilesResource_UpdateMethod(service_, _credential_, __request_content__);
}

KitchSinkService::ResponsesResource::ResponsesResource(KitchSinkService* service)
  : service_(service) {
}




// This factory method is deprecated in favor of the newer variation that
// also takes the media upload parameters.
ResponsesResource_InsertMethod* KitchSinkService::ResponsesResource::NewInsertMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& topic_id, const int32& parent_submission_id) const {
  return new ResponsesResource_InsertMethod(service_, _credential_, series_id, topic_id, parent_submission_id);
}

ResponsesResource_InsertMethod* KitchSinkService::ResponsesResource::NewInsertMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& topic_id, const int32& parent_submission_id, const Submission* _metadata_, const char* _media_content_type_, googleapis_client::DataReader* _media_content_reader_) const {
  return new ResponsesResource_InsertMethod(service_, _credential_, series_id, topic_id, parent_submission_id, _metadata_, _media_content_type_, _media_content_reader_);
}


ResponsesResource_ListMethod* KitchSinkService::ResponsesResource::NewListMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& submission_id) const {
  return new ResponsesResource_ListMethod(service_, _credential_, series_id, submission_id);
}

KitchSinkService::SeriesResource::SeriesResource(KitchSinkService* service)
  : service_(service), responses_(service), submissions_(service) {
}



SeriesResource_GetMethod* KitchSinkService::SeriesResource::NewGetMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id) const {
  return new SeriesResource_GetMethod(service_, _credential_, series_id);
}


SeriesResource_InsertMethod* KitchSinkService::SeriesResource::NewInsertMethod(googleapis_client::AuthorizationCredential* _credential_, const char* _media_content_type_, googleapis_client::DataReader* _media_content_reader_) const {
  return new SeriesResource_InsertMethod(service_, _credential_, _media_content_type_, _media_content_reader_);
}


SeriesResource_ListMethod* KitchSinkService::SeriesResource::NewListMethod(googleapis_client::AuthorizationCredential* _credential_) const {
  return new SeriesResource_ListMethod(service_, _credential_);
}


SeriesResource_UpdateMethod* KitchSinkService::SeriesResource::NewUpdateMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const Series& __request_content__) const {
  return new SeriesResource_UpdateMethod(service_, _credential_, series_id, __request_content__);
}



KitchSinkService::SeriesResource::ResponsesResource::ResponsesResource(KitchSinkService* service)
  : service_(service) {
}



SeriesResource_ResponsesResource_ListMethod* KitchSinkService::SeriesResource::ResponsesResource::NewListMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const StringPiece& q) const {
  return new SeriesResource_ResponsesResource_ListMethod(service_, _credential_, series_id, q);
}

KitchSinkService::SeriesResource::SubmissionsResource::SubmissionsResource(KitchSinkService* service)
  : service_(service) {
}



SeriesResource_SubmissionsResource_ListMethod* KitchSinkService::SeriesResource::SubmissionsResource::NewListMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id) const {
  return new SeriesResource_SubmissionsResource_ListMethod(service_, _credential_, series_id);
}

KitchSinkService::SubmissionsResource::SubmissionsResource(KitchSinkService* service)
  : service_(service) {
}



SubmissionsResource_GetMethod* KitchSinkService::SubmissionsResource::NewGetMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& submission_id) const {
  return new SubmissionsResource_GetMethod(service_, _credential_, series_id, submission_id);
}


SubmissionsResource_InsertMethod* KitchSinkService::SubmissionsResource::NewInsertMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& topic_id, const Submission& __request_content__) const {
  return new SubmissionsResource_InsertMethod(service_, _credential_, series_id, topic_id, __request_content__);
}

KitchSinkService::TagsResource::TagsResource(KitchSinkService* service)
  : service_(service) {
}



TagsResource_DeleteMethod* KitchSinkService::TagsResource::NewDeleteMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& submission_id, const StringPiece& tag_id) const {
  return new TagsResource_DeleteMethod(service_, _credential_, series_id, submission_id, tag_id);
}


TagsResource_InsertMethod* KitchSinkService::TagsResource::NewInsertMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& submission_id, const Tag& __request_content__) const {
  return new TagsResource_InsertMethod(service_, _credential_, series_id, submission_id, __request_content__);
}


TagsResource_ListMethod* KitchSinkService::TagsResource::NewListMethod(googleapis_client::AuthorizationCredential* _credential_, const StringPiece& id, const StringPiece& else__) const {
  return new TagsResource_ListMethod(service_, _credential_, id, else__);
}

KitchSinkService::TopicsResource::TopicsResource(KitchSinkService* service)
  : service_(service), submissions_(service) {
}



TopicsResource_GetMethod* KitchSinkService::TopicsResource::NewGetMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& topic_id) const {
  return new TopicsResource_GetMethod(service_, _credential_, series_id, topic_id);
}


TopicsResource_InsertMethod* KitchSinkService::TopicsResource::NewInsertMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const Topic& __request_content__) const {
  return new TopicsResource_InsertMethod(service_, _credential_, series_id, __request_content__);
}


TopicsResource_ListMethod* KitchSinkService::TopicsResource::NewListMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id) const {
  return new TopicsResource_ListMethod(service_, _credential_, series_id);
}


TopicsResource_UpdateMethod* KitchSinkService::TopicsResource::NewUpdateMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& topic_id, const Topic& __request_content__) const {
  return new TopicsResource_UpdateMethod(service_, _credential_, series_id, topic_id, __request_content__);
}



KitchSinkService::TopicsResource::SubmissionsResource::SubmissionsResource(KitchSinkService* service)
  : service_(service) {
}



TopicsResource_SubmissionsResource_ListMethod* KitchSinkService::TopicsResource::SubmissionsResource::NewListMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& topic_id) const {
  return new TopicsResource_SubmissionsResource_ListMethod(service_, _credential_, series_id, topic_id);
}

KitchSinkService::VotesResource::VotesResource(KitchSinkService* service)
  : service_(service) {
}



VotesResource_GetMethod* KitchSinkService::VotesResource::NewGetMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& submission_id) const {
  return new VotesResource_GetMethod(service_, _credential_, series_id, submission_id);
}


VotesResource_InsertMethod* KitchSinkService::VotesResource::NewInsertMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& submission_id, const Vote& __request_content__) const {
  return new VotesResource_InsertMethod(service_, _credential_, series_id, submission_id, __request_content__);
}


VotesResource_ListMethod* KitchSinkService::VotesResource::NewListMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id) const {
  return new VotesResource_ListMethod(service_, _credential_, series_id);
}


VotesResource_UpdateMethod* KitchSinkService::VotesResource::NewUpdateMethod(googleapis_client::AuthorizationCredential* _credential_, const int32& series_id, const int32& submission_id, const Vote& __request_content__) const {
  return new VotesResource_UpdateMethod(service_, _credential_, series_id, submission_id, __request_content__);
}
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/kitch_sink_service.cc
=== begin: ./google/kitch_sink_api/kitch_sink_service.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.5.1
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#ifndef  GOOGLE_KITCH_SINK_API_KITCH_SINK_SERVICE_H_
#define  GOOGLE_KITCH_SINK_API_KITCH_SINK_SERVICE_H_

#include <string>
#include "apiserving/clients/cpp/service/client_service.h"
#include "apiserving/clients/cpp/service/media_uploader.h"
#include "apiserving/clients/cpp/util/status.h"
#include "apiserving/clients/cpp/util/uri_template.h"
#include "base/integral_types.h"
#include "base/macros.h"

#include "google/kitch_sink_api/profile.h"
#include "google/kitch_sink_api/series.h"
#include "google/kitch_sink_api/series_list.h"
#include "google/kitch_sink_api/submission.h"
#include "google/kitch_sink_api/submission_list.h"
#include "google/kitch_sink_api/tag.h"
#include "google/kitch_sink_api/topic.h"
#include "google/kitch_sink_api/topic2.h"
#include "google/kitch_sink_api/topic_list.h"
#include "google/kitch_sink_api/vote.h"
#include "google/kitch_sink_api/vote_list.h"


namespace google_kitch_sink_api {

/**
 * \mainpage
 *   kitch_sink Version v1
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href=''>kitch_sink</a>
 *      <tr><th>API Version<td>v1
 *      <tr><th>API Rev<td>snapshot
 *      <tr><th>API Docs
 *          <td><a href=''>
 *              </a>
 *      <tr><th>Discovery Name<td>kitch_sink
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using kitch_sink can be found at
 * <a href=''></a>.
 *
 * For more information about the Google APIs Client Library for C++, see
 * <a href='https://developers.google.com/api-client-library/cpp/start/get_started'>
 * https://developers.google.com/api-client-library/cpp/start/get_started</a>
 */
class KitchSinkService;

/**
 * Implements a common base method for all methods within the KitchSinkService.
 *
 * This class defines all the attributes common across all methods.
 * It does not pertain to any specific service API so is not normally
 * explicitly instantiated.
 */
class KitchSinkServiceBaseRequest
      : public googleapis_client::ClientServiceRequest {
 public:
  /**
   * Standard constructor.
   *
   * @param[in] service  The service instance to send to when executed.
   *        In practice this will be supplied internally by the service
   *        when it acts as a method factory.
   *
   * @param[in] credential  If not NULL then the credential to authorize with.
   *        In practice this is supplied by the user code that is creating
   *        the method instance.
   *
   * @param[in] method  The HTTP method to use for the underlying HTTP request.
   *        In practice this is specified by the particular API endpoint and
   *        supplied internally by the derived class for that endpoint.
   *
   * @param[in] uri_template  The <a href='http://tools.ietf.org/html/rfc6570'>
   *        RFC 6570 URI Template</a> specifying the url to invoke
   *        The parameters in the template should be resolvable attributes.
   *        In practice this parameter is supplied internally by the derived
   *        class for the endpoint.
   */
  KitchSinkServiceBaseRequest(
      const googleapis_client::ClientService* service,
      googleapis_client::AuthorizationCredential* credential,
      googleapis_client::HttpRequest::HttpMethod method,
      const string& uri_template);

  /**
   * Standard destructor.
   */
  virtual ~KitchSinkServiceBaseRequest();


  /**
   * Clears the '<code>alt</code>' attribute so it is no longer set.
   */
  void clear_alt() {
    _have_alt_ = false;
    googleapis_client::ClearCppValueHelper(&alt_);
  }


  /**
   * Gets the optional '<code>alt</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_alt() const { return alt_; }

  /**
   * Gets a modifiable pointer to the optional <code>alt</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_alt() {
    _have_alt_ = true;
    return &alt_;
  }


  /**
   * Sets the '<code>alt</code>' attribute.
   *
   * @param[in] value An Enum API parameter.
   */
  void set_alt(const string& value) {
    _have_alt_ = true;
    alt_ = value;
  }



  /**
   * Clears the '<code>oauth_token</code>' attribute so it is no longer set.
   */
  void clear_oauth_token() {
    _have_oauth_token_ = false;
    googleapis_client::ClearCppValueHelper(&oauth_token_);
  }


  /**
   * Gets the optional '<code>oauth_token</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_oauth_token() const { return oauth_token_; }

  /**
   * Gets a modifiable pointer to the optional <code>oauth_token</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_oauthToken() {
    _have_oauth_token_ = true;
    return &oauth_token_;
  }


  /**
   * Sets the '<code>oauth_token</code>' attribute.
   *
   * @param[in] value An _ delimited API parameter.
   */
  void set_oauth_token(const string& value) {
    _have_oauth_token_ = true;
    oauth_token_ = value;
  }



  /**
   * Clears the '<code>prettyPrint</code>' attribute so it is no longer set.
   */
  void clear_pretty_print() {
    _have_pretty_print_ = false;
    googleapis_client::ClearCppValueHelper(&pretty_print_);
  }


  /**
   * Gets the optional '<code>prettyPrint</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  bool get_pretty_print() const { return pretty_print_; }

  /**
   * Sets the '<code>prettyPrint</code>' attribute.
   *
   * @param[in] value A camelCased API parameter.
   */
  void set_pretty_print(bool value) {
    _have_pretty_print_ = true;
    pretty_print_ = value;
  }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the
   * URI supplied to the constructor.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
      const string& variable_name,
      const googleapis_client::UriTemplateConfig& config,
      string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual ::util::Status AppendOptionalQueryParameters(string* target);


 protected:
  /**
   * Prepares the method's HTTP request to send body content as JSON.
   *
   * Only to be used for method constructors.
   */
  void AddJsonContentToRequest(const googleapis_client::JsonCppData *content);

 private:
  string alt_;
  string oauth_token_;
  bool pretty_print_;
  bool _have_alt_ : 1;
  bool _have_oauth_token_ : 1;
  bool _have_pretty_print_ : 1;

  DISALLOW_COPY_AND_ASSIGN(KitchSinkServiceBaseRequest);
};






/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class FeaturedResource_SeriesResource_ListMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  FeaturedResource_SeriesResource_ListMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~FeaturedResource_SeriesResource_ListMethod();

  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      SeriesList* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  DISALLOW_COPY_AND_ASSIGN(FeaturedResource_SeriesResource_ListMethod);
};






/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class GlobalResource_SeriesResource_ListMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  GlobalResource_SeriesResource_ListMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~GlobalResource_SeriesResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      googleapis_client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value Maximum number of results to return.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>q</code>' attribute so it is no longer set.
     */
    void clear_q() {
      _have_q_ = false;
      googleapis_client::ClearCppValueHelper(&q_);
    }


    /**
     * Gets the optional '<code>q</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_q() const { return q_; }

    /**
     * Gets a modifiable pointer to the optional <code>q</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_q() {
      _have_q_ = true;
      return &q_;
    }


    /**
     * Sets the '<code>q</code>' attribute.
     *
     * @param[in] value Search query.
     */
    void set_q(const string& value) {
      _have_q_ = true;
      q_ = value;
    }



    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      googleapis_client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value Index of the first result to be retrieved.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

    /**
     * Clears the '<code>enum</code>' attribute so it is no longer set.
     */
    void clear_enum() {
      _have_enum_ = false;
      googleapis_client::ClearCppValueHelper(&enum_);
    }


    /**
     * Gets the optional '<code>enum</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const googleapis_client::JsonCppData& get_enum() const { return enum_; }

    /**
     * Gets a modifiable pointer to the optional <code>enum</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    googleapis_client::JsonCppData* mutable_enum() {
      _have_enum_ = true;
      return &enum_;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual ::util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      SeriesList* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 max_results_;
  string q_;
  int32 start_index_;
  googleapis_client::JsonCppCapsule< googleapis_client::JsonCppData > enum_;
  bool _have_max_results_ : 1;
  bool _have_q_ : 1;
  bool _have_start_index_ : 1;
  bool _have_enum_ : 1;
  DISALLOW_COPY_AND_ASSIGN(GlobalResource_SeriesResource_ListMethod);
};






/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class MyResource_SeriesResource_ListMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  MyResource_SeriesResource_ListMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~MyResource_SeriesResource_ListMethod();

  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      SeriesList* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  DISALLOW_COPY_AND_ASSIGN(MyResource_SeriesResource_ListMethod);
};






/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class MyrecentResource_PrivateResource_ListMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  MyrecentResource_PrivateResource_ListMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~MyrecentResource_PrivateResource_ListMethod();

  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      SeriesList* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  DISALLOW_COPY_AND_ASSIGN(MyrecentResource_PrivateResource_ListMethod);
};



/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class ProfilesResource_GetMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  ProfilesResource_GetMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~ProfilesResource_GetMethod();

  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      Profile* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  DISALLOW_COPY_AND_ASSIGN(ProfilesResource_GetMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class ProfilesResource_UpdateMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] _content_ The data object to update.
   */
  ProfilesResource_UpdateMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const Profile& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProfilesResource_UpdateMethod();

  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      Profile* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProfilesResource_UpdateMethod);
};



/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class ResponsesResource_InsertMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   *
   * @deprecated in favor constructor that includes the media upload parameters.
   *
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   *
   * @param[in] topic_id The decimal ID of the Topic within the Series.
   *
   * @param[in] parent_submission_id The decimal ID of the parent Submission
   * within the Series.
   *
   * @param[in] _content_ The data object to insert.
   */
  ResponsesResource_InsertMethod(
        const KitchSinkService* _service_,
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id,
        const int32& topic_id,
        const int32& parent_submission_id);
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   * @param[in] topic_id The decimal ID of the Topic within the Series.
   * @param[in] parent_submission_id The decimal ID of the parent Submission
   * within the Series.
   * @param[in] _metadata_ The metadata object to insert. If this
   *            is NULL then do not upload any metadata.
   * @param[in] _media_content_type_ The content type of the data in the
   *            _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to insert. If
   *            this is NULL then do not upload any media and ignore
   *            _media_content_type_.
   */
  ResponsesResource_InsertMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id,
      const int32& topic_id,
      const int32& parent_submission_id,
      const Submission* _metadata_,
      const char* _media_content_type_,
      googleapis_client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~ResponsesResource_InsertMethod();


    /**
     * Clears the '<code>anonymous</code>' attribute so it is no longer set.
     */
    void clear_anonymous() {
      _have_anonymous_ = false;
      googleapis_client::ClearCppValueHelper(&anonymous_);
    }


    /**
     * Gets the optional '<code>anonymous</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_anonymous() const { return anonymous_; }

    /**
     * Sets the '<code>anonymous</code>' attribute.
     *
     * @param[in] value Set to true to mark the new submission as anonymous.
     */
    void set_anonymous(bool value) {
      _have_anonymous_ = true;
      anonymous_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual ::util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      Submission* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }


  /**
   * Returns MediaUploader for uploading the content.
   */

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const googleapis_client::MediaUploadSpec SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const googleapis_client::MediaUploadSpec RESUMABLE_MEDIA_UPLOAD;

 private:
  int32 series_id_;
  int32 topic_id_;
  int32 parent_submission_id_;
  bool anonymous_;
  bool _have_anonymous_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ResponsesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class ResponsesResource_ListMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   * @param[in] submission_id The decimal ID of the Submission within the
   * Series.
   */
  ResponsesResource_ListMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id,
      const int32& submission_id);

  /**
   * Standard destructor.
   */
  virtual ~ResponsesResource_ListMethod();


    /**
     * Clears the '<code>author</code>' attribute so it is no longer set.
     */
    void clear_author() {
      _have_author_ = false;
      googleapis_client::ClearCppValueHelper(&author_);
    }


    /**
     * Gets the optional '<code>author</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_author() const { return author_; }

    /**
     * Gets a modifiable pointer to the optional <code>author</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_author() {
      _have_author_ = true;
      return &author_;
    }


    /**
     * Sets the '<code>author</code>' attribute.
     *
     * @param[in] value Restricts the results to submissions by a specific
     * author.
     */
    void set_author(const string& value) {
      _have_author_ = true;
      author_ = value;
    }



    /**
     * Clears the '<code>hasAttachedVideo</code>' attribute so it is no longer
     * set.
     */
    void clear_has_attached_video() {
      _have_has_attached_video_ = false;
      googleapis_client::ClearCppValueHelper(&has_attached_video_);
    }


    /**
     * Gets the optional '<code>hasAttachedVideo</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_has_attached_video() const { return has_attached_video_; }

    /**
     * Sets the '<code>hasAttachedVideo</code>' attribute.
     *
     * @param[in] value Specifies whether to restrict to submissions that have
     * videos attached.
     */
    void set_has_attached_video(bool value) {
      _have_has_attached_video_ = true;
      has_attached_video_ = value;
    }

    /**
     * Clears the '<code>q</code>' attribute so it is no longer set.
     */
    void clear_q() {
      _have_q_ = false;
      googleapis_client::ClearCppValueHelper(&q_);
    }


    /**
     * Gets the optional '<code>q</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_q() const { return q_; }

    /**
     * Gets a modifiable pointer to the optional <code>q</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_q() {
      _have_q_ = true;
      return &q_;
    }


    /**
     * Sets the '<code>q</code>' attribute.
     *
     * @param[in] value Search query.
     */
    void set_q(const string& value) {
      _have_q_ = true;
      q_ = value;
    }



    /**
     * Clears the '<code>sort</code>' attribute so it is no longer set.
     */
    void clear_sort() {
      _have_sort_ = false;
      googleapis_client::ClearCppValueHelper(&sort_);
    }


    /**
     * Gets the optional '<code>sort</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_sort() const { return sort_; }

    /**
     * Gets a modifiable pointer to the optional <code>sort</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_sort() {
      _have_sort_ = true;
      return &sort_;
    }


    /**
     * Sets the '<code>sort</code>' attribute.
     *
     * @param[in] value Sort order.
     */
    void set_sort(const string& value) {
      _have_sort_ = true;
      sort_ = value;
    }



    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      googleapis_client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value Index of the first result to be retrieved.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual ::util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      SubmissionList* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;
  int32 submission_id_;
  string author_;
  bool has_attached_video_;
  string q_;
  string sort_;
  int32 start_index_;
  bool _have_author_ : 1;
  bool _have_has_attached_video_ : 1;
  bool _have_q_ : 1;
  bool _have_sort_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ResponsesResource_ListMethod);
};



/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class SeriesResource_GetMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   */
  SeriesResource_GetMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id);

  /**
   * Standard destructor.
   */
  virtual ~SeriesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      Series* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;
  DISALLOW_COPY_AND_ASSIGN(SeriesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class SeriesResource_InsertMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] _media_content_type_ The content type of the data in the
   *            _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to insert. If
   *            this is NULL then do not upload any media and ignore
   *            _media_content_type_.
   */
  SeriesResource_InsertMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const char* _media_content_type_,
      googleapis_client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~SeriesResource_InsertMethod();

  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      Series* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }


  /**
   * Returns MediaUploader for uploading the content.
   */

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const googleapis_client::MediaUploadSpec SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const googleapis_client::MediaUploadSpec RESUMABLE_MEDIA_UPLOAD;

 private:
  DISALLOW_COPY_AND_ASSIGN(SeriesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class SeriesResource_ListMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  SeriesResource_ListMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~SeriesResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      googleapis_client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value Maximum number of results to return.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>q</code>' attribute so it is no longer set.
     */
    void clear_q() {
      _have_q_ = false;
      googleapis_client::ClearCppValueHelper(&q_);
    }


    /**
     * Gets the optional '<code>q</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_q() const { return q_; }

    /**
     * Gets a modifiable pointer to the optional <code>q</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_q() {
      _have_q_ = true;
      return &q_;
    }


    /**
     * Sets the '<code>q</code>' attribute.
     *
     * @param[in] value Search query.
     */
    void set_q(const string& value) {
      _have_q_ = true;
      q_ = value;
    }



    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      googleapis_client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value Index of the first result to be retrieved.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual ::util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      SeriesList* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 max_results_;
  string q_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_q_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(SeriesResource_ListMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class SeriesResource_UpdateMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   * @param[in] _content_ The data object to update.
   */
  SeriesResource_UpdateMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id,
      const Series& _content_);

  /**
   * Standard destructor.
   */
  virtual ~SeriesResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      Series* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(SeriesResource_UpdateMethod);
};




/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class SeriesResource_ResponsesResource_ListMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   * @param[in] q Search query - a required query parameter.
   */
  SeriesResource_ResponsesResource_ListMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id,
      const StringPiece& q);

  /**
   * Standard destructor.
   */
  virtual ~SeriesResource_ResponsesResource_ListMethod();


    /**
     * Clears the '<code>author</code>' attribute so it is no longer set.
     */
    void clear_author() {
      _have_author_ = false;
      googleapis_client::ClearCppValueHelper(&author_);
    }


    /**
     * Gets the optional '<code>author</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_author() const { return author_; }

    /**
     * Gets a modifiable pointer to the optional <code>author</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_author() {
      _have_author_ = true;
      return &author_;
    }


    /**
     * Sets the '<code>author</code>' attribute.
     *
     * @param[in] value Restricts the results to submissions by a specific
     * author.
     */
    void set_author(const string& value) {
      _have_author_ = true;
      author_ = value;
    }



    /**
     * Clears the '<code>hasAttachedVideo</code>' attribute so it is no longer
     * set.
     */
    void clear_has_attached_video() {
      _have_has_attached_video_ = false;
      googleapis_client::ClearCppValueHelper(&has_attached_video_);
    }


    /**
     * Gets the optional '<code>hasAttachedVideo</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_has_attached_video() const { return has_attached_video_; }

    /**
     * Sets the '<code>hasAttachedVideo</code>' attribute.
     *
     * @param[in] value Specifies whether to restrict to submissions that have
     * videos attached.
     */
    void set_has_attached_video(bool value) {
      _have_has_attached_video_ = true;
      has_attached_video_ = value;
    }

    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      googleapis_client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value Maximum number of results to return.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>sort</code>' attribute so it is no longer set.
     */
    void clear_sort() {
      _have_sort_ = false;
      googleapis_client::ClearCppValueHelper(&sort_);
    }


    /**
     * Gets the optional '<code>sort</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_sort() const { return sort_; }

    /**
     * Gets a modifiable pointer to the optional <code>sort</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_sort() {
      _have_sort_ = true;
      return &sort_;
    }


    /**
     * Sets the '<code>sort</code>' attribute.
     *
     * @param[in] value Sort order.
     */
    void set_sort(const string& value) {
      _have_sort_ = true;
      sort_ = value;
    }



    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      googleapis_client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value Index of the first result to be retrieved.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual ::util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      SeriesList* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;
  string author_;
  bool has_attached_video_;
  int32 max_results_;
  string q_;
  string sort_;
  int32 start_index_;
  bool _have_author_ : 1;
  bool _have_has_attached_video_ : 1;
  bool _have_max_results_ : 1;
  bool _have_sort_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(SeriesResource_ResponsesResource_ListMethod);
};


/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class SeriesResource_SubmissionsResource_ListMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   */
  SeriesResource_SubmissionsResource_ListMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id);

  /**
   * Standard destructor.
   */
  virtual ~SeriesResource_SubmissionsResource_ListMethod();


    /**
     * Clears the '<code>author</code>' attribute so it is no longer set.
     */
    void clear_author() {
      _have_author_ = false;
      googleapis_client::ClearCppValueHelper(&author_);
    }


    /**
     * Gets the optional '<code>author</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_author() const { return author_; }

    /**
     * Gets a modifiable pointer to the optional <code>author</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_author() {
      _have_author_ = true;
      return &author_;
    }


    /**
     * Sets the '<code>author</code>' attribute.
     *
     * @param[in] value Restricts the results to submissions by a specific
     * author.
     */
    void set_author(const string& value) {
      _have_author_ = true;
      author_ = value;
    }



    /**
     * Clears the '<code>hasAttachedVideo</code>' attribute so it is no longer
     * set.
     */
    void clear_has_attached_video() {
      _have_has_attached_video_ = false;
      googleapis_client::ClearCppValueHelper(&has_attached_video_);
    }


    /**
     * Gets the optional '<code>hasAttachedVideo</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_has_attached_video() const { return has_attached_video_; }

    /**
     * Sets the '<code>hasAttachedVideo</code>' attribute.
     *
     * @param[in] value Specifies whether to restrict to submissions that have
     * videos attached.
     */
    void set_has_attached_video(bool value) {
      _have_has_attached_video_ = true;
      has_attached_video_ = value;
    }

    /**
     * Clears the '<code>lang</code>' attribute so it is no longer set.
     */
    void clear_lang() {
      _have_lang_ = false;
      googleapis_client::ClearCppValueHelper(&lang_);
    }


    /**
     * Gets the optional '<code>lang</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_lang() const { return lang_; }

    /**
     * Gets a modifiable pointer to the optional <code>lang</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_lang() {
      _have_lang_ = true;
      return &lang_;
    }


    /**
     * Sets the '<code>lang</code>' attribute.
     *
     * @param[in] value The language code for the language the client prefers
     * resuls in.
     */
    void set_lang(const string& value) {
      _have_lang_ = true;
      lang_ = value;
    }



    /**
     * Clears the '<code>q</code>' attribute so it is no longer set.
     */
    void clear_q() {
      _have_q_ = false;
      googleapis_client::ClearCppValueHelper(&q_);
    }


    /**
     * Gets the optional '<code>q</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_q() const { return q_; }

    /**
     * Gets a modifiable pointer to the optional <code>q</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_q() {
      _have_q_ = true;
      return &q_;
    }


    /**
     * Sets the '<code>q</code>' attribute.
     *
     * @param[in] value Search query.
     */
    void set_q(const string& value) {
      _have_q_ = true;
      q_ = value;
    }



    /**
     * Clears the '<code>sort</code>' attribute so it is no longer set.
     */
    void clear_sort() {
      _have_sort_ = false;
      googleapis_client::ClearCppValueHelper(&sort_);
    }


    /**
     * Gets the optional '<code>sort</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_sort() const { return sort_; }

    /**
     * Gets a modifiable pointer to the optional <code>sort</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_sort() {
      _have_sort_ = true;
      return &sort_;
    }


    /**
     * Sets the '<code>sort</code>' attribute.
     *
     * @param[in] value Sort order.
     */
    void set_sort(const string& value) {
      _have_sort_ = true;
      sort_ = value;
    }



    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      googleapis_client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value Index of the first result to be retrieved.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual ::util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      SubmissionList* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;
  string author_;
  bool has_attached_video_;
  string lang_;
  string q_;
  string sort_;
  int32 start_index_;
  bool _have_author_ : 1;
  bool _have_has_attached_video_ : 1;
  bool _have_lang_ : 1;
  bool _have_q_ : 1;
  bool _have_sort_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(SeriesResource_SubmissionsResource_ListMethod);
};



/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class SubmissionsResource_GetMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   * @param[in] submission_id The decimal ID of the Submission within the
   * Series.
   */
  SubmissionsResource_GetMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id,
      const int32& submission_id);

  /**
   * Standard destructor.
   */
  virtual ~SubmissionsResource_GetMethod();


    /**
     * Clears the '<code>lang</code>' attribute so it is no longer set.
     */
    void clear_lang() {
      _have_lang_ = false;
      googleapis_client::ClearCppValueHelper(&lang_);
    }


    /**
     * Gets the optional '<code>lang</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_lang() const { return lang_; }

    /**
     * Gets a modifiable pointer to the optional <code>lang</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_lang() {
      _have_lang_ = true;
      return &lang_;
    }


    /**
     * Sets the '<code>lang</code>' attribute.
     *
     * @param[in] value The language code for the language the client prefers
     * resuls in.
     */
    void set_lang(const string& value) {
      _have_lang_ = true;
      lang_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual ::util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      Submission* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;
  int32 submission_id_;
  string lang_;
  bool _have_lang_ : 1;
  DISALLOW_COPY_AND_ASSIGN(SubmissionsResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class SubmissionsResource_InsertMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   * @param[in] topic_id The decimal ID of the Topic within the Series.
   * @param[in] _content_ The data object to insert.
   */
  SubmissionsResource_InsertMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id,
      const int32& topic_id,
      const Submission& _content_);

  /**
   * Standard destructor.
   */
  virtual ~SubmissionsResource_InsertMethod();


    /**
     * Clears the '<code>anonymous</code>' attribute so it is no longer set.
     */
    void clear_anonymous() {
      _have_anonymous_ = false;
      googleapis_client::ClearCppValueHelper(&anonymous_);
    }


    /**
     * Gets the optional '<code>anonymous</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_anonymous() const { return anonymous_; }

    /**
     * Sets the '<code>anonymous</code>' attribute.
     *
     * @param[in] value Set to true to mark the new submission as anonymous.
     */
    void set_anonymous(bool value) {
      _have_anonymous_ = true;
      anonymous_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual ::util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      Submission* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;
  int32 topic_id_;
  bool anonymous_;
  bool _have_anonymous_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(SubmissionsResource_InsertMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class TagsResource_DeleteMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   * @param[in] submission_id The decimal ID of the Submission within the
   * Series.
   * @param[in] tag_id
   */
  TagsResource_DeleteMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id,
      const int32& submission_id,
      const StringPiece& tag_id);

  /**
   * Standard destructor.
   */
  virtual ~TagsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);


 private:
  int32 series_id_;
  int32 submission_id_;
  string tag_id_;
  DISALLOW_COPY_AND_ASSIGN(TagsResource_DeleteMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class TagsResource_InsertMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   * @param[in] submission_id The decimal ID of the Submission within the
   * Series.
   * @param[in] _content_ The data object to insert.
   */
  TagsResource_InsertMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id,
      const int32& submission_id,
      const Tag& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TagsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      Tag* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;
  int32 submission_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TagsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class TagsResource_ListMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] id id is a reserved word in Objective-C.
   * @param[in] else__ A parameter name 'else'.
   */
  TagsResource_ListMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const StringPiece& id,
      const StringPiece& else__);

  /**
   * Standard destructor.
   */
  virtual ~TagsResource_ListMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      TagList* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string id_;
  string else_;
  DISALLOW_COPY_AND_ASSIGN(TagsResource_ListMethod);
};



/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class TopicsResource_GetMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   * @param[in] topic_id The decimal ID of the Topic within the Series.
   */
  TopicsResource_GetMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id,
      const int32& topic_id);

  /**
   * Standard destructor.
   */
  virtual ~TopicsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      Topic2* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;
  int32 topic_id_;
  DISALLOW_COPY_AND_ASSIGN(TopicsResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class TopicsResource_InsertMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   * @param[in] _content_ The data object to insert.
   */
  TopicsResource_InsertMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id,
      const Topic& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TopicsResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      Topic* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TopicsResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class TopicsResource_ListMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   */
  TopicsResource_ListMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id);

  /**
   * Standard destructor.
   */
  virtual ~TopicsResource_ListMethod();


    /**
     * Clears the '<code>max-results</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      googleapis_client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>max-results</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>max-results</code>' attribute.
     *
     * @param[in] value Maximum number of results to return.
     */
    void set_max_results(int32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>mode</code>' attribute so it is no longer set.
     */
    void clear_mode() {
      _have_mode_ = false;
      googleapis_client::ClearCppValueHelper(&mode_);
    }


    /**
     * Gets the optional '<code>mode</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_mode() const { return mode_; }

    /**
     * Gets a modifiable pointer to the optional <code>mode</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_mode() {
      _have_mode_ = true;
      return &mode_;
    }


    /**
     * Sets the '<code>mode</code>' attribute.
     *
     * @param[in] value
     */
    void set_mode(const string& value) {
      _have_mode_ = true;
      mode_ = value;
    }



    /**
     * Clears the '<code>q</code>' attribute so it is no longer set.
     */
    void clear_q() {
      _have_q_ = false;
      googleapis_client::ClearCppValueHelper(&q_);
    }


    /**
     * Gets the optional '<code>q</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_q() const { return q_; }

    /**
     * Gets a modifiable pointer to the optional <code>q</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_q() {
      _have_q_ = true;
      return &q_;
    }


    /**
     * Sets the '<code>q</code>' attribute.
     *
     * @param[in] value Search query.
     */
    void set_q(const string& value) {
      _have_q_ = true;
      q_ = value;
    }



    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      googleapis_client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value Index of the first result to be retrieved.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual ::util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      TopicList* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;
  int32 max_results_;
  string mode_;
  string q_;
  int32 start_index_;
  bool _have_max_results_ : 1;
  bool _have_mode_ : 1;
  bool _have_q_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(TopicsResource_ListMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class TopicsResource_UpdateMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   * @param[in] topic_id The decimal ID of the Topic within the Series.
   * @param[in] _content_ The data object to update.
   */
  TopicsResource_UpdateMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id,
      const int32& topic_id,
      const Topic& _content_);

  /**
   * Standard destructor.
   */
  virtual ~TopicsResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      Topic* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;
  int32 topic_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(TopicsResource_UpdateMethod);
};




/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class TopicsResource_SubmissionsResource_ListMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   * @param[in] topic_id The decimal ID of the Topic within the Series.
   */
  TopicsResource_SubmissionsResource_ListMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id,
      const int32& topic_id);

  /**
   * Standard destructor.
   */
  virtual ~TopicsResource_SubmissionsResource_ListMethod();


    /**
     * Clears the '<code>author</code>' attribute so it is no longer set.
     */
    void clear_author() {
      _have_author_ = false;
      googleapis_client::ClearCppValueHelper(&author_);
    }


    /**
     * Gets the optional '<code>author</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_author() const { return author_; }

    /**
     * Gets a modifiable pointer to the optional <code>author</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_author() {
      _have_author_ = true;
      return &author_;
    }


    /**
     * Sets the '<code>author</code>' attribute.
     *
     * @param[in] value Restricts the results to submissions by a specific
     * author.
     */
    void set_author(const string& value) {
      _have_author_ = true;
      author_ = value;
    }



    /**
     * Clears the '<code>hasAttachedVideo</code>' attribute so it is no longer
     * set.
     */
    void clear_has_attached_video() {
      _have_has_attached_video_ = false;
      googleapis_client::ClearCppValueHelper(&has_attached_video_);
    }


    /**
     * Gets the optional '<code>hasAttachedVideo</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_has_attached_video() const { return has_attached_video_; }

    /**
     * Sets the '<code>hasAttachedVideo</code>' attribute.
     *
     * @param[in] value Specifies whether to restrict to submissions that have
     * videos attached.
     */
    void set_has_attached_video(bool value) {
      _have_has_attached_video_ = true;
      has_attached_video_ = value;
    }

    /**
     * Clears the '<code>q</code>' attribute so it is no longer set.
     */
    void clear_q() {
      _have_q_ = false;
      googleapis_client::ClearCppValueHelper(&q_);
    }


    /**
     * Gets the optional '<code>q</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_q() const { return q_; }

    /**
     * Gets a modifiable pointer to the optional <code>q</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_q() {
      _have_q_ = true;
      return &q_;
    }


    /**
     * Sets the '<code>q</code>' attribute.
     *
     * @param[in] value Search query.
     */
    void set_q(const string& value) {
      _have_q_ = true;
      q_ = value;
    }



    /**
     * Clears the '<code>sort</code>' attribute so it is no longer set.
     */
    void clear_sort() {
      _have_sort_ = false;
      googleapis_client::ClearCppValueHelper(&sort_);
    }


    /**
     * Gets the optional '<code>sort</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_sort() const { return sort_; }

    /**
     * Gets a modifiable pointer to the optional <code>sort</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_sort() {
      _have_sort_ = true;
      return &sort_;
    }


    /**
     * Sets the '<code>sort</code>' attribute.
     *
     * @param[in] value Sort order.
     */
    void set_sort(const string& value) {
      _have_sort_ = true;
      sort_ = value;
    }



    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      googleapis_client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value Index of the first result to be retrieved.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual ::util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      SubmissionList* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;
  int32 topic_id_;
  string author_;
  bool has_attached_video_;
  string q_;
  string sort_;
  int32 start_index_;
  bool _have_author_ : 1;
  bool _have_has_attached_video_ : 1;
  bool _have_q_ : 1;
  bool _have_sort_ : 1;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(TopicsResource_SubmissionsResource_ListMethod);
};



/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class VotesResource_GetMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   * @param[in] submission_id The decimal ID of the Submission within the
   * Series.
   */
  VotesResource_GetMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id,
      const int32& submission_id);

  /**
   * Standard destructor.
   */
  virtual ~VotesResource_GetMethod();


    /**
     * Clears the '<code>userId</code>' attribute so it is no longer set.
     */
    void clear_user_id() {
      _have_user_id_ = false;
      googleapis_client::ClearCppValueHelper(&user_id_);
    }


    /**
     * Gets the optional '<code>userId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_user_id() const { return user_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>userId</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_userId() {
      _have_user_id_ = true;
      return &user_id_;
    }


    /**
     * Sets the '<code>userId</code>' attribute.
     *
     * @param[in] value
     */
    void set_user_id(const string& value) {
      _have_user_id_ = true;
      user_id_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual ::util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      Vote* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;
  int32 submission_id_;
  string user_id_;
  bool _have_user_id_ : 1;
  DISALLOW_COPY_AND_ASSIGN(VotesResource_GetMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class VotesResource_InsertMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   * @param[in] submission_id The decimal ID of the Submission within the
   * Series.
   * @param[in] _content_ The data object to insert.
   */
  VotesResource_InsertMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id,
      const int32& submission_id,
      const Vote& _content_);

  /**
   * Standard destructor.
   */
  virtual ~VotesResource_InsertMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      Vote* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;
  int32 submission_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(VotesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class VotesResource_ListMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   */
  VotesResource_ListMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id);

  /**
   * Standard destructor.
   */
  virtual ~VotesResource_ListMethod();


    /**
     * Clears the '<code>start-index</code>' attribute so it is no longer set.
     */
    void clear_start_index() {
      _have_start_index_ = false;
      googleapis_client::ClearCppValueHelper(&start_index_);
    }


    /**
     * Gets the optional '<code>start-index</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_start_index() const { return start_index_; }

    /**
     * Sets the '<code>start-index</code>' attribute.
     *
     * @param[in] value Index of the first result to be retrieved.
     */
    void set_start_index(int32 value) {
      _have_start_index_ = true;
      start_index_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual ::util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      VoteList* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;
  int32 start_index_;
  bool _have_start_index_ : 1;
  DISALLOW_COPY_AND_ASSIGN(VotesResource_ListMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * No authorization scopes are required for this method.
 */
class VotesResource_UpdateMethod : public KitchSinkServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] series_id The decimal ID of the Series.
   * @param[in] submission_id The decimal ID of the Submission within the
   * Series.
   * @param[in] _content_ The data object to update.
   */
  VotesResource_UpdateMethod(
      const KitchSinkService* _service_,
      googleapis_client::AuthorizationCredential* _credential_,
      const int32& series_id,
      const int32& submission_id,
      const Vote& _content_);

  /**
   * Standard destructor.
   */
  virtual ~VotesResource_UpdateMethod();


    /**
     * Clears the '<code>userId</code>' attribute so it is no longer set.
     */
    void clear_user_id() {
      _have_user_id_ = false;
      googleapis_client::ClearCppValueHelper(&user_id_);
    }


    /**
     * Gets the optional '<code>userId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_user_id() const { return user_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>userId</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_userId() {
      _have_user_id_ = true;
      return &user_id_;
    }


    /**
     * Sets the '<code>userId</code>' attribute.
     *
     * @param[in] value
     */
    void set_user_id(const string& value) {
      _have_user_id_ = true;
      user_id_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual ::util::Status AppendVariable(
        const string& variable_name,
        const googleapis_client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual ::util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  ::util::Status ExecuteAndParseResponse(
      Vote* data) {
    return KitchSinkServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 series_id_;
  int32 submission_id_;
  string user_id_;
  bool _have_user_id_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(VotesResource_UpdateMethod);
};



/**
 * Service definition for KitchSinkService (v1).
 *
 * @ingroup ServiceClass
 *
 * For more information about this service, see the API Documentation at
 * <a href=''>'</a>
 */
class KitchSinkService : public googleapis_client::ClientService {
 public:
  /**
   * The name of the API that this was generated from.
   */
  static const char googleapis_API_NAME[];

  /**
   * The version of the API that this interface was generated from.
   */
  static const char googleapis_API_VERSION[];

  /**
   * The code generator used to generate this API.
   */
  static const char googleapis_API_GENERATOR[];


  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class FeaturedResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit FeaturedResource(KitchSinkService* service);

    /**
     * Standard destructor.
     */
    ~FeaturedResource() {}

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class SeriesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit SeriesResource(KitchSinkService* service);

      /**
       * Standard destructor.
       */
      ~SeriesResource() {}


      /**
       * Creates a new FeaturedResource_SeriesResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      FeaturedResource_SeriesResource_ListMethod* NewListMethod(
          googleapis_client::AuthorizationCredential* _credential_) const;

     private:
      KitchSinkService* service_;

      DISALLOW_COPY_AND_ASSIGN(SeriesResource);
    };
    /**
     * Gets the series resource method factory.
     *
     * @return SeriesResource for creating methods.
     */
    const SeriesResource& get_series() const {
      return series_;
    }



   private:
    KitchSinkService* service_;
    SeriesResource series_;

    DISALLOW_COPY_AND_ASSIGN(FeaturedResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class GlobalResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit GlobalResource(KitchSinkService* service);

    /**
     * Standard destructor.
     */
    ~GlobalResource() {}

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class SeriesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit SeriesResource(KitchSinkService* service);

      /**
       * Standard destructor.
       */
      ~SeriesResource() {}


      /**
       * Creates a new GlobalResource_SeriesResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      GlobalResource_SeriesResource_ListMethod* NewListMethod(
          googleapis_client::AuthorizationCredential* _credential_) const;

     private:
      KitchSinkService* service_;

      DISALLOW_COPY_AND_ASSIGN(SeriesResource);
    };
    /**
     * Gets the series resource method factory.
     *
     * @return SeriesResource for creating methods.
     */
    const SeriesResource& get_series() const {
      return series_;
    }



   private:
    KitchSinkService* service_;
    SeriesResource series_;

    DISALLOW_COPY_AND_ASSIGN(GlobalResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class MyResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit MyResource(KitchSinkService* service);

    /**
     * Standard destructor.
     */
    ~MyResource() {}

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class SeriesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit SeriesResource(KitchSinkService* service);

      /**
       * Standard destructor.
       */
      ~SeriesResource() {}


      /**
       * Creates a new MyResource_SeriesResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      MyResource_SeriesResource_ListMethod* NewListMethod(
          googleapis_client::AuthorizationCredential* _credential_) const;

     private:
      KitchSinkService* service_;

      DISALLOW_COPY_AND_ASSIGN(SeriesResource);
    };
    /**
     * Gets the series resource method factory.
     *
     * @return SeriesResource for creating methods.
     */
    const SeriesResource& get_series() const {
      return series_;
    }



   private:
    KitchSinkService* service_;
    SeriesResource series_;

    DISALLOW_COPY_AND_ASSIGN(MyResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class MyrecentResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit MyrecentResource(KitchSinkService* service);

    /**
     * Standard destructor.
     */
    ~MyrecentResource() {}

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class PrivateResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit PrivateResource(KitchSinkService* service);

      /**
       * Standard destructor.
       */
      ~PrivateResource() {}


      /**
       * Creates a new MyrecentResource_PrivateResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      MyrecentResource_PrivateResource_ListMethod* NewListMethod(
          googleapis_client::AuthorizationCredential* _credential_) const;

     private:
      KitchSinkService* service_;

      DISALLOW_COPY_AND_ASSIGN(PrivateResource);
    };
    /**
     * Gets the private resource method factory.
     *
     * @return PrivateResource for creating methods.
     */
    const PrivateResource& get_private() const {
      return private_;
    }



   private:
    KitchSinkService* service_;
    PrivateResource private_;

    DISALLOW_COPY_AND_ASSIGN(MyrecentResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class ProfilesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit ProfilesResource(KitchSinkService* service);

    /**
     * Standard destructor.
     */
    ~ProfilesResource() {}


    /**
     * Creates a new ProfilesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ProfilesResource_GetMethod* NewGetMethod(
        googleapis_client::AuthorizationCredential* _credential_) const;

    /**
     * Creates a new ProfilesResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ProfilesResource_UpdateMethod* NewUpdateMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const Profile& _content_) const;

   private:
    KitchSinkService* service_;

    DISALLOW_COPY_AND_ASSIGN(ProfilesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class ResponsesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit ResponsesResource(KitchSinkService* service);

    /**
     * Standard destructor.
     */
    ~ResponsesResource() {}



    /**
     * Creates a new ResponsesResource_InsertMethod instance.
     * @deprecated
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @param[in] topic_id The decimal ID of the Topic within the Series.
     * @param[in] parent_submission_id The decimal ID of the parent Submission
     * within the Series.
     *
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ResponsesResource_InsertMethod* NewInsertMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id,
        const int32& topic_id,
        const int32& parent_submission_id) const;

    /**
     * Creates a new ResponsesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @param[in] topic_id The decimal ID of the Topic within the Series.
     * @param[in] parent_submission_id The decimal ID of the parent Submission
     * within the Series.
     * @param[in] _metadata_ The metadata object to insert. If this is NULL then
     * do not upload any metadata.
     * @param[in] _media_content_type_ The content type of the data in the
     * _media_content_reader_.
     * @param[in] _media_content_reader_ The media content to insert. If
     * this is NULL then do not upload any media and ignore
     * _media_content_type_.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ResponsesResource_InsertMethod* NewInsertMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id,
        const int32& topic_id,
        const int32& parent_submission_id,
        const Submission* _metadata_,
        const char* _media_content_type_,
        googleapis_client::DataReader* _media_content_reader_) const;

    /**
     * Creates a new ResponsesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @param[in] submission_id The decimal ID of the Submission within the
     * Series.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ResponsesResource_ListMethod* NewListMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id,
        const int32& submission_id) const;

   private:
    KitchSinkService* service_;

    DISALLOW_COPY_AND_ASSIGN(ResponsesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class SeriesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit SeriesResource(KitchSinkService* service);

    /**
     * Standard destructor.
     */
    ~SeriesResource() {}

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ResponsesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit ResponsesResource(KitchSinkService* service);

      /**
       * Standard destructor.
       */
      ~ResponsesResource() {}


      /**
       * Creates a new SeriesResource_ResponsesResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] series_id The decimal ID of the Series.
       * @param[in] q Search query - a required query parameter.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      SeriesResource_ResponsesResource_ListMethod* NewListMethod(
          googleapis_client::AuthorizationCredential* _credential_,
          const int32& series_id,
          const StringPiece& q) const;

     private:
      KitchSinkService* service_;

      DISALLOW_COPY_AND_ASSIGN(ResponsesResource);
    };
    /**
     * Gets the responses resource method factory.
     *
     * @return ResponsesResource for creating methods.
     */
    const ResponsesResource& get_responses() const {
      return responses_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class SubmissionsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit SubmissionsResource(KitchSinkService* service);

      /**
       * Standard destructor.
       */
      ~SubmissionsResource() {}


      /**
       * Creates a new SeriesResource_SubmissionsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] series_id The decimal ID of the Series.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      SeriesResource_SubmissionsResource_ListMethod* NewListMethod(
          googleapis_client::AuthorizationCredential* _credential_,
          const int32& series_id) const;

     private:
      KitchSinkService* service_;

      DISALLOW_COPY_AND_ASSIGN(SubmissionsResource);
    };
    /**
     * Gets the submissions resource method factory.
     *
     * @return SubmissionsResource for creating methods.
     */
    const SubmissionsResource& get_submissions() const {
      return submissions_;
    }



    /**
     * Creates a new SeriesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SeriesResource_GetMethod* NewGetMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id) const;

    /**
     * Creates a new SeriesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] _media_content_type_ The content type of the data in the
     * _media_content_reader_.
     * @param[in] _media_content_reader_ The media content to insert. If
     * this is NULL then do not upload any media and ignore
     * _media_content_type_.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SeriesResource_InsertMethod* NewInsertMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const char* _media_content_type_,
        googleapis_client::DataReader* _media_content_reader_) const;

    /**
     * Creates a new SeriesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SeriesResource_ListMethod* NewListMethod(
        googleapis_client::AuthorizationCredential* _credential_) const;

    /**
     * Creates a new SeriesResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SeriesResource_UpdateMethod* NewUpdateMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id,
        const Series& _content_) const;

   private:
    KitchSinkService* service_;
    ResponsesResource responses_;
    SubmissionsResource submissions_;

    DISALLOW_COPY_AND_ASSIGN(SeriesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class SubmissionsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit SubmissionsResource(KitchSinkService* service);

    /**
     * Standard destructor.
     */
    ~SubmissionsResource() {}


    /**
     * Creates a new SubmissionsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @param[in] submission_id The decimal ID of the Submission within the
     * Series.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SubmissionsResource_GetMethod* NewGetMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id,
        const int32& submission_id) const;

    /**
     * Creates a new SubmissionsResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @param[in] topic_id The decimal ID of the Topic within the Series.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    SubmissionsResource_InsertMethod* NewInsertMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id,
        const int32& topic_id,
        const Submission& _content_) const;

   private:
    KitchSinkService* service_;

    DISALLOW_COPY_AND_ASSIGN(SubmissionsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class TagsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit TagsResource(KitchSinkService* service);

    /**
     * Standard destructor.
     */
    ~TagsResource() {}


    /**
     * Creates a new TagsResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @param[in] submission_id The decimal ID of the Submission within the
     * Series.
     * @param[in] tag_id
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TagsResource_DeleteMethod* NewDeleteMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id,
        const int32& submission_id,
        const StringPiece& tag_id) const;

    /**
     * Creates a new TagsResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @param[in] submission_id The decimal ID of the Submission within the
     * Series.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TagsResource_InsertMethod* NewInsertMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id,
        const int32& submission_id,
        const Tag& _content_) const;

    /**
     * Creates a new TagsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] id id is a reserved word in Objective-C.
     * @param[in] else__ A parameter name 'else'.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TagsResource_ListMethod* NewListMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const StringPiece& id,
        const StringPiece& else__) const;

   private:
    KitchSinkService* service_;

    DISALLOW_COPY_AND_ASSIGN(TagsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class TopicsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit TopicsResource(KitchSinkService* service);

    /**
     * Standard destructor.
     */
    ~TopicsResource() {}

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class SubmissionsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit SubmissionsResource(KitchSinkService* service);

      /**
       * Standard destructor.
       */
      ~SubmissionsResource() {}


      /**
       * Creates a new TopicsResource_SubmissionsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] series_id The decimal ID of the Series.
       * @param[in] topic_id The decimal ID of the Topic within the Series.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      TopicsResource_SubmissionsResource_ListMethod* NewListMethod(
          googleapis_client::AuthorizationCredential* _credential_,
          const int32& series_id,
          const int32& topic_id) const;

     private:
      KitchSinkService* service_;

      DISALLOW_COPY_AND_ASSIGN(SubmissionsResource);
    };
    /**
     * Gets the submissions resource method factory.
     *
     * @return SubmissionsResource for creating methods.
     */
    const SubmissionsResource& get_submissions() const {
      return submissions_;
    }



    /**
     * Creates a new TopicsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @param[in] topic_id The decimal ID of the Topic within the Series.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TopicsResource_GetMethod* NewGetMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id,
        const int32& topic_id) const;

    /**
     * Creates a new TopicsResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TopicsResource_InsertMethod* NewInsertMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id,
        const Topic& _content_) const;

    /**
     * Creates a new TopicsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TopicsResource_ListMethod* NewListMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id) const;

    /**
     * Creates a new TopicsResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @param[in] topic_id The decimal ID of the Topic within the Series.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    TopicsResource_UpdateMethod* NewUpdateMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id,
        const int32& topic_id,
        const Topic& _content_) const;

   private:
    KitchSinkService* service_;
    SubmissionsResource submissions_;

    DISALLOW_COPY_AND_ASSIGN(TopicsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class VotesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit VotesResource(KitchSinkService* service);

    /**
     * Standard destructor.
     */
    ~VotesResource() {}


    /**
     * Creates a new VotesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @param[in] submission_id The decimal ID of the Submission within the
     * Series.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    VotesResource_GetMethod* NewGetMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id,
        const int32& submission_id) const;

    /**
     * Creates a new VotesResource_InsertMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @param[in] submission_id The decimal ID of the Submission within the
     * Series.
     * @param[in] _content_ The data object to insert.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    VotesResource_InsertMethod* NewInsertMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id,
        const int32& submission_id,
        const Vote& _content_) const;

    /**
     * Creates a new VotesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    VotesResource_ListMethod* NewListMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id) const;

    /**
     * Creates a new VotesResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] series_id The decimal ID of the Series.
     * @param[in] submission_id The decimal ID of the Submission within the
     * Series.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    VotesResource_UpdateMethod* NewUpdateMethod(
        googleapis_client::AuthorizationCredential* _credential_,
        const int32& series_id,
        const int32& submission_id,
        const Vote& _content_) const;

   private:
    KitchSinkService* service_;

    DISALLOW_COPY_AND_ASSIGN(VotesResource);
  };



  /**
   * Standard constructor.
   *
   * @param[in] transport  The transport to use when creating methods to invoke
   *                       on this service instance.
   */
  explicit KitchSinkService(googleapis_client::HttpTransport* transport);

  /**
   * Standard destructor.
   */
  virtual ~KitchSinkService();

  /**
   * Gets the  resource method factory.
   *
   * @return FeaturedResource for creating methods.
   */
  const FeaturedResource& get_featured() const {
    return featured_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return GlobalResource for creating methods.
   */
  const GlobalResource& get_global() const {
    return global_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return MyResource for creating methods.
   */
  const MyResource& get_my() const {
    return my_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return MyrecentResource for creating methods.
   */
  const MyrecentResource& get_myrecent() const {
    return myrecent_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ProfilesResource for creating methods.
   */
  const ProfilesResource& get_profiles() const {
    return profiles_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ResponsesResource for creating methods.
   */
  const ResponsesResource& get_responses() const {
    return responses_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return SeriesResource for creating methods.
   */
  const SeriesResource& get_series() const {
    return series_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return SubmissionsResource for creating methods.
   */
  const SubmissionsResource& get_submissions() const {
    return submissions_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return TagsResource for creating methods.
   */
  const TagsResource& get_tags() const {
    return tags_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return TopicsResource for creating methods.
   */
  const TopicsResource& get_topics() const {
    return topics_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return VotesResource for creating methods.
   */
  const VotesResource& get_votes() const {
    return votes_;
  }

  /**
   * Declares the OAuth2.0 scopes used within kitch_sink
   *
   * These scopes shoudl be used when asking for credentials to invoke methods
   * in the KitchSinkService.
   */
  class SCOPES {
   public:
    /**
     * A non googleapis.com scope.
     */
    static const char MAIL_GOOGLE_COM[];

    /**
     * a product level scope.
     */
    static const char PRODUCT[];

    /**
     * A typical scope.
     */
    static const char USERINFO_EMAIL[];

   private:
    SCOPES();  // Never instantiated.
    ~SCOPES();  // Never instantiated.
  };

 private:
  FeaturedResource featured_;
  GlobalResource global_;
  MyResource my_;
  MyrecentResource myrecent_;
  ProfilesResource profiles_;
  ResponsesResource responses_;
  SeriesResource series_;
  SubmissionsResource submissions_;
  TagsResource tags_;
  TopicsResource topics_;
  VotesResource votes_;

  DISALLOW_COPY_AND_ASSIGN(KitchSinkService);
};


/**
 * @defgroup DataObject kitch_sink Data Objects
 *
 * The data objects are used as parameters and responses from service requests.
 * For more information about using data objects, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceClass kitch_sink Service
 *
 * The service classes contain information about accessing and using the
 * kitch_sink cloud service.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceMethod kitch_sink Service Methods
 *
 * The service method classes are used to create and invoke methods in the
 * KitchSinkService to access the kitch_sink.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_KITCH_SINK_SERVICE_H_
=== end: ./google/kitch_sink_api/kitch_sink_service.h
=== begin: ./google/kitch_sink_api/lat_long.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   LatLong
// Documentation:
//   

#include "google/kitch_sink_api/lat_long.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "strings/stringpiece.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {


// Object factory method (static).
LatLong* LatLong::New() {
  return new googleapis_client::JsonCppCapsule<LatLong>;
}

// Standard immutable constructor.
LatLong::LatLong(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
LatLong::LatLong(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
LatLong::~LatLong() {
}

// Properties.
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/lat_long.cc
=== begin: ./google/kitch_sink_api/lat_long.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_LAT_LONG_H_
#define  GOOGLE_KITCH_SINK_API_LAT_LONG_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class LatLong : public googleapis_client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static LatLong* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit LatLong(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit LatLong(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~LatLong();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::LatLong</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::LatLong";
  }

  /**
   * Determine if the '<code>latitude</code>' attribute was set.
   *
   * @return true if the '<code>latitude</code>' attribute was set.
   */
  bool has_latitude() const {
    return Storage().isMember("latitude");
  }

  /**
   * Clears the '<code>latitude</code>' attribute.
   */
  void clear_latitude() {
    MutableStorage()->removeMember("latitude");
  }


  /**
   * Get the value of the '<code>latitude</code>' attribute.
   */
  double get_latitude() const {
    const Json::Value& storage = Storage("latitude");
    return googleapis_client::JsonValueToCppValueHelper<double >(storage);
  }

  /**
   * Change the '<code>latitude</code>' attribute.
   * @param[in] value The new value.
   */
  void set_latitude(double value) {
    googleapis_client::SetJsonValueFromCppValueHelper<double >(
      value, MutableStorage("latitude"));
  }

  /**
   * Determine if the '<code>location</code>' attribute was set.
   *
   * @return true if the '<code>location</code>' attribute was set.
   */
  bool has_location() const {
    return Storage().isMember("location");
  }

  /**
   * Clears the '<code>location</code>' attribute.
   */
  void clear_location() {
    MutableStorage()->removeMember("location");
  }


  /**
   * Get the value of the '<code>location</code>' attribute.
   */
  const StringPiece get_location() const {
    const Json::Value& v = Storage("location");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>location</code>' attribute.
   * @param[in] value The new value.
   */
  void set_location(const StringPiece& value) {
    *MutableStorage("location") = value.data();
  }

  /**
   * Determine if the '<code>longitude</code>' attribute was set.
   *
   * @return true if the '<code>longitude</code>' attribute was set.
   */
  bool has_longitude() const {
    return Storage().isMember("longitude");
  }

  /**
   * Clears the '<code>longitude</code>' attribute.
   */
  void clear_longitude() {
    MutableStorage()->removeMember("longitude");
  }


  /**
   * Get the value of the '<code>longitude</code>' attribute.
   */
  double get_longitude() const {
    const Json::Value& storage = Storage("longitude");
    return googleapis_client::JsonValueToCppValueHelper<double >(storage);
  }

  /**
   * Change the '<code>longitude</code>' attribute.
   * @param[in] value The new value.
   */
  void set_longitude(double value) {
    googleapis_client::SetJsonValueFromCppValueHelper<double >(
      value, MutableStorage("longitude"));
  }

 private:
  void operator=(const LatLong&);
};  // LatLong
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_LAT_LONG_H_
=== end: ./google/kitch_sink_api/lat_long.h
=== begin: ./google/kitch_sink_api/moderator_topics_resource_partial.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   ModeratorTopicsResourcePartial
// Documentation:
//   

#include "google/kitch_sink_api/moderator_topics_resource_partial.h"
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "strings/stringpiece.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {


// Object factory method (static).
ModeratorTopicsResourcePartial* ModeratorTopicsResourcePartial::New() {
  return new googleapis_client::JsonCppCapsule<ModeratorTopicsResourcePartial>;
}

// Standard immutable constructor.
ModeratorTopicsResourcePartial::ModeratorTopicsResourcePartial(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
ModeratorTopicsResourcePartial::ModeratorTopicsResourcePartial(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
ModeratorTopicsResourcePartial::~ModeratorTopicsResourcePartial() {
}
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/moderator_topics_resource_partial.cc
=== begin: ./google/kitch_sink_api/moderator_topics_resource_partial.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_MODERATOR_TOPICS_RESOURCE_PARTIAL_H_
#define  GOOGLE_KITCH_SINK_API_MODERATOR_TOPICS_RESOURCE_PARTIAL_H_

#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class ModeratorTopicsResourcePartial : public googleapis_client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ModeratorTopicsResourcePartial* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ModeratorTopicsResourcePartial(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ModeratorTopicsResourcePartial(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ModeratorTopicsResourcePartial();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::ModeratorTopicsResourcePartial</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::ModeratorTopicsResourcePartial";
  }

 private:
  void operator=(const ModeratorTopicsResourcePartial&);
};  // ModeratorTopicsResourcePartial
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_MODERATOR_TOPICS_RESOURCE_PARTIAL_H_
=== end: ./google/kitch_sink_api/moderator_topics_resource_partial.h
=== begin: ./google/kitch_sink_api/profile.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   Profile
// Documentation:
//   

#include "google/kitch_sink_api/profile.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/lat_long.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {



// Object factory method (static).
Profile::ProfileAttribution* Profile::ProfileAttribution::New() {
  return new googleapis_client::JsonCppCapsule<ProfileAttribution>;
}

// Standard immutable constructor.
Profile::ProfileAttribution::ProfileAttribution(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Profile::ProfileAttribution::ProfileAttribution(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Profile::ProfileAttribution::~ProfileAttribution() {
}

// Properties.

const LatLong Profile::ProfileAttribution::get_geo() const {
   const Json::Value& storage = Storage("geo");
   return googleapis_client::JsonValueToCppValueHelper<LatLong >(storage);
}

LatLong Profile::ProfileAttribution::mutable_geo() {
  Json::Value* storage = MutableStorage("geo");
  return googleapis_client::JsonValueToMutableCppValueHelper<LatLong >(storage);
}

// Object factory method (static).
Profile::ProfileId* Profile::ProfileId::New() {
  return new googleapis_client::JsonCppCapsule<ProfileId>;
}

// Standard immutable constructor.
Profile::ProfileId::ProfileId(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Profile::ProfileId::ProfileId(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Profile::ProfileId::~ProfileId() {
}

// Properties.
// Object factory method (static).
Profile* Profile::New() {
  return new googleapis_client::JsonCppCapsule<Profile>;
}

// Standard immutable constructor.
Profile::Profile(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Profile::Profile(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Profile::~Profile() {
}

// Properties.
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/profile.cc
=== begin: ./google/kitch_sink_api/profile.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_PROFILE_H_
#define  GOOGLE_KITCH_SINK_API_PROFILE_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/lat_long.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class Profile : public googleapis_client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class ProfileAttribution : public googleapis_client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static ProfileAttribution* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ProfileAttribution(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ProfileAttribution(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~ProfileAttribution();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_kitch_sink_api::ProfileAttribution</code>
     */
    const char* GetTypeName() const {
      return "google_kitch_sink_api::ProfileAttribution";
    }

    /**
     * Determine if the '<code>avatarUrl</code>' attribute was set.
     *
     * @return true if the '<code>avatarUrl</code>' attribute was set.
     */
    bool has_avatar_url() const {
      return Storage().isMember("avatarUrl");
    }

    /**
     * Clears the '<code>avatarUrl</code>' attribute.
     */
    void clear_avatar_url() {
      MutableStorage()->removeMember("avatarUrl");
    }


    /**
     * Get the value of the '<code>avatarUrl</code>' attribute.
     */
    const StringPiece get_avatar_url() const {
      const Json::Value& v = Storage("avatarUrl");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>avatarUrl</code>' attribute.
     * @param[in] value The new value.
     */
    void set_avatar_url(const StringPiece& value) {
      *MutableStorage("avatarUrl") = value.data();
    }

    /**
     * Determine if the '<code>displayName</code>' attribute was set.
     *
     * @return true if the '<code>displayName</code>' attribute was set.
     */
    bool has_display_name() const {
      return Storage().isMember("displayName");
    }

    /**
     * Clears the '<code>displayName</code>' attribute.
     */
    void clear_display_name() {
      MutableStorage()->removeMember("displayName");
    }


    /**
     * Get the value of the '<code>displayName</code>' attribute.
     */
    const StringPiece get_display_name() const {
      const Json::Value& v = Storage("displayName");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>displayName</code>' attribute.
     * @param[in] value The new value.
     */
    void set_display_name(const StringPiece& value) {
      *MutableStorage("displayName") = value.data();
    }

    /**
     * Determine if the '<code>geo</code>' attribute was set.
     *
     * @return true if the '<code>geo</code>' attribute was set.
     */
    bool has_geo() const {
      return Storage().isMember("geo");
    }

    /**
     * Clears the '<code>geo</code>' attribute.
     */
    void clear_geo() {
      MutableStorage()->removeMember("geo");
    }


    /**
     * Get a reference to the value of the '<code>geo</code>' attribute.
     */
    const LatLong get_geo() const;

    /**
     * Gets a reference to a mutable value of the '<code>geo</code>' property.
     * @return The result can be modified to change the attribute value.
     */
    LatLong mutable_geo();

    /**
     * Determine if the '<code>location</code>' attribute was set.
     *
     * @return true if the '<code>location</code>' attribute was set.
     */
    bool has_location() const {
      return Storage().isMember("location");
    }

    /**
     * Clears the '<code>location</code>' attribute.
     */
    void clear_location() {
      MutableStorage()->removeMember("location");
    }


    /**
     * Get the value of the '<code>location</code>' attribute.
     */
    const StringPiece get_location() const {
      const Json::Value& v = Storage("location");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>location</code>' attribute.
     * @param[in] value The new value.
     */
    void set_location(const StringPiece& value) {
      *MutableStorage("location") = value.data();
    }

   private:
    void operator=(const ProfileAttribution&);
  };  // ProfileAttribution
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class ProfileId : public googleapis_client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static ProfileId* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ProfileId(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit ProfileId(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~ProfileId();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_kitch_sink_api::ProfileId</code>
     */
    const char* GetTypeName() const {
      return "google_kitch_sink_api::ProfileId";
    }

    /**
     * Determine if the '<code>user</code>' attribute was set.
     *
     * @return true if the '<code>user</code>' attribute was set.
     */
    bool has_user() const {
      return Storage().isMember("user");
    }

    /**
     * Clears the '<code>user</code>' attribute.
     */
    void clear_user() {
      MutableStorage()->removeMember("user");
    }


    /**
     * Get the value of the '<code>user</code>' attribute.
     */
    const StringPiece get_user() const {
      const Json::Value& v = Storage("user");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>user</code>' attribute.
     * @param[in] value The new value.
     */
    void set_user(const StringPiece& value) {
      *MutableStorage("user") = value.data();
    }

   private:
    void operator=(const ProfileId&);
  };  // ProfileId
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Profile* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Profile(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Profile(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Profile();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::Profile</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::Profile";
  }

  /**
   * Determine if the '<code>attribution</code>' attribute was set.
   *
   * @return true if the '<code>attribution</code>' attribute was set.
   */
  bool has_attribution() const {
    return Storage().isMember("attribution");
  }

  /**
   * Clears the '<code>attribution</code>' attribute.
   */
  void clear_attribution() {
    MutableStorage()->removeMember("attribution");
  }


  /**
   * Get a reference to the value of the '<code>attribution</code>' attribute.
   */
  const ProfileAttribution get_attribution() const {
     const Json::Value& storage = Storage("attribution");
    return googleapis_client::JsonValueToCppValueHelper<ProfileAttribution >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>attribution</code>'
   * property.
   * @return The result can be modified to change the attribute value.
   */
  ProfileAttribution mutable_attribution() {
    Json::Value* storage = MutableStorage("attribution");
    return googleapis_client::JsonValueToMutableCppValueHelper<ProfileAttribution >(storage);
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get a reference to the value of the '<code>id</code>' attribute.
   */
  const ProfileId get_id() const {
     const Json::Value& storage = Storage("id");
    return googleapis_client::JsonValueToCppValueHelper<ProfileId >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>id</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  ProfileId mutable_id() {
    Json::Value* storage = MutableStorage("id");
    return googleapis_client::JsonValueToMutableCppValueHelper<ProfileId >(storage);
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

 private:
  void operator=(const Profile&);
};  // Profile
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_PROFILE_H_
=== end: ./google/kitch_sink_api/profile.h
=== begin: ./google/kitch_sink_api/rule.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   Rule
// Documentation:
//   

#include "google/kitch_sink_api/rule.h"
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/integral_types.h"
#include "strings/stringpiece.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {



// Object factory method (static).
Rule::RuleSubmissions* Rule::RuleSubmissions::New() {
  return new googleapis_client::JsonCppCapsule<RuleSubmissions>;
}

// Standard immutable constructor.
Rule::RuleSubmissions::RuleSubmissions(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Rule::RuleSubmissions::RuleSubmissions(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Rule::RuleSubmissions::~RuleSubmissions() {
}

// Properties.
// Object factory method (static).
Rule* Rule::New() {
  return new googleapis_client::JsonCppCapsule<Rule>;
}

// Standard immutable constructor.
Rule::Rule(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Rule::Rule(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Rule::~Rule() {
}

// Properties.
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/rule.cc
=== begin: ./google/kitch_sink_api/rule.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_RULE_H_
#define  GOOGLE_KITCH_SINK_API_RULE_H_

#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/integral_types.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class Rule : public googleapis_client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class RuleSubmissions : public googleapis_client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static RuleSubmissions* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit RuleSubmissions(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit RuleSubmissions(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~RuleSubmissions();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_kitch_sink_api::RuleSubmissions</code>
     */
    const char* GetTypeName() const {
      return "google_kitch_sink_api::RuleSubmissions";
    }

    /**
     * Determine if the '<code>close</code>' attribute was set.
     *
     * @return true if the '<code>close</code>' attribute was set.
     */
    bool has_close() const {
      return Storage().isMember("close");
    }

    /**
     * Clears the '<code>close</code>' attribute.
     */
    void clear_close() {
      MutableStorage()->removeMember("close");
    }


    /**
     * Get the value of the '<code>close</code>' attribute.
     */
    int32 get_close() const {
      const Json::Value& storage = Storage("close");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>close</code>' attribute.
     * @param[in] value The new value.
     */
    void set_close(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("close"));
    }

    /**
     * Determine if the '<code>open</code>' attribute was set.
     *
     * @return true if the '<code>open</code>' attribute was set.
     */
    bool has_open() const {
      return Storage().isMember("open");
    }

    /**
     * Clears the '<code>open</code>' attribute.
     */
    void clear_open() {
      MutableStorage()->removeMember("open");
    }


    /**
     * Get the value of the '<code>open</code>' attribute.
     */
    int32 get_open() const {
      const Json::Value& storage = Storage("open");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>open</code>' attribute.
     * @param[in] value The new value.
     */
    void set_open(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("open"));
    }

   private:
    void operator=(const RuleSubmissions&);
  };  // RuleSubmissions
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Rule* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Rule(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Rule(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Rule();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::Rule</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::Rule";
  }

  /**
   * Determine if the '<code>submissions</code>' attribute was set.
   *
   * @return true if the '<code>submissions</code>' attribute was set.
   */
  bool has_submissions() const {
    return Storage().isMember("submissions");
  }

  /**
   * Clears the '<code>submissions</code>' attribute.
   */
  void clear_submissions() {
    MutableStorage()->removeMember("submissions");
  }


  /**
   * Get a reference to the value of the '<code>submissions</code>' attribute.
   */
  const RuleSubmissions get_submissions() const {
     const Json::Value& storage = Storage("submissions");
    return googleapis_client::JsonValueToCppValueHelper<RuleSubmissions >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>submissions</code>'
   * property.
   * @return The result can be modified to change the attribute value.
   */
  RuleSubmissions mutable_submissions() {
    Json::Value* storage = MutableStorage("submissions");
    return googleapis_client::JsonValueToMutableCppValueHelper<RuleSubmissions >(storage);
  }

 private:
  void operator=(const Rule&);
};  // Rule
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_RULE_H_
=== end: ./google/kitch_sink_api/rule.h
=== begin: ./google/kitch_sink_api/series.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   Series
// Documentation:
//   

#include "google/kitch_sink_api/series.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/integral_types.h"
#include "strings/stringpiece.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {




// Object factory method (static).
Series::SeriesCounters::SeriesCountersCounters* Series::SeriesCounters::SeriesCountersCounters::New() {
  return new googleapis_client::JsonCppCapsule<SeriesCountersCounters>;
}

// Standard immutable constructor.
Series::SeriesCounters::SeriesCountersCounters::SeriesCountersCounters(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Series::SeriesCounters::SeriesCountersCounters::SeriesCountersCounters(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Series::SeriesCounters::SeriesCountersCounters::~SeriesCountersCounters() {
}

// Properties.
// Object factory method (static).
Series::SeriesCounters* Series::SeriesCounters::New() {
  return new googleapis_client::JsonCppCapsule<SeriesCounters>;
}

// Standard immutable constructor.
Series::SeriesCounters::SeriesCounters(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Series::SeriesCounters::SeriesCounters(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Series::SeriesCounters::~SeriesCounters() {
}

// Properties.

// Object factory method (static).
Series::SeriesId* Series::SeriesId::New() {
  return new googleapis_client::JsonCppCapsule<SeriesId>;
}

// Standard immutable constructor.
Series::SeriesId::SeriesId(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Series::SeriesId::SeriesId(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Series::SeriesId::~SeriesId() {
}

// Properties.
// Object factory method (static).
Series* Series::New() {
  return new googleapis_client::JsonCppCapsule<Series>;
}

// Standard immutable constructor.
Series::Series(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Series::Series(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Series::~Series() {
}

// Properties.
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/series.cc
=== begin: ./google/kitch_sink_api/series.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_SERIES_H_
#define  GOOGLE_KITCH_SINK_API_SERIES_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/integral_types.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class Series : public googleapis_client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class SeriesCounters : public googleapis_client::JsonCppData {
   public:
    /**
     * No description provided.
     *
     * @ingroup DataObject
     */
    class SeriesCountersCounters : public googleapis_client::JsonCppData {
     public:
      /**
       * Creates a new default instance.
       *
       * @return Ownership is passed back to the caller.
       */
      static SeriesCountersCounters* New();

      /**
       * Standard constructor for an immutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit SeriesCountersCounters(const Json::Value& storage);

      /**
       * Standard constructor for a mutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit SeriesCountersCounters(Json::Value* storage);

      /**
       * Standard destructor.
       */
      virtual ~SeriesCountersCounters();

      /**
       * Returns a string denoting the type of this data object.
       *
       * @return <code>google_kitch_sink_api::SeriesCountersCounters</code>
       */
      const char* GetTypeName() const {
        return "google_kitch_sink_api::SeriesCountersCounters";
      }

      /**
       * Determine if the '<code>all-votes</code>' attribute was set.
       *
       * @return true if the '<code>all-votes</code>' attribute was set.
       */
      bool has_all_votes() const {
        return Storage().isMember("all-votes");
      }

      /**
       * Clears the '<code>all-votes</code>' attribute.
       */
      void clear_all_votes() {
        MutableStorage()->removeMember("all-votes");
      }


      /**
       * Get the value of the '<code>all-votes</code>' attribute.
       */
      int32 get_all_votes() const {
        const Json::Value& storage = Storage("all-votes");
        return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
      }

      /**
       * Change the '<code>all-votes</code>' attribute.
       * @param[in] value The new value.
       */
      void set_all_votes(int32 value) {
        googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
          value, MutableStorage("all-votes"));
      }

     private:
      void operator=(const SeriesCountersCounters&);
    };  // SeriesCountersCounters
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static SeriesCounters* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit SeriesCounters(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit SeriesCounters(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~SeriesCounters();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_kitch_sink_api::SeriesCounters</code>
     */
    const char* GetTypeName() const {
      return "google_kitch_sink_api::SeriesCounters";
    }

    /**
     * Determine if the '<code>anonymousSubmissions</code>' attribute was set.
     *
     * @return true if the '<code>anonymousSubmissions</code>' attribute was
     * set.
     */
    bool has_anonymous_submissions() const {
      return Storage().isMember("anonymousSubmissions");
    }

    /**
     * Clears the '<code>anonymousSubmissions</code>' attribute.
     */
    void clear_anonymous_submissions() {
      MutableStorage()->removeMember("anonymousSubmissions");
    }


    /**
     * Get the value of the '<code>anonymousSubmissions</code>' attribute.
     */
    int32 get_anonymous_submissions() const {
      const Json::Value& storage = Storage("anonymousSubmissions");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>anonymousSubmissions</code>' attribute.
     * @param[in] value The new value.
     */
    void set_anonymous_submissions(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("anonymousSubmissions"));
    }

    /**
     * Determine if the '<code>counters</code>' attribute was set.
     *
     * @return true if the '<code>counters</code>' attribute was set.
     */
    bool has_counters() const {
      return Storage().isMember("counters");
    }

    /**
     * Clears the '<code>counters</code>' attribute.
     */
    void clear_counters() {
      MutableStorage()->removeMember("counters");
    }


    /**
     * Get a reference to the value of the '<code>counters</code>' attribute.
     */
    const SeriesCountersCounters get_counters() const {
       const Json::Value& storage = Storage("counters");
      return googleapis_client::JsonValueToCppValueHelper<SeriesCountersCounters >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>counters</code>'
     * property.
     * @return The result can be modified to change the attribute value.
     */
    SeriesCountersCounters mutable_counters() {
      Json::Value* storage = MutableStorage("counters");
      return googleapis_client::JsonValueToMutableCppValueHelper<SeriesCountersCounters >(storage);
    }

    /**
     * Determine if the '<code>else</code>' attribute was set.
     *
     * @return true if the '<code>else</code>' attribute was set.
     */
    bool has_else() const {
      return Storage().isMember("else");
    }

    /**
     * Clears the '<code>else</code>' attribute.
     */
    void clear_else() {
      MutableStorage()->removeMember("else");
    }


    /**
     * Get the value of the '<code>else</code>' attribute.
     */
    int32 get_else() const {
      const Json::Value& storage = Storage("else");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>else</code>' attribute.
     * @param[in] value The new value.
     */
    void set_else(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("else"));
    }

    /**
     * Determine if the '<code>minus_votes</code>' attribute was set.
     *
     * @return true if the '<code>minus_votes</code>' attribute was set.
     */
    bool has_minus_votes() const {
      return Storage().isMember("minus_votes");
    }

    /**
     * Clears the '<code>minus_votes</code>' attribute.
     */
    void clear_minus_votes() {
      MutableStorage()->removeMember("minus_votes");
    }


    /**
     * Get the value of the '<code>minus_votes</code>' attribute.
     */
    int32 get_minus_votes() const {
      const Json::Value& storage = Storage("minus_votes");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>minus_votes</code>' attribute.
     * @param[in] value The new value.
     */
    void set_minus_votes(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("minus_votes"));
    }

    /**
     * Determine if the '<code>none_votes</code>' attribute was set.
     *
     * @return true if the '<code>none_votes</code>' attribute was set.
     */
    bool has_none_votes() const {
      return Storage().isMember("none_votes");
    }

    /**
     * Clears the '<code>none_votes</code>' attribute.
     */
    void clear_none_votes() {
      MutableStorage()->removeMember("none_votes");
    }


    /**
     * Get the value of the '<code>none_votes</code>' attribute.
     */
    uint64 get_none_votes() const {
      const Json::Value& storage = Storage("none_votes");
      return googleapis_client::JsonValueToCppValueHelper<uint64 >(storage);
    }

    /**
     * Change the '<code>none_votes</code>' attribute.
     * @param[in] value The new value.
     */
    void set_none_votes(uint64 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<uint64 >(
        value, MutableStorage("none_votes"));
    }

    /**
     * Determine if the '<code>plus_votes</code>' attribute was set.
     *
     * @return true if the '<code>plus_votes</code>' attribute was set.
     */
    bool has_plus_votes() const {
      return Storage().isMember("plus_votes");
    }

    /**
     * Clears the '<code>plus_votes</code>' attribute.
     */
    void clear_plus_votes() {
      MutableStorage()->removeMember("plus_votes");
    }


    /**
     * Get the value of the '<code>plus_votes</code>' attribute.
     */
    int32 get_plus_votes() const {
      const Json::Value& storage = Storage("plus_votes");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>plus_votes</code>' attribute.
     * @param[in] value The new value.
     */
    void set_plus_votes(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("plus_votes"));
    }

    /**
     * Determine if the '<code>submissions</code>' attribute was set.
     *
     * @return true if the '<code>submissions</code>' attribute was set.
     */
    bool has_submissions() const {
      return Storage().isMember("submissions");
    }

    /**
     * Clears the '<code>submissions</code>' attribute.
     */
    void clear_submissions() {
      MutableStorage()->removeMember("submissions");
    }


    /**
     * Get the value of the '<code>submissions</code>' attribute.
     */
    int32 get_submissions() const {
      const Json::Value& storage = Storage("submissions");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>submissions</code>' attribute.
     * @param[in] value The new value.
     */
    void set_submissions(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("submissions"));
    }

    /**
     * Determine if the '<code>users</code>' attribute was set.
     *
     * @return true if the '<code>users</code>' attribute was set.
     */
    bool has_users() const {
      return Storage().isMember("users");
    }

    /**
     * Clears the '<code>users</code>' attribute.
     */
    void clear_users() {
      MutableStorage()->removeMember("users");
    }


    /**
     * Get the value of the '<code>users</code>' attribute.
     */
    const StringPiece get_users() const {
      const Json::Value& v = Storage("users");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>users</code>' attribute.
     * @param[in] value The new value.
     */
    void set_users(const StringPiece& value) {
      *MutableStorage("users") = value.data();
    }

   private:
    void operator=(const SeriesCounters&);
  };  // SeriesCounters
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class SeriesId : public googleapis_client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static SeriesId* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit SeriesId(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit SeriesId(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~SeriesId();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_kitch_sink_api::SeriesId</code>
     */
    const char* GetTypeName() const {
      return "google_kitch_sink_api::SeriesId";
    }

    /**
     * Determine if the '<code>seriesId</code>' attribute was set.
     *
     * @return true if the '<code>seriesId</code>' attribute was set.
     */
    bool has_series_id() const {
      return Storage().isMember("seriesId");
    }

    /**
     * Clears the '<code>seriesId</code>' attribute.
     */
    void clear_series_id() {
      MutableStorage()->removeMember("seriesId");
    }


    /**
     * Get the value of the '<code>seriesId</code>' attribute.
     */
    int32 get_series_id() const {
      const Json::Value& storage = Storage("seriesId");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>seriesId</code>' attribute.
     * @param[in] value The new value.
     */
    void set_series_id(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("seriesId"));
    }

   private:
    void operator=(const SeriesId&);
  };  // SeriesId
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Series* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Series(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Series(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Series();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::Series</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::Series";
  }

  /**
   * Determine if the '<code>anonymousSubmissionAllowed</code>' attribute was
   * set.
   *
   * @return true if the '<code>anonymousSubmissionAllowed</code>' attribute was
   * set.
   */
  bool has_anonymous_submission_allowed() const {
    return Storage().isMember("anonymousSubmissionAllowed");
  }

  /**
   * Clears the '<code>anonymousSubmissionAllowed</code>' attribute.
   */
  void clear_anonymous_submission_allowed() {
    MutableStorage()->removeMember("anonymousSubmissionAllowed");
  }


  /**
   * Get the value of the '<code>anonymousSubmissionAllowed</code>' attribute.
   */
  bool get_anonymous_submission_allowed() const {
    const Json::Value& storage = Storage("anonymousSubmissionAllowed");
    return googleapis_client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>anonymousSubmissionAllowed</code>' attribute.
   * @param[in] value The new value.
   */
  void set_anonymous_submission_allowed(bool value) {
    googleapis_client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("anonymousSubmissionAllowed"));
  }

  /**
   * Determine if the '<code>counters</code>' attribute was set.
   *
   * @return true if the '<code>counters</code>' attribute was set.
   */
  bool has_counters() const {
    return Storage().isMember("counters");
  }

  /**
   * Clears the '<code>counters</code>' attribute.
   */
  void clear_counters() {
    MutableStorage()->removeMember("counters");
  }


  /**
   * Get a reference to the value of the '<code>counters</code>' attribute.
   */
  const SeriesCounters get_counters() const {
     const Json::Value& storage = Storage("counters");
    return googleapis_client::JsonValueToCppValueHelper<SeriesCounters >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>counters</code>'
   * property.
   * @return The result can be modified to change the attribute value.
   */
  SeriesCounters mutable_counters() {
    Json::Value* storage = MutableStorage("counters");
    return googleapis_client::JsonValueToMutableCppValueHelper<SeriesCounters >(storage);
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get a reference to the value of the '<code>id</code>' attribute.
   */
  const SeriesId get_id() const {
     const Json::Value& storage = Storage("id");
    return googleapis_client::JsonValueToCppValueHelper<SeriesId >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>id</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  SeriesId mutable_id() {
    Json::Value* storage = MutableStorage("id");
    return googleapis_client::JsonValueToMutableCppValueHelper<SeriesId >(storage);
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>numTopics</code>' attribute was set.
   *
   * @return true if the '<code>numTopics</code>' attribute was set.
   */
  bool has_num_topics() const {
    return Storage().isMember("numTopics");
  }

  /**
   * Clears the '<code>numTopics</code>' attribute.
   */
  void clear_num_topics() {
    MutableStorage()->removeMember("numTopics");
  }


  /**
   * Get the value of the '<code>numTopics</code>' attribute.
   */
  int32 get_num_topics() const {
    const Json::Value& storage = Storage("numTopics");
    return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>numTopics</code>' attribute.
   * @param[in] value The new value.
   */
  void set_num_topics(int32 value) {
    googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("numTopics"));
  }

  /**
   * Determine if the '<code>videoSubmissionAllowed</code>' attribute was set.
   *
   * @return true if the '<code>videoSubmissionAllowed</code>' attribute was
   * set.
   */
  bool has_video_submission_allowed() const {
    return Storage().isMember("videoSubmissionAllowed");
  }

  /**
   * Clears the '<code>videoSubmissionAllowed</code>' attribute.
   */
  void clear_video_submission_allowed() {
    MutableStorage()->removeMember("videoSubmissionAllowed");
  }


  /**
   * Get the value of the '<code>videoSubmissionAllowed</code>' attribute.
   */
  bool get_video_submission_allowed() const {
    const Json::Value& storage = Storage("videoSubmissionAllowed");
    return googleapis_client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>videoSubmissionAllowed</code>' attribute.
   * @param[in] value The new value.
   */
  void set_video_submission_allowed(bool value) {
    googleapis_client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("videoSubmissionAllowed"));
  }

 private:
  void operator=(const Series&);
};  // Series
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_SERIES_H_
=== end: ./google/kitch_sink_api/series.h
=== begin: ./google/kitch_sink_api/series_list.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   SeriesList
// Documentation:
//   

#include "google/kitch_sink_api/series_list.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/series.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {


// Object factory method (static).
SeriesList* SeriesList::New() {
  return new googleapis_client::JsonCppCapsule<SeriesList>;
}

// Standard immutable constructor.
SeriesList::SeriesList(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
SeriesList::SeriesList(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
SeriesList::~SeriesList() {
}

// Properties.

const googleapis_client::JsonCppArray<Series > SeriesList::get_items() const {
   const Json::Value& storage = Storage("items");
   return googleapis_client::JsonValueToCppValueHelper<googleapis_client::JsonCppArray<Series > >(storage);
}

googleapis_client::JsonCppArray<Series > SeriesList::mutable_items() {
  Json::Value* storage = MutableStorage("items");
  return googleapis_client::JsonValueToMutableCppValueHelper<googleapis_client::JsonCppArray<Series > >(storage);
}
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/series_list.cc
=== begin: ./google/kitch_sink_api/series_list.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_SERIES_LIST_H_
#define  GOOGLE_KITCH_SINK_API_SERIES_LIST_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/series.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class SeriesList : public googleapis_client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static SeriesList* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit SeriesList(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit SeriesList(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~SeriesList();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::SeriesList</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::SeriesList";
  }

  /**
   * Determine if the '<code>items</code>' attribute was set.
   *
   * @return true if the '<code>items</code>' attribute was set.
   */
  bool has_items() const {
    return Storage().isMember("items");
  }

  /**
   * Clears the '<code>items</code>' attribute.
   */
  void clear_items() {
    MutableStorage()->removeMember("items");
  }


  /**
   * Get a reference to the value of the '<code>items</code>' attribute.
   */
  const googleapis_client::JsonCppArray<Series > get_items() const;

  /**
   * Gets a reference to a mutable value of the '<code>items</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  googleapis_client::JsonCppArray<Series > mutable_items();

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

 private:
  void operator=(const SeriesList&);
};  // SeriesList
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_SERIES_LIST_H_
=== end: ./google/kitch_sink_api/series_list.h
=== begin: ./google/kitch_sink_api/submission.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   Submission
// Documentation:
//   

#include "google/kitch_sink_api/submission.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/integral_types.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/lat_long.h"
#include "google/kitch_sink_api/moderator_topics_resource_partial.h"
#include "google/kitch_sink_api/translation.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {



// Object factory method (static).
Submission::SubmissionAttribution* Submission::SubmissionAttribution::New() {
  return new googleapis_client::JsonCppCapsule<SubmissionAttribution>;
}

// Standard immutable constructor.
Submission::SubmissionAttribution::SubmissionAttribution(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Submission::SubmissionAttribution::SubmissionAttribution(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Submission::SubmissionAttribution::~SubmissionAttribution() {
}

// Properties.

// Object factory method (static).
Submission::SubmissionCounters* Submission::SubmissionCounters::New() {
  return new googleapis_client::JsonCppCapsule<SubmissionCounters>;
}

// Standard immutable constructor.
Submission::SubmissionCounters::SubmissionCounters(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Submission::SubmissionCounters::SubmissionCounters(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Submission::SubmissionCounters::~SubmissionCounters() {
}

// Properties.

// Object factory method (static).
Submission::SubmissionId* Submission::SubmissionId::New() {
  return new googleapis_client::JsonCppCapsule<SubmissionId>;
}

// Standard immutable constructor.
Submission::SubmissionId::SubmissionId(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Submission::SubmissionId::SubmissionId(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Submission::SubmissionId::~SubmissionId() {
}

// Properties.

// Object factory method (static).
Submission::SubmissionParentSubmissionId* Submission::SubmissionParentSubmissionId::New() {
  return new googleapis_client::JsonCppCapsule<SubmissionParentSubmissionId>;
}

// Standard immutable constructor.
Submission::SubmissionParentSubmissionId::SubmissionParentSubmissionId(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Submission::SubmissionParentSubmissionId::SubmissionParentSubmissionId(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Submission::SubmissionParentSubmissionId::~SubmissionParentSubmissionId() {
}

// Properties.
// Object factory method (static).
Submission* Submission::New() {
  return new googleapis_client::JsonCppCapsule<Submission>;
}

// Standard immutable constructor.
Submission::Submission(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Submission::Submission(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Submission::~Submission() {
}

// Properties.

const googleapis_client::JsonCppArray<LatLong > Submission::get_geo() const {
   const Json::Value& storage = Storage("geo");
   return googleapis_client::JsonValueToCppValueHelper<googleapis_client::JsonCppArray<LatLong > >(storage);
}

googleapis_client::JsonCppArray<LatLong > Submission::mutable_geo() {
  Json::Value* storage = MutableStorage("geo");
  return googleapis_client::JsonValueToMutableCppValueHelper<googleapis_client::JsonCppArray<LatLong > >(storage);
}

const googleapis_client::JsonCppArray<ModeratorTopicsResourcePartial > Submission::get_topics() const {
   const Json::Value& storage = Storage("topics");
   return googleapis_client::JsonValueToCppValueHelper<googleapis_client::JsonCppArray<ModeratorTopicsResourcePartial > >(storage);
}

googleapis_client::JsonCppArray<ModeratorTopicsResourcePartial > Submission::mutable_topics() {
  Json::Value* storage = MutableStorage("topics");
  return googleapis_client::JsonValueToMutableCppValueHelper<googleapis_client::JsonCppArray<ModeratorTopicsResourcePartial > >(storage);
}

const googleapis_client::JsonCppAssociativeArray<Translation > Submission::get_translations() const {
   const Json::Value& storage = Storage("translations");
   return googleapis_client::JsonValueToCppValueHelper<googleapis_client::JsonCppAssociativeArray<Translation > >(storage);
}

googleapis_client::JsonCppAssociativeArray<Translation > Submission::mutable_translations() {
  Json::Value* storage = MutableStorage("translations");
  return googleapis_client::JsonValueToMutableCppValueHelper<googleapis_client::JsonCppAssociativeArray<Translation > >(storage);
}
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/submission.cc
=== begin: ./google/kitch_sink_api/submission.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_SUBMISSION_H_
#define  GOOGLE_KITCH_SINK_API_SUBMISSION_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/integral_types.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/lat_long.h"
#include "google/kitch_sink_api/moderator_topics_resource_partial.h"
#include "google/kitch_sink_api/translation.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class Submission : public googleapis_client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class SubmissionAttribution : public googleapis_client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static SubmissionAttribution* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit SubmissionAttribution(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit SubmissionAttribution(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~SubmissionAttribution();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_kitch_sink_api::SubmissionAttribution</code>
     */
    const char* GetTypeName() const {
      return "google_kitch_sink_api::SubmissionAttribution";
    }

    /**
     * Determine if the '<code>$avatarUrl</code>' attribute was set.
     *
     * @return true if the '<code>$avatarUrl</code>' attribute was set.
     */
    bool has_avatar_url() const {
      return Storage().isMember("$avatarUrl");
    }

    /**
     * Clears the '<code>$avatarUrl</code>' attribute.
     */
    void clear_avatar_url() {
      MutableStorage()->removeMember("$avatarUrl");
    }


    /**
     * Get the value of the '<code>$avatarUrl</code>' attribute.
     */
    const StringPiece get_avatar_url() const {
      const Json::Value& v = Storage("$avatarUrl");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>$avatarUrl</code>' attribute.
     *
     * A member with a $ in the name.
     *
     * @param[in] value The new value.
     */
    void set_avatar_url(const StringPiece& value) {
      *MutableStorage("$avatarUrl") = value.data();
    }

    /**
     * Determine if the '<code>$object</code>' attribute was set.
     *
     * @return true if the '<code>$object</code>' attribute was set.
     */
    bool has_object() const {
      return Storage().isMember("$object");
    }

    /**
     * Clears the '<code>$object</code>' attribute.
     */
    void clear_object() {
      MutableStorage()->removeMember("$object");
    }


    /**
     * Get the value of the '<code>$object</code>' attribute.
     */
    const StringPiece get_object() const {
      const Json::Value& v = Storage("$object");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>$object</code>' attribute.
     *
     * A member with a $ in the name, but if you strip it, you get a reserved
     * word.
     *
     * @param[in] value The new value.
     */
    void set_object(const StringPiece& value) {
      *MutableStorage("$object") = value.data();
    }

    /**
     * Determine if the '<code>location</code>' attribute was set.
     *
     * @return true if the '<code>location</code>' attribute was set.
     */
    bool has_location() const {
      return Storage().isMember("location");
    }

    /**
     * Clears the '<code>location</code>' attribute.
     */
    void clear_location() {
      MutableStorage()->removeMember("location");
    }


    /**
     * Get the value of the '<code>location</code>' attribute.
     */
    const StringPiece get_location() const {
      const Json::Value& v = Storage("location");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>location</code>' attribute.
     * @param[in] value The new value.
     */
    void set_location(const StringPiece& value) {
      *MutableStorage("location") = value.data();
    }

   private:
    void operator=(const SubmissionAttribution&);
  };  // SubmissionAttribution
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class SubmissionCounters : public googleapis_client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static SubmissionCounters* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit SubmissionCounters(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit SubmissionCounters(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~SubmissionCounters();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_kitch_sink_api::SubmissionCounters</code>
     */
    const char* GetTypeName() const {
      return "google_kitch_sink_api::SubmissionCounters";
    }

    /**
     * Determine if the '<code>minus_votes</code>' attribute was set.
     *
     * @return true if the '<code>minus_votes</code>' attribute was set.
     */
    bool has_minus_votes() const {
      return Storage().isMember("minus_votes");
    }

    /**
     * Clears the '<code>minus_votes</code>' attribute.
     */
    void clear_minus_votes() {
      MutableStorage()->removeMember("minus_votes");
    }


    /**
     * Get the value of the '<code>minus_votes</code>' attribute.
     */
    int32 get_minus_votes() const {
      const Json::Value& storage = Storage("minus_votes");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>minus_votes</code>' attribute.
     * @param[in] value The new value.
     */
    void set_minus_votes(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("minus_votes"));
    }

    /**
     * Determine if the '<code>none_votes</code>' attribute was set.
     *
     * @return true if the '<code>none_votes</code>' attribute was set.
     */
    bool has_none_votes() const {
      return Storage().isMember("none_votes");
    }

    /**
     * Clears the '<code>none_votes</code>' attribute.
     */
    void clear_none_votes() {
      MutableStorage()->removeMember("none_votes");
    }


    /**
     * Get the value of the '<code>none_votes</code>' attribute.
     */
    int32 get_none_votes() const {
      const Json::Value& storage = Storage("none_votes");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>none_votes</code>' attribute.
     * @param[in] value The new value.
     */
    void set_none_votes(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("none_votes"));
    }

    /**
     * Determine if the '<code>plus_votes</code>' attribute was set.
     *
     * @return true if the '<code>plus_votes</code>' attribute was set.
     */
    bool has_plus_votes() const {
      return Storage().isMember("plus_votes");
    }

    /**
     * Clears the '<code>plus_votes</code>' attribute.
     */
    void clear_plus_votes() {
      MutableStorage()->removeMember("plus_votes");
    }


    /**
     * Get the value of the '<code>plus_votes</code>' attribute.
     */
    int32 get_plus_votes() const {
      const Json::Value& storage = Storage("plus_votes");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>plus_votes</code>' attribute.
     * @param[in] value The new value.
     */
    void set_plus_votes(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("plus_votes"));
    }

   private:
    void operator=(const SubmissionCounters&);
  };  // SubmissionCounters
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class SubmissionId : public googleapis_client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static SubmissionId* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit SubmissionId(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit SubmissionId(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~SubmissionId();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_kitch_sink_api::SubmissionId</code>
     */
    const char* GetTypeName() const {
      return "google_kitch_sink_api::SubmissionId";
    }

    /**
     * Determine if the '<code>seriesId</code>' attribute was set.
     *
     * @return true if the '<code>seriesId</code>' attribute was set.
     */
    bool has_series_id() const {
      return Storage().isMember("seriesId");
    }

    /**
     * Clears the '<code>seriesId</code>' attribute.
     */
    void clear_series_id() {
      MutableStorage()->removeMember("seriesId");
    }


    /**
     * Get the value of the '<code>seriesId</code>' attribute.
     */
    int32 get_series_id() const {
      const Json::Value& storage = Storage("seriesId");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>seriesId</code>' attribute.
     * @param[in] value The new value.
     */
    void set_series_id(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("seriesId"));
    }

    /**
     * Determine if the '<code>submissionId</code>' attribute was set.
     *
     * @return true if the '<code>submissionId</code>' attribute was set.
     */
    bool has_submission_id() const {
      return Storage().isMember("submissionId");
    }

    /**
     * Clears the '<code>submissionId</code>' attribute.
     */
    void clear_submission_id() {
      MutableStorage()->removeMember("submissionId");
    }


    /**
     * Get the value of the '<code>submissionId</code>' attribute.
     */
    int32 get_submission_id() const {
      const Json::Value& storage = Storage("submissionId");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>submissionId</code>' attribute.
     * @param[in] value The new value.
     */
    void set_submission_id(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("submissionId"));
    }

   private:
    void operator=(const SubmissionId&);
  };  // SubmissionId
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class SubmissionParentSubmissionId : public googleapis_client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static SubmissionParentSubmissionId* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit SubmissionParentSubmissionId(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit SubmissionParentSubmissionId(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~SubmissionParentSubmissionId();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_kitch_sink_api::SubmissionParentSubmissionId</code>
     */
    const char* GetTypeName() const {
      return "google_kitch_sink_api::SubmissionParentSubmissionId";
    }

    /**
     * Determine if the '<code>seriesId</code>' attribute was set.
     *
     * @return true if the '<code>seriesId</code>' attribute was set.
     */
    bool has_series_id() const {
      return Storage().isMember("seriesId");
    }

    /**
     * Clears the '<code>seriesId</code>' attribute.
     */
    void clear_series_id() {
      MutableStorage()->removeMember("seriesId");
    }


    /**
     * Get the value of the '<code>seriesId</code>' attribute.
     */
    int32 get_series_id() const {
      const Json::Value& storage = Storage("seriesId");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>seriesId</code>' attribute.
     * @param[in] value The new value.
     */
    void set_series_id(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("seriesId"));
    }

    /**
     * Determine if the '<code>submissionId</code>' attribute was set.
     *
     * @return true if the '<code>submissionId</code>' attribute was set.
     */
    bool has_submission_id() const {
      return Storage().isMember("submissionId");
    }

    /**
     * Clears the '<code>submissionId</code>' attribute.
     */
    void clear_submission_id() {
      MutableStorage()->removeMember("submissionId");
    }


    /**
     * Get the value of the '<code>submissionId</code>' attribute.
     */
    int32 get_submission_id() const {
      const Json::Value& storage = Storage("submissionId");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>submissionId</code>' attribute.
     * @param[in] value The new value.
     */
    void set_submission_id(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("submissionId"));
    }

   private:
    void operator=(const SubmissionParentSubmissionId&);
  };  // SubmissionParentSubmissionId
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Submission* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Submission(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Submission(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Submission();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::Submission</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::Submission";
  }

  /**
   * Determine if the '<code>@attachmentUrl</code>' attribute was set.
   *
   * @return true if the '<code>@attachmentUrl</code>' attribute was set.
   */
  bool has_attachment_url() const {
    return Storage().isMember("@attachmentUrl");
  }

  /**
   * Clears the '<code>@attachmentUrl</code>' attribute.
   */
  void clear_attachment_url() {
    MutableStorage()->removeMember("@attachmentUrl");
  }


  /**
   * Get the value of the '<code>@attachmentUrl</code>' attribute.
   */
  const StringPiece get_attachment_url() const {
    const Json::Value& v = Storage("@attachmentUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>@attachmentUrl</code>' attribute.
   * @param[in] value The new value.
   */
  void set_attachment_url(const StringPiece& value) {
    *MutableStorage("@attachmentUrl") = value.data();
  }

  /**
   * Determine if the '<code>attribution</code>' attribute was set.
   *
   * @return true if the '<code>attribution</code>' attribute was set.
   */
  bool has_attribution() const {
    return Storage().isMember("attribution");
  }

  /**
   * Clears the '<code>attribution</code>' attribute.
   */
  void clear_attribution() {
    MutableStorage()->removeMember("attribution");
  }


  /**
   * Get a reference to the value of the '<code>attribution</code>' attribute.
   */
  const SubmissionAttribution get_attribution() const {
     const Json::Value& storage = Storage("attribution");
    return googleapis_client::JsonValueToCppValueHelper<SubmissionAttribution >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>attribution</code>'
   * property.
   * @return The result can be modified to change the attribute value.
   */
  SubmissionAttribution mutable_attribution() {
    Json::Value* storage = MutableStorage("attribution");
    return googleapis_client::JsonValueToMutableCppValueHelper<SubmissionAttribution >(storage);
  }

  /**
   * Determine if the '<code>author</code>' attribute was set.
   *
   * @return true if the '<code>author</code>' attribute was set.
   */
  bool has_author() const {
    return Storage().isMember("author");
  }

  /**
   * Clears the '<code>author</code>' attribute.
   */
  void clear_author() {
    MutableStorage()->removeMember("author");
  }


  /**
   * Get the value of the '<code>author</code>' attribute.
   */
  const StringPiece get_author() const {
    const Json::Value& v = Storage("author");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>author</code>' attribute.
   * @param[in] value The new value.
   */
  void set_author(const StringPiece& value) {
    *MutableStorage("author") = value.data();
  }

  /**
   * Determine if the '<code>counters</code>' attribute was set.
   *
   * @return true if the '<code>counters</code>' attribute was set.
   */
  bool has_counters() const {
    return Storage().isMember("counters");
  }

  /**
   * Clears the '<code>counters</code>' attribute.
   */
  void clear_counters() {
    MutableStorage()->removeMember("counters");
  }


  /**
   * Get a reference to the value of the '<code>counters</code>' attribute.
   */
  const SubmissionCounters get_counters() const {
     const Json::Value& storage = Storage("counters");
    return googleapis_client::JsonValueToCppValueHelper<SubmissionCounters >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>counters</code>'
   * property.
   * @return The result can be modified to change the attribute value.
   */
  SubmissionCounters mutable_counters() {
    Json::Value* storage = MutableStorage("counters");
    return googleapis_client::JsonValueToMutableCppValueHelper<SubmissionCounters >(storage);
  }

  /**
   * Determine if the '<code>created</code>' attribute was set.
   *
   * @return true if the '<code>created</code>' attribute was set.
   */
  bool has_created() const {
    return Storage().isMember("created");
  }

  /**
   * Clears the '<code>created</code>' attribute.
   */
  void clear_created() {
    MutableStorage()->removeMember("created");
  }


  /**
   * Get the value of the '<code>created</code>' attribute.
   */
  int32 get_created() const {
    const Json::Value& storage = Storage("created");
    return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>created</code>' attribute.
   * @param[in] value The new value.
   */
  void set_created(int32 value) {
    googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("created"));
  }

  /**
   * Determine if the '<code>geo</code>' attribute was set.
   *
   * @return true if the '<code>geo</code>' attribute was set.
   */
  bool has_geo() const {
    return Storage().isMember("geo");
  }

  /**
   * Clears the '<code>geo</code>' attribute.
   */
  void clear_geo() {
    MutableStorage()->removeMember("geo");
  }


  /**
   * Get a reference to the value of the '<code>geo</code>' attribute.
   */
  const googleapis_client::JsonCppArray<LatLong > get_geo() const;

  /**
   * Gets a reference to a mutable value of the '<code>geo</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  googleapis_client::JsonCppArray<LatLong > mutable_geo();

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get a reference to the value of the '<code>id</code>' attribute.
   */
  const SubmissionId get_id() const {
     const Json::Value& storage = Storage("id");
    return googleapis_client::JsonValueToCppValueHelper<SubmissionId >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>id</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  SubmissionId mutable_id() {
    Json::Value* storage = MutableStorage("id");
    return googleapis_client::JsonValueToMutableCppValueHelper<SubmissionId >(storage);
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>parentSubmissionId</code>' attribute was set.
   *
   * @return true if the '<code>parentSubmissionId</code>' attribute was set.
   */
  bool has_parent_submission_id() const {
    return Storage().isMember("parentSubmissionId");
  }

  /**
   * Clears the '<code>parentSubmissionId</code>' attribute.
   */
  void clear_parent_submission_id() {
    MutableStorage()->removeMember("parentSubmissionId");
  }


  /**
   * Get a reference to the value of the '<code>parentSubmissionId</code>'
   * attribute.
   */
  const SubmissionParentSubmissionId get_parent_submission_id() const {
     const Json::Value& storage = Storage("parentSubmissionId");
    return googleapis_client::JsonValueToCppValueHelper<SubmissionParentSubmissionId >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>parentSubmissionId</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  SubmissionParentSubmissionId mutable_parentSubmissionId() {
    Json::Value* storage = MutableStorage("parentSubmissionId");
    return googleapis_client::JsonValueToMutableCppValueHelper<SubmissionParentSubmissionId >(storage);
  }

  /**
   * Determine if the '<code>text</code>' attribute was set.
   *
   * @return true if the '<code>text</code>' attribute was set.
   */
  bool has_text() const {
    return Storage().isMember("text");
  }

  /**
   * Clears the '<code>text</code>' attribute.
   */
  void clear_text() {
    MutableStorage()->removeMember("text");
  }


  /**
   * Get the value of the '<code>text</code>' attribute.
   */
  const StringPiece get_text() const {
    const Json::Value& v = Storage("text");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>text</code>' attribute.
   * @param[in] value The new value.
   */
  void set_text(const StringPiece& value) {
    *MutableStorage("text") = value.data();
  }

  /**
   * Determine if the '<code>topics</code>' attribute was set.
   *
   * @return true if the '<code>topics</code>' attribute was set.
   */
  bool has_topics() const {
    return Storage().isMember("topics");
  }

  /**
   * Clears the '<code>topics</code>' attribute.
   */
  void clear_topics() {
    MutableStorage()->removeMember("topics");
  }


  /**
   * Get a reference to the value of the '<code>topics</code>' attribute.
   */
  const googleapis_client::JsonCppArray<ModeratorTopicsResourcePartial > get_topics() const;

  /**
   * Gets a reference to a mutable value of the '<code>topics</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  googleapis_client::JsonCppArray<ModeratorTopicsResourcePartial > mutable_topics();

  /**
   * Determine if the '<code>translations</code>' attribute was set.
   *
   * @return true if the '<code>translations</code>' attribute was set.
   */
  bool has_translations() const {
    return Storage().isMember("translations");
  }

  /**
   * Clears the '<code>translations</code>' attribute.
   */
  void clear_translations() {
    MutableStorage()->removeMember("translations");
  }


  /**
   * Get a reference to the value of the '<code>translations</code>' attribute.
   */
  const googleapis_client::JsonCppAssociativeArray<Translation > get_translations() const;

  /**
   * Gets a reference to a mutable value of the '<code>translations</code>'
   * property.
   * @return The result can be modified to change the attribute value.
   */
  googleapis_client::JsonCppAssociativeArray<Translation > mutable_translations();

 private:
  void operator=(const Submission&);
};  // Submission
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_SUBMISSION_H_
=== end: ./google/kitch_sink_api/submission.h
=== begin: ./google/kitch_sink_api/submission_list.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   SubmissionList
// Documentation:
//   

#include "google/kitch_sink_api/submission_list.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/submission.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {


// Object factory method (static).
SubmissionList* SubmissionList::New() {
  return new googleapis_client::JsonCppCapsule<SubmissionList>;
}

// Standard immutable constructor.
SubmissionList::SubmissionList(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
SubmissionList::SubmissionList(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
SubmissionList::~SubmissionList() {
}

// Properties.

const googleapis_client::JsonCppArray<Submission > SubmissionList::get_items() const {
   const Json::Value& storage = Storage("items");
   return googleapis_client::JsonValueToCppValueHelper<googleapis_client::JsonCppArray<Submission > >(storage);
}

googleapis_client::JsonCppArray<Submission > SubmissionList::mutable_items() {
  Json::Value* storage = MutableStorage("items");
  return googleapis_client::JsonValueToMutableCppValueHelper<googleapis_client::JsonCppArray<Submission > >(storage);
}
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/submission_list.cc
=== begin: ./google/kitch_sink_api/submission_list.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_SUBMISSION_LIST_H_
#define  GOOGLE_KITCH_SINK_API_SUBMISSION_LIST_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/submission.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class SubmissionList : public googleapis_client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static SubmissionList* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit SubmissionList(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit SubmissionList(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~SubmissionList();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::SubmissionList</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::SubmissionList";
  }

  /**
   * Determine if the '<code>items</code>' attribute was set.
   *
   * @return true if the '<code>items</code>' attribute was set.
   */
  bool has_items() const {
    return Storage().isMember("items");
  }

  /**
   * Clears the '<code>items</code>' attribute.
   */
  void clear_items() {
    MutableStorage()->removeMember("items");
  }


  /**
   * Get a reference to the value of the '<code>items</code>' attribute.
   */
  const googleapis_client::JsonCppArray<Submission > get_items() const;

  /**
   * Gets a reference to a mutable value of the '<code>items</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  googleapis_client::JsonCppArray<Submission > mutable_items();

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

 private:
  void operator=(const SubmissionList&);
};  // SubmissionList
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_SUBMISSION_LIST_H_
=== end: ./google/kitch_sink_api/submission_list.h
=== begin: ./google/kitch_sink_api/tag.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   Tag
// Documentation:
//   

#include "google/kitch_sink_api/tag.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/integral_types.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/geometry.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {



// Object factory method (static).
Tag::TagId* Tag::TagId::New() {
  return new googleapis_client::JsonCppCapsule<TagId>;
}

// Standard immutable constructor.
Tag::TagId::TagId(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Tag::TagId::TagId(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Tag::TagId::~TagId() {
}

// Properties.
// Object factory method (static).
Tag* Tag::New() {
  return new googleapis_client::JsonCppCapsule<Tag>;
}

// Standard immutable constructor.
Tag::Tag(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Tag::Tag(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Tag::~Tag() {
}

// Properties.

const Geometry Tag::get_geometry() const {
   const Json::Value& storage = Storage("geometry");
   return googleapis_client::JsonValueToCppValueHelper<Geometry >(storage);
}

Geometry Tag::mutable_geometry() {
  Json::Value* storage = MutableStorage("geometry");
  return googleapis_client::JsonValueToMutableCppValueHelper<Geometry >(storage);
}
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/tag.cc
=== begin: ./google/kitch_sink_api/tag.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_TAG_H_
#define  GOOGLE_KITCH_SINK_API_TAG_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/integral_types.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/geometry.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class Tag : public googleapis_client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class TagId : public googleapis_client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static TagId* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TagId(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TagId(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~TagId();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_kitch_sink_api::TagId</code>
     */
    const char* GetTypeName() const {
      return "google_kitch_sink_api::TagId";
    }

    /**
     * Determine if the '<code>seriesId</code>' attribute was set.
     *
     * @return true if the '<code>seriesId</code>' attribute was set.
     */
    bool has_series_id() const {
      return Storage().isMember("seriesId");
    }

    /**
     * Clears the '<code>seriesId</code>' attribute.
     */
    void clear_series_id() {
      MutableStorage()->removeMember("seriesId");
    }


    /**
     * Get the value of the '<code>seriesId</code>' attribute.
     */
    int32 get_series_id() const {
      const Json::Value& storage = Storage("seriesId");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>seriesId</code>' attribute.
     * @param[in] value The new value.
     */
    void set_series_id(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("seriesId"));
    }

    /**
     * Determine if the '<code>submissionId</code>' attribute was set.
     *
     * @return true if the '<code>submissionId</code>' attribute was set.
     */
    bool has_submission_id() const {
      return Storage().isMember("submissionId");
    }

    /**
     * Clears the '<code>submissionId</code>' attribute.
     */
    void clear_submission_id() {
      MutableStorage()->removeMember("submissionId");
    }


    /**
     * Get the value of the '<code>submissionId</code>' attribute.
     */
    int32 get_submission_id() const {
      const Json::Value& storage = Storage("submissionId");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>submissionId</code>' attribute.
     * @param[in] value The new value.
     */
    void set_submission_id(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("submissionId"));
    }

    /**
     * Determine if the '<code>tag</code>' attribute was set.
     *
     * @return true if the '<code>tag</code>' attribute was set.
     */
    bool has_tag() const {
      return Storage().isMember("tag");
    }

    /**
     * Clears the '<code>tag</code>' attribute.
     */
    void clear_tag() {
      MutableStorage()->removeMember("tag");
    }


    /**
     * Get the value of the '<code>tag</code>' attribute.
     */
    const StringPiece get_tag() const {
      const Json::Value& v = Storage("tag");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>tag</code>' attribute.
     * @param[in] value The new value.
     */
    void set_tag(const StringPiece& value) {
      *MutableStorage("tag") = value.data();
    }

   private:
    void operator=(const TagId&);
  };  // TagId
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Tag* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Tag(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Tag(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Tag();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::Tag</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::Tag";
  }

  /**
   * Determine if the '<code>geometry</code>' attribute was set.
   *
   * @return true if the '<code>geometry</code>' attribute was set.
   */
  bool has_geometry() const {
    return Storage().isMember("geometry");
  }

  /**
   * Clears the '<code>geometry</code>' attribute.
   */
  void clear_geometry() {
    MutableStorage()->removeMember("geometry");
  }


  /**
   * Get a reference to the value of the '<code>geometry</code>' attribute.
   */
  const Geometry get_geometry() const;

  /**
   * Gets a reference to a mutable value of the '<code>geometry</code>'
   * property.
   * @return The result can be modified to change the attribute value.
   */
  Geometry mutable_geometry();

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get a reference to the value of the '<code>id</code>' attribute.
   */
  const TagId get_id() const {
     const Json::Value& storage = Storage("id");
    return googleapis_client::JsonValueToCppValueHelper<TagId >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>id</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  TagId mutable_id() {
    Json::Value* storage = MutableStorage("id");
    return googleapis_client::JsonValueToMutableCppValueHelper<TagId >(storage);
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>text</code>' attribute was set.
   *
   * @return true if the '<code>text</code>' attribute was set.
   */
  bool has_text() const {
    return Storage().isMember("text");
  }

  /**
   * Clears the '<code>text</code>' attribute.
   */
  void clear_text() {
    MutableStorage()->removeMember("text");
  }


  /**
   * Get the value of the '<code>text</code>' attribute.
   */
  const StringPiece get_text() const {
    const Json::Value& v = Storage("text");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>text</code>' attribute.
   * @param[in] value The new value.
   */
  void set_text(const StringPiece& value) {
    *MutableStorage("text") = value.data();
  }

 private:
  void operator=(const Tag&);
};  // Tag
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_TAG_H_
=== end: ./google/kitch_sink_api/tag.h
=== begin: ./google/kitch_sink_api/tag_list.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   TagList
// Documentation:
//   

#include "google/kitch_sink_api/tag_list.h"
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "strings/stringpiece.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {


// Object factory method (static).
TagList* TagList::New() {
  return new googleapis_client::JsonCppCapsule<TagList>;
}

// Standard immutable constructor.
TagList::TagList(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
TagList::TagList(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
TagList::~TagList() {
}
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/tag_list.cc
=== begin: ./google/kitch_sink_api/tag_list.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_TAG_LIST_H_
#define  GOOGLE_KITCH_SINK_API_TAG_LIST_H_

#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class TagList : public googleapis_client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static TagList* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TagList(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TagList(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~TagList();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::TagList</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::TagList";
  }

 private:
  void operator=(const TagList&);
};  // TagList
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_TAG_LIST_H_
=== end: ./google/kitch_sink_api/tag_list.h
=== begin: ./google/kitch_sink_api/topic2.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   Topic2
// Documentation:
//   

#include "google/kitch_sink_api/topic2.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/integral_types.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/rule.h"
#include "google/kitch_sink_api/submission.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {



// Object factory method (static).
Topic2::Topic2Counters* Topic2::Topic2Counters::New() {
  return new googleapis_client::JsonCppCapsule<Topic2Counters>;
}

// Standard immutable constructor.
Topic2::Topic2Counters::Topic2Counters(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Topic2::Topic2Counters::Topic2Counters(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Topic2::Topic2Counters::~Topic2Counters() {
}

// Properties.

// Object factory method (static).
Topic2::Topic2Id* Topic2::Topic2Id::New() {
  return new googleapis_client::JsonCppCapsule<Topic2Id>;
}

// Standard immutable constructor.
Topic2::Topic2Id::Topic2Id(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Topic2::Topic2Id::Topic2Id(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Topic2::Topic2Id::~Topic2Id() {
}

// Properties.
// Object factory method (static).
Topic2* Topic2::New() {
  return new googleapis_client::JsonCppCapsule<Topic2>;
}

// Standard immutable constructor.
Topic2::Topic2(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Topic2::Topic2(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Topic2::~Topic2() {
}

// Properties.

const Submission Topic2::get_featured_submission() const {
   const Json::Value& storage = Storage("featuredSubmission");
   return googleapis_client::JsonValueToCppValueHelper<Submission >(storage);
}

Submission Topic2::mutable_featuredSubmission() {
  Json::Value* storage = MutableStorage("featuredSubmission");
  return googleapis_client::JsonValueToMutableCppValueHelper<Submission >(storage);
}

const googleapis_client::JsonCppArray<Rule > Topic2::get_rules() const {
   const Json::Value& storage = Storage("rules");
   return googleapis_client::JsonValueToCppValueHelper<googleapis_client::JsonCppArray<Rule > >(storage);
}

googleapis_client::JsonCppArray<Rule > Topic2::mutable_rules() {
  Json::Value* storage = MutableStorage("rules");
  return googleapis_client::JsonValueToMutableCppValueHelper<googleapis_client::JsonCppArray<Rule > >(storage);
}
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/topic2.cc
=== begin: ./google/kitch_sink_api/topic2.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_TOPIC2_H_
#define  GOOGLE_KITCH_SINK_API_TOPIC2_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/integral_types.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/rule.h"
#include "google/kitch_sink_api/submission.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class Topic2 : public googleapis_client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class Topic2Counters : public googleapis_client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static Topic2Counters* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit Topic2Counters(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit Topic2Counters(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~Topic2Counters();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_kitch_sink_api::Topic2Counters</code>
     */
    const char* GetTypeName() const {
      return "google_kitch_sink_api::Topic2Counters";
    }

    /**
     * Determine if the '<code>minus_votes</code>' attribute was set.
     *
     * @return true if the '<code>minus_votes</code>' attribute was set.
     */
    bool has_minus_votes() const {
      return Storage().isMember("minus_votes");
    }

    /**
     * Clears the '<code>minus_votes</code>' attribute.
     */
    void clear_minus_votes() {
      MutableStorage()->removeMember("minus_votes");
    }


    /**
     * Get the value of the '<code>minus_votes</code>' attribute.
     */
    int32 get_minus_votes() const {
      const Json::Value& storage = Storage("minus_votes");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>minus_votes</code>' attribute.
     * @param[in] value The new value.
     */
    void set_minus_votes(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("minus_votes"));
    }

    /**
     * Determine if the '<code>none_votes</code>' attribute was set.
     *
     * @return true if the '<code>none_votes</code>' attribute was set.
     */
    bool has_none_votes() const {
      return Storage().isMember("none_votes");
    }

    /**
     * Clears the '<code>none_votes</code>' attribute.
     */
    void clear_none_votes() {
      MutableStorage()->removeMember("none_votes");
    }


    /**
     * Get the value of the '<code>none_votes</code>' attribute.
     */
    int32 get_none_votes() const {
      const Json::Value& storage = Storage("none_votes");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>none_votes</code>' attribute.
     * @param[in] value The new value.
     */
    void set_none_votes(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("none_votes"));
    }

    /**
     * Determine if the '<code>plus_votes</code>' attribute was set.
     *
     * @return true if the '<code>plus_votes</code>' attribute was set.
     */
    bool has_plus_votes() const {
      return Storage().isMember("plus_votes");
    }

    /**
     * Clears the '<code>plus_votes</code>' attribute.
     */
    void clear_plus_votes() {
      MutableStorage()->removeMember("plus_votes");
    }


    /**
     * Get the value of the '<code>plus_votes</code>' attribute.
     */
    int32 get_plus_votes() const {
      const Json::Value& storage = Storage("plus_votes");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>plus_votes</code>' attribute.
     * @param[in] value The new value.
     */
    void set_plus_votes(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("plus_votes"));
    }

    /**
     * Determine if the '<code>submissions</code>' attribute was set.
     *
     * @return true if the '<code>submissions</code>' attribute was set.
     */
    bool has_submissions() const {
      return Storage().isMember("submissions");
    }

    /**
     * Clears the '<code>submissions</code>' attribute.
     */
    void clear_submissions() {
      MutableStorage()->removeMember("submissions");
    }


    /**
     * Get the value of the '<code>submissions</code>' attribute.
     */
    int32 get_submissions() const {
      const Json::Value& storage = Storage("submissions");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>submissions</code>' attribute.
     * @param[in] value The new value.
     */
    void set_submissions(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("submissions"));
    }

    /**
     * Determine if the '<code>users</code>' attribute was set.
     *
     * @return true if the '<code>users</code>' attribute was set.
     */
    bool has_users() const {
      return Storage().isMember("users");
    }

    /**
     * Clears the '<code>users</code>' attribute.
     */
    void clear_users() {
      MutableStorage()->removeMember("users");
    }


    /**
     * Get the value of the '<code>users</code>' attribute.
     */
    int32 get_users() const {
      const Json::Value& storage = Storage("users");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>users</code>' attribute.
     * @param[in] value The new value.
     */
    void set_users(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("users"));
    }

    /**
     * Determine if the '<code>videoSubmissions</code>' attribute was set.
     *
     * @return true if the '<code>videoSubmissions</code>' attribute was set.
     */
    bool has_video_submissions() const {
      return Storage().isMember("videoSubmissions");
    }

    /**
     * Clears the '<code>videoSubmissions</code>' attribute.
     */
    void clear_video_submissions() {
      MutableStorage()->removeMember("videoSubmissions");
    }


    /**
     * Get the value of the '<code>videoSubmissions</code>' attribute.
     */
    int32 get_video_submissions() const {
      const Json::Value& storage = Storage("videoSubmissions");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>videoSubmissions</code>' attribute.
     * @param[in] value The new value.
     */
    void set_video_submissions(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("videoSubmissions"));
    }

   private:
    void operator=(const Topic2Counters&);
  };  // Topic2Counters
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class Topic2Id : public googleapis_client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static Topic2Id* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit Topic2Id(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit Topic2Id(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~Topic2Id();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_kitch_sink_api::Topic2Id</code>
     */
    const char* GetTypeName() const {
      return "google_kitch_sink_api::Topic2Id";
    }

    /**
     * Determine if the '<code>seriesId</code>' attribute was set.
     *
     * @return true if the '<code>seriesId</code>' attribute was set.
     */
    bool has_series_id() const {
      return Storage().isMember("seriesId");
    }

    /**
     * Clears the '<code>seriesId</code>' attribute.
     */
    void clear_series_id() {
      MutableStorage()->removeMember("seriesId");
    }


    /**
     * Get the value of the '<code>seriesId</code>' attribute.
     */
    int32 get_series_id() const {
      const Json::Value& storage = Storage("seriesId");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>seriesId</code>' attribute.
     * @param[in] value The new value.
     */
    void set_series_id(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("seriesId"));
    }

    /**
     * Determine if the '<code>topicId</code>' attribute was set.
     *
     * @return true if the '<code>topicId</code>' attribute was set.
     */
    bool has_topic_id() const {
      return Storage().isMember("topicId");
    }

    /**
     * Clears the '<code>topicId</code>' attribute.
     */
    void clear_topic_id() {
      MutableStorage()->removeMember("topicId");
    }


    /**
     * Get the value of the '<code>topicId</code>' attribute.
     */
    int32 get_topic_id() const {
      const Json::Value& storage = Storage("topicId");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>topicId</code>' attribute.
     * @param[in] value The new value.
     */
    void set_topic_id(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("topicId"));
    }

   private:
    void operator=(const Topic2Id&);
  };  // Topic2Id
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Topic2* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Topic2(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Topic2(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Topic2();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::Topic2</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::Topic2";
  }

  /**
   * Determine if the '<code>counters</code>' attribute was set.
   *
   * @return true if the '<code>counters</code>' attribute was set.
   */
  bool has_counters() const {
    return Storage().isMember("counters");
  }

  /**
   * Clears the '<code>counters</code>' attribute.
   */
  void clear_counters() {
    MutableStorage()->removeMember("counters");
  }


  /**
   * Get a reference to the value of the '<code>counters</code>' attribute.
   */
  const Topic2Counters get_counters() const {
     const Json::Value& storage = Storage("counters");
    return googleapis_client::JsonValueToCppValueHelper<Topic2Counters >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>counters</code>'
   * property.
   * @return The result can be modified to change the attribute value.
   */
  Topic2Counters mutable_counters() {
    Json::Value* storage = MutableStorage("counters");
    return googleapis_client::JsonValueToMutableCppValueHelper<Topic2Counters >(storage);
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>featuredSubmission</code>' attribute was set.
   *
   * @return true if the '<code>featuredSubmission</code>' attribute was set.
   */
  bool has_featured_submission() const {
    return Storage().isMember("featuredSubmission");
  }

  /**
   * Clears the '<code>featuredSubmission</code>' attribute.
   */
  void clear_featured_submission() {
    MutableStorage()->removeMember("featuredSubmission");
  }


  /**
   * Get a reference to the value of the '<code>featuredSubmission</code>'
   * attribute.
   */
  const Submission get_featured_submission() const;

  /**
   * Gets a reference to a mutable value of the
   * '<code>featuredSubmission</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  Submission mutable_featuredSubmission();

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get a reference to the value of the '<code>id</code>' attribute.
   */
  const Topic2Id get_id() const {
     const Json::Value& storage = Storage("id");
    return googleapis_client::JsonValueToCppValueHelper<Topic2Id >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>id</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  Topic2Id mutable_id() {
    Json::Value* storage = MutableStorage("id");
    return googleapis_client::JsonValueToMutableCppValueHelper<Topic2Id >(storage);
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>presenter</code>' attribute was set.
   *
   * @return true if the '<code>presenter</code>' attribute was set.
   */
  bool has_presenter() const {
    return Storage().isMember("presenter");
  }

  /**
   * Clears the '<code>presenter</code>' attribute.
   */
  void clear_presenter() {
    MutableStorage()->removeMember("presenter");
  }


  /**
   * Get the value of the '<code>presenter</code>' attribute.
   */
  const StringPiece get_presenter() const {
    const Json::Value& v = Storage("presenter");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>presenter</code>' attribute.
   * @param[in] value The new value.
   */
  void set_presenter(const StringPiece& value) {
    *MutableStorage("presenter") = value.data();
  }

  /**
   * Determine if the '<code>rules</code>' attribute was set.
   *
   * @return true if the '<code>rules</code>' attribute was set.
   */
  bool has_rules() const {
    return Storage().isMember("rules");
  }

  /**
   * Clears the '<code>rules</code>' attribute.
   */
  void clear_rules() {
    MutableStorage()->removeMember("rules");
  }


  /**
   * Get a reference to the value of the '<code>rules</code>' attribute.
   */
  const googleapis_client::JsonCppArray<Rule > get_rules() const;

  /**
   * Gets a reference to a mutable value of the '<code>rules</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  googleapis_client::JsonCppArray<Rule > mutable_rules();

 private:
  void operator=(const Topic2&);
};  // Topic2
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_TOPIC2_H_
=== end: ./google/kitch_sink_api/topic2.h
=== begin: ./google/kitch_sink_api/topic.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   Topic
// Documentation:
//   

#include "google/kitch_sink_api/topic.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/integral_types.h"
#include "strings/stringpiece.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {



// Object factory method (static).
Topic::TopicCounters* Topic::TopicCounters::New() {
  return new googleapis_client::JsonCppCapsule<TopicCounters>;
}

// Standard immutable constructor.
Topic::TopicCounters::TopicCounters(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Topic::TopicCounters::TopicCounters(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Topic::TopicCounters::~TopicCounters() {
}

// Properties.

// Object factory method (static).
Topic::TopicId* Topic::TopicId::New() {
  return new googleapis_client::JsonCppCapsule<TopicId>;
}

// Standard immutable constructor.
Topic::TopicId::TopicId(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Topic::TopicId::TopicId(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Topic::TopicId::~TopicId() {
}

// Properties.


// Object factory method (static).
Topic::TopicRules::TopicRulesSubmissions* Topic::TopicRules::TopicRulesSubmissions::New() {
  return new googleapis_client::JsonCppCapsule<TopicRulesSubmissions>;
}

// Standard immutable constructor.
Topic::TopicRules::TopicRulesSubmissions::TopicRulesSubmissions(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Topic::TopicRules::TopicRulesSubmissions::TopicRulesSubmissions(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Topic::TopicRules::TopicRulesSubmissions::~TopicRulesSubmissions() {
}

// Properties.

// Object factory method (static).
Topic::TopicRules::TopicRulesVotes* Topic::TopicRules::TopicRulesVotes::New() {
  return new googleapis_client::JsonCppCapsule<TopicRulesVotes>;
}

// Standard immutable constructor.
Topic::TopicRules::TopicRulesVotes::TopicRulesVotes(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Topic::TopicRules::TopicRulesVotes::TopicRulesVotes(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Topic::TopicRules::TopicRulesVotes::~TopicRulesVotes() {
}

// Properties.
// Object factory method (static).
Topic::TopicRules* Topic::TopicRules::New() {
  return new googleapis_client::JsonCppCapsule<TopicRules>;
}

// Standard immutable constructor.
Topic::TopicRules::TopicRules(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Topic::TopicRules::TopicRules(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Topic::TopicRules::~TopicRules() {
}

// Properties.
// Object factory method (static).
Topic* Topic::New() {
  return new googleapis_client::JsonCppCapsule<Topic>;
}

// Standard immutable constructor.
Topic::Topic(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Topic::Topic(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Topic::~Topic() {
}

// Properties.
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/topic.cc
=== begin: ./google/kitch_sink_api/topic.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_TOPIC_H_
#define  GOOGLE_KITCH_SINK_API_TOPIC_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/integral_types.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class Topic : public googleapis_client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class TopicCounters : public googleapis_client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static TopicCounters* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TopicCounters(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TopicCounters(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~TopicCounters();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_kitch_sink_api::TopicCounters</code>
     */
    const char* GetTypeName() const {
      return "google_kitch_sink_api::TopicCounters";
    }

    /**
     * Determine if the '<code>minus_votes</code>' attribute was set.
     *
     * @return true if the '<code>minus_votes</code>' attribute was set.
     */
    bool has_minus_votes() const {
      return Storage().isMember("minus_votes");
    }

    /**
     * Clears the '<code>minus_votes</code>' attribute.
     */
    void clear_minus_votes() {
      MutableStorage()->removeMember("minus_votes");
    }


    /**
     * Get the value of the '<code>minus_votes</code>' attribute.
     */
    int32 get_minus_votes() const {
      const Json::Value& storage = Storage("minus_votes");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>minus_votes</code>' attribute.
     * @param[in] value The new value.
     */
    void set_minus_votes(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("minus_votes"));
    }

    /**
     * Determine if the '<code>none_votes</code>' attribute was set.
     *
     * @return true if the '<code>none_votes</code>' attribute was set.
     */
    bool has_none_votes() const {
      return Storage().isMember("none_votes");
    }

    /**
     * Clears the '<code>none_votes</code>' attribute.
     */
    void clear_none_votes() {
      MutableStorage()->removeMember("none_votes");
    }


    /**
     * Get the value of the '<code>none_votes</code>' attribute.
     */
    int32 get_none_votes() const {
      const Json::Value& storage = Storage("none_votes");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>none_votes</code>' attribute.
     * @param[in] value The new value.
     */
    void set_none_votes(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("none_votes"));
    }

    /**
     * Determine if the '<code>plus_votes</code>' attribute was set.
     *
     * @return true if the '<code>plus_votes</code>' attribute was set.
     */
    bool has_plus_votes() const {
      return Storage().isMember("plus_votes");
    }

    /**
     * Clears the '<code>plus_votes</code>' attribute.
     */
    void clear_plus_votes() {
      MutableStorage()->removeMember("plus_votes");
    }


    /**
     * Get the value of the '<code>plus_votes</code>' attribute.
     */
    int32 get_plus_votes() const {
      const Json::Value& storage = Storage("plus_votes");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>plus_votes</code>' attribute.
     * @param[in] value The new value.
     */
    void set_plus_votes(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("plus_votes"));
    }

    /**
     * Determine if the '<code>submissions</code>' attribute was set.
     *
     * @return true if the '<code>submissions</code>' attribute was set.
     */
    bool has_submissions() const {
      return Storage().isMember("submissions");
    }

    /**
     * Clears the '<code>submissions</code>' attribute.
     */
    void clear_submissions() {
      MutableStorage()->removeMember("submissions");
    }


    /**
     * Get the value of the '<code>submissions</code>' attribute.
     */
    int32 get_submissions() const {
      const Json::Value& storage = Storage("submissions");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>submissions</code>' attribute.
     * @param[in] value The new value.
     */
    void set_submissions(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("submissions"));
    }

    /**
     * Determine if the '<code>users</code>' attribute was set.
     *
     * @return true if the '<code>users</code>' attribute was set.
     */
    bool has_users() const {
      return Storage().isMember("users");
    }

    /**
     * Clears the '<code>users</code>' attribute.
     */
    void clear_users() {
      MutableStorage()->removeMember("users");
    }


    /**
     * Get the value of the '<code>users</code>' attribute.
     */
    int32 get_users() const {
      const Json::Value& storage = Storage("users");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>users</code>' attribute.
     * @param[in] value The new value.
     */
    void set_users(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("users"));
    }

    /**
     * Determine if the '<code>videoSubmissions</code>' attribute was set.
     *
     * @return true if the '<code>videoSubmissions</code>' attribute was set.
     */
    bool has_video_submissions() const {
      return Storage().isMember("videoSubmissions");
    }

    /**
     * Clears the '<code>videoSubmissions</code>' attribute.
     */
    void clear_video_submissions() {
      MutableStorage()->removeMember("videoSubmissions");
    }


    /**
     * Get the value of the '<code>videoSubmissions</code>' attribute.
     */
    int32 get_video_submissions() const {
      const Json::Value& storage = Storage("videoSubmissions");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>videoSubmissions</code>' attribute.
     * @param[in] value The new value.
     */
    void set_video_submissions(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("videoSubmissions"));
    }

   private:
    void operator=(const TopicCounters&);
  };  // TopicCounters
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class TopicId : public googleapis_client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static TopicId* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TopicId(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TopicId(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~TopicId();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_kitch_sink_api::TopicId</code>
     */
    const char* GetTypeName() const {
      return "google_kitch_sink_api::TopicId";
    }

    /**
     * Determine if the '<code>seriesId</code>' attribute was set.
     *
     * @return true if the '<code>seriesId</code>' attribute was set.
     */
    bool has_series_id() const {
      return Storage().isMember("seriesId");
    }

    /**
     * Clears the '<code>seriesId</code>' attribute.
     */
    void clear_series_id() {
      MutableStorage()->removeMember("seriesId");
    }


    /**
     * Get the value of the '<code>seriesId</code>' attribute.
     */
    int32 get_series_id() const {
      const Json::Value& storage = Storage("seriesId");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>seriesId</code>' attribute.
     * @param[in] value The new value.
     */
    void set_series_id(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("seriesId"));
    }

    /**
     * Determine if the '<code>topicId</code>' attribute was set.
     *
     * @return true if the '<code>topicId</code>' attribute was set.
     */
    bool has_topic_id() const {
      return Storage().isMember("topicId");
    }

    /**
     * Clears the '<code>topicId</code>' attribute.
     */
    void clear_topic_id() {
      MutableStorage()->removeMember("topicId");
    }


    /**
     * Get the value of the '<code>topicId</code>' attribute.
     */
    int32 get_topic_id() const {
      const Json::Value& storage = Storage("topicId");
      return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
    }

    /**
     * Change the '<code>topicId</code>' attribute.
     * @param[in] value The new value.
     */
    void set_topic_id(int32 value) {
      googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
        value, MutableStorage("topicId"));
    }

   private:
    void operator=(const TopicId&);
  };  // TopicId
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class TopicRules : public googleapis_client::JsonCppData {
   public:
    /**
     * No description provided.
     *
     * @ingroup DataObject
     */
    class TopicRulesSubmissions : public googleapis_client::JsonCppData {
     public:
      /**
       * Creates a new default instance.
       *
       * @return Ownership is passed back to the caller.
       */
      static TopicRulesSubmissions* New();

      /**
       * Standard constructor for an immutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit TopicRulesSubmissions(const Json::Value& storage);

      /**
       * Standard constructor for a mutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit TopicRulesSubmissions(Json::Value* storage);

      /**
       * Standard destructor.
       */
      virtual ~TopicRulesSubmissions();

      /**
       * Returns a string denoting the type of this data object.
       *
       * @return <code>google_kitch_sink_api::TopicRulesSubmissions</code>
       */
      const char* GetTypeName() const {
        return "google_kitch_sink_api::TopicRulesSubmissions";
      }

      /**
       * Determine if the '<code>close</code>' attribute was set.
       *
       * @return true if the '<code>close</code>' attribute was set.
       */
      bool has_close() const {
        return Storage().isMember("close");
      }

      /**
       * Clears the '<code>close</code>' attribute.
       */
      void clear_close() {
        MutableStorage()->removeMember("close");
      }


      /**
       * Get the value of the '<code>close</code>' attribute.
       */
      int32 get_close() const {
        const Json::Value& storage = Storage("close");
        return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
      }

      /**
       * Change the '<code>close</code>' attribute.
       * @param[in] value The new value.
       */
      void set_close(int32 value) {
        googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
          value, MutableStorage("close"));
      }

      /**
       * Determine if the '<code>open</code>' attribute was set.
       *
       * @return true if the '<code>open</code>' attribute was set.
       */
      bool has_open() const {
        return Storage().isMember("open");
      }

      /**
       * Clears the '<code>open</code>' attribute.
       */
      void clear_open() {
        MutableStorage()->removeMember("open");
      }


      /**
       * Get the value of the '<code>open</code>' attribute.
       */
      int32 get_open() const {
        const Json::Value& storage = Storage("open");
        return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
      }

      /**
       * Change the '<code>open</code>' attribute.
       * @param[in] value The new value.
       */
      void set_open(int32 value) {
        googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
          value, MutableStorage("open"));
      }

     private:
      void operator=(const TopicRulesSubmissions&);
    };  // TopicRulesSubmissions
    /**
     * No description provided.
     *
     * @ingroup DataObject
     */
    class TopicRulesVotes : public googleapis_client::JsonCppData {
     public:
      /**
       * Creates a new default instance.
       *
       * @return Ownership is passed back to the caller.
       */
      static TopicRulesVotes* New();

      /**
       * Standard constructor for an immutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit TopicRulesVotes(const Json::Value& storage);

      /**
       * Standard constructor for a mutable data object instance.
       *
       * @param[in] storage  The underlying data storage for this instance.
       */
      explicit TopicRulesVotes(Json::Value* storage);

      /**
       * Standard destructor.
       */
      virtual ~TopicRulesVotes();

      /**
       * Returns a string denoting the type of this data object.
       *
       * @return <code>google_kitch_sink_api::TopicRulesVotes</code>
       */
      const char* GetTypeName() const {
        return "google_kitch_sink_api::TopicRulesVotes";
      }

      /**
       * Determine if the '<code>close</code>' attribute was set.
       *
       * @return true if the '<code>close</code>' attribute was set.
       */
      bool has_close() const {
        return Storage().isMember("close");
      }

      /**
       * Clears the '<code>close</code>' attribute.
       */
      void clear_close() {
        MutableStorage()->removeMember("close");
      }


      /**
       * Get the value of the '<code>close</code>' attribute.
       */
      int32 get_close() const {
        const Json::Value& storage = Storage("close");
        return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
      }

      /**
       * Change the '<code>close</code>' attribute.
       * @param[in] value The new value.
       */
      void set_close(int32 value) {
        googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
          value, MutableStorage("close"));
      }

      /**
       * Determine if the '<code>open</code>' attribute was set.
       *
       * @return true if the '<code>open</code>' attribute was set.
       */
      bool has_open() const {
        return Storage().isMember("open");
      }

      /**
       * Clears the '<code>open</code>' attribute.
       */
      void clear_open() {
        MutableStorage()->removeMember("open");
      }


      /**
       * Get the value of the '<code>open</code>' attribute.
       */
      int32 get_open() const {
        const Json::Value& storage = Storage("open");
        return googleapis_client::JsonValueToCppValueHelper<int32 >(storage);
      }

      /**
       * Change the '<code>open</code>' attribute.
       * @param[in] value The new value.
       */
      void set_open(int32 value) {
        googleapis_client::SetJsonValueFromCppValueHelper<int32 >(
          value, MutableStorage("open"));
      }

     private:
      void operator=(const TopicRulesVotes&);
    };  // TopicRulesVotes
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static TopicRules* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TopicRules(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit TopicRules(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~TopicRules();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_kitch_sink_api::TopicRules</code>
     */
    const char* GetTypeName() const {
      return "google_kitch_sink_api::TopicRules";
    }

    /**
     * Determine if the '<code>submissions</code>' attribute was set.
     *
     * @return true if the '<code>submissions</code>' attribute was set.
     */
    bool has_submissions() const {
      return Storage().isMember("submissions");
    }

    /**
     * Clears the '<code>submissions</code>' attribute.
     */
    void clear_submissions() {
      MutableStorage()->removeMember("submissions");
    }


    /**
     * Get a reference to the value of the '<code>submissions</code>' attribute.
     */
    const TopicRulesSubmissions get_submissions() const {
       const Json::Value& storage = Storage("submissions");
      return googleapis_client::JsonValueToCppValueHelper<TopicRulesSubmissions >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>submissions</code>'
     * property.
     * @return The result can be modified to change the attribute value.
     */
    TopicRulesSubmissions mutable_submissions() {
      Json::Value* storage = MutableStorage("submissions");
      return googleapis_client::JsonValueToMutableCppValueHelper<TopicRulesSubmissions >(storage);
    }

    /**
     * Determine if the '<code>votes</code>' attribute was set.
     *
     * @return true if the '<code>votes</code>' attribute was set.
     */
    bool has_votes() const {
      return Storage().isMember("votes");
    }

    /**
     * Clears the '<code>votes</code>' attribute.
     */
    void clear_votes() {
      MutableStorage()->removeMember("votes");
    }


    /**
     * Get a reference to the value of the '<code>votes</code>' attribute.
     */
    const TopicRulesVotes get_votes() const {
       const Json::Value& storage = Storage("votes");
      return googleapis_client::JsonValueToCppValueHelper<TopicRulesVotes >(storage);
    }

    /**
     * Gets a reference to a mutable value of the '<code>votes</code>' property.
     * @return The result can be modified to change the attribute value.
     */
    TopicRulesVotes mutable_votes() {
      Json::Value* storage = MutableStorage("votes");
      return googleapis_client::JsonValueToMutableCppValueHelper<TopicRulesVotes >(storage);
    }

   private:
    void operator=(const TopicRules&);
  };  // TopicRules
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Topic* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Topic(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Topic(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Topic();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::Topic</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::Topic";
  }

  /**
   * Determine if the '<code>counters</code>' attribute was set.
   *
   * @return true if the '<code>counters</code>' attribute was set.
   */
  bool has_counters() const {
    return Storage().isMember("counters");
  }

  /**
   * Clears the '<code>counters</code>' attribute.
   */
  void clear_counters() {
    MutableStorage()->removeMember("counters");
  }


  /**
   * Get a reference to the value of the '<code>counters</code>' attribute.
   */
  const TopicCounters get_counters() const {
     const Json::Value& storage = Storage("counters");
    return googleapis_client::JsonValueToCppValueHelper<TopicCounters >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>counters</code>'
   * property.
   * @return The result can be modified to change the attribute value.
   */
  TopicCounters mutable_counters() {
    Json::Value* storage = MutableStorage("counters");
    return googleapis_client::JsonValueToMutableCppValueHelper<TopicCounters >(storage);
  }

  /**
   * Determine if the '<code>description</code>' attribute was set.
   *
   * @return true if the '<code>description</code>' attribute was set.
   */
  bool has_description() const {
    return Storage().isMember("description");
  }

  /**
   * Clears the '<code>description</code>' attribute.
   */
  void clear_description() {
    MutableStorage()->removeMember("description");
  }


  /**
   * Get the value of the '<code>description</code>' attribute.
   */
  const StringPiece get_description() const {
    const Json::Value& v = Storage("description");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>description</code>' attribute.
   * @param[in] value The new value.
   */
  void set_description(const StringPiece& value) {
    *MutableStorage("description") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get a reference to the value of the '<code>id</code>' attribute.
   */
  const TopicId get_id() const {
     const Json::Value& storage = Storage("id");
    return googleapis_client::JsonValueToCppValueHelper<TopicId >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>id</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  TopicId mutable_id() {
    Json::Value* storage = MutableStorage("id");
    return googleapis_client::JsonValueToMutableCppValueHelper<TopicId >(storage);
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>presenter</code>' attribute was set.
   *
   * @return true if the '<code>presenter</code>' attribute was set.
   */
  bool has_presenter() const {
    return Storage().isMember("presenter");
  }

  /**
   * Clears the '<code>presenter</code>' attribute.
   */
  void clear_presenter() {
    MutableStorage()->removeMember("presenter");
  }


  /**
   * Get the value of the '<code>presenter</code>' attribute.
   */
  const StringPiece get_presenter() const {
    const Json::Value& v = Storage("presenter");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>presenter</code>' attribute.
   * @param[in] value The new value.
   */
  void set_presenter(const StringPiece& value) {
    *MutableStorage("presenter") = value.data();
  }

  /**
   * Determine if the '<code>rules</code>' attribute was set.
   *
   * @return true if the '<code>rules</code>' attribute was set.
   */
  bool has_rules() const {
    return Storage().isMember("rules");
  }

  /**
   * Clears the '<code>rules</code>' attribute.
   */
  void clear_rules() {
    MutableStorage()->removeMember("rules");
  }


  /**
   * Get a reference to the value of the '<code>rules</code>' attribute.
   */
  const TopicRules get_rules() const {
     const Json::Value& storage = Storage("rules");
    return googleapis_client::JsonValueToCppValueHelper<TopicRules >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>rules</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  TopicRules mutable_rules() {
    Json::Value* storage = MutableStorage("rules");
    return googleapis_client::JsonValueToMutableCppValueHelper<TopicRules >(storage);
  }

 private:
  void operator=(const Topic&);
};  // Topic
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_TOPIC_H_
=== end: ./google/kitch_sink_api/topic.h
=== begin: ./google/kitch_sink_api/topic_list.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   TopicList
// Documentation:
//   

#include "google/kitch_sink_api/topic_list.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/topic.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {


// Object factory method (static).
TopicList* TopicList::New() {
  return new googleapis_client::JsonCppCapsule<TopicList>;
}

// Standard immutable constructor.
TopicList::TopicList(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
TopicList::TopicList(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
TopicList::~TopicList() {
}

// Properties.

const googleapis_client::JsonCppArray<Topic > TopicList::get_items() const {
   const Json::Value& storage = Storage("items");
   return googleapis_client::JsonValueToCppValueHelper<googleapis_client::JsonCppArray<Topic > >(storage);
}

googleapis_client::JsonCppArray<Topic > TopicList::mutable_items() {
  Json::Value* storage = MutableStorage("items");
  return googleapis_client::JsonValueToMutableCppValueHelper<googleapis_client::JsonCppArray<Topic > >(storage);
}
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/topic_list.cc
=== begin: ./google/kitch_sink_api/topic_list.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_TOPIC_LIST_H_
#define  GOOGLE_KITCH_SINK_API_TOPIC_LIST_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/topic.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class TopicList : public googleapis_client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static TopicList* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TopicList(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit TopicList(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~TopicList();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::TopicList</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::TopicList";
  }

  /**
   * Determine if the '<code>items</code>' attribute was set.
   *
   * @return true if the '<code>items</code>' attribute was set.
   */
  bool has_items() const {
    return Storage().isMember("items");
  }

  /**
   * Clears the '<code>items</code>' attribute.
   */
  void clear_items() {
    MutableStorage()->removeMember("items");
  }


  /**
   * Get a reference to the value of the '<code>items</code>' attribute.
   */
  const googleapis_client::JsonCppArray<Topic > get_items() const;

  /**
   * Gets a reference to a mutable value of the '<code>items</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  googleapis_client::JsonCppArray<Topic > mutable_items();

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

 private:
  void operator=(const TopicList&);
};  // TopicList
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_TOPIC_LIST_H_
=== end: ./google/kitch_sink_api/topic_list.h
=== begin: ./google/kitch_sink_api/translation.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   Translation
// Documentation:
//   

#include "google/kitch_sink_api/translation.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "strings/stringpiece.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {


// Object factory method (static).
Translation* Translation::New() {
  return new googleapis_client::JsonCppCapsule<Translation>;
}

// Standard immutable constructor.
Translation::Translation(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Translation::Translation(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Translation::~Translation() {
}

// Properties.
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/translation.cc
=== begin: ./google/kitch_sink_api/translation.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_TRANSLATION_H_
#define  GOOGLE_KITCH_SINK_API_TRANSLATION_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class Translation : public googleapis_client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Translation* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Translation(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Translation(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Translation();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::Translation</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::Translation";
  }

  /**
   * Determine if the '<code>lang</code>' attribute was set.
   *
   * @return true if the '<code>lang</code>' attribute was set.
   */
  bool has_lang() const {
    return Storage().isMember("lang");
  }

  /**
   * Clears the '<code>lang</code>' attribute.
   */
  void clear_lang() {
    MutableStorage()->removeMember("lang");
  }


  /**
   * Get the value of the '<code>lang</code>' attribute.
   */
  const StringPiece get_lang() const {
    const Json::Value& v = Storage("lang");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>lang</code>' attribute.
   * @param[in] value The new value.
   */
  void set_lang(const StringPiece& value) {
    *MutableStorage("lang") = value.data();
  }

  /**
   * Determine if the '<code>text</code>' attribute was set.
   *
   * @return true if the '<code>text</code>' attribute was set.
   */
  bool has_text() const {
    return Storage().isMember("text");
  }

  /**
   * Clears the '<code>text</code>' attribute.
   */
  void clear_text() {
    MutableStorage()->removeMember("text");
  }


  /**
   * Get the value of the '<code>text</code>' attribute.
   */
  const StringPiece get_text() const {
    const Json::Value& v = Storage("text");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>text</code>' attribute.
   * @param[in] value The new value.
   */
  void set_text(const StringPiece& value) {
    *MutableStorage("text") = value.data();
  }

 private:
  void operator=(const Translation&);
};  // Translation
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_TRANSLATION_H_
=== end: ./google/kitch_sink_api/translation.h
=== begin: ./google/kitch_sink_api/vote.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   Vote
// Documentation:
//   

#include "google/kitch_sink_api/vote.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "strings/stringpiece.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {



// Object factory method (static).
Vote::VoteId* Vote::VoteId::New() {
  return new googleapis_client::JsonCppCapsule<VoteId>;
}

// Standard immutable constructor.
Vote::VoteId::VoteId(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Vote::VoteId::VoteId(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Vote::VoteId::~VoteId() {
}
// Object factory method (static).
Vote* Vote::New() {
  return new googleapis_client::JsonCppCapsule<Vote>;
}

// Standard immutable constructor.
Vote::Vote(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
Vote::Vote(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
Vote::~Vote() {
}

// Properties.
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/vote.cc
=== begin: ./google/kitch_sink_api/vote.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_VOTE_H_
#define  GOOGLE_KITCH_SINK_API_VOTE_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class Vote : public googleapis_client::JsonCppData {
 public:
  /**
   * No description provided.
   *
   * @ingroup DataObject
   */
  class VoteId : public googleapis_client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static VoteId* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit VoteId(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit VoteId(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~VoteId();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_kitch_sink_api::VoteId</code>
     */
    const char* GetTypeName() const {
      return "google_kitch_sink_api::VoteId";
    }

   private:
    void operator=(const VoteId&);
  };  // VoteId
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Vote* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Vote(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Vote(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Vote();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::Vote</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::Vote";
  }

  /**
   * Determine if the '<code>flag</code>' attribute was set.
   *
   * @return true if the '<code>flag</code>' attribute was set.
   */
  bool has_flag() const {
    return Storage().isMember("flag");
  }

  /**
   * Clears the '<code>flag</code>' attribute.
   */
  void clear_flag() {
    MutableStorage()->removeMember("flag");
  }


  /**
   * Get the value of the '<code>flag</code>' attribute.
   */
  const StringPiece get_flag() const {
    const Json::Value& v = Storage("flag");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>flag</code>' attribute.
   * @param[in] value The new value.
   */
  void set_flag(const StringPiece& value) {
    *MutableStorage("flag") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get a reference to the value of the '<code>id</code>' attribute.
   */
  const VoteId get_id() const {
     const Json::Value& storage = Storage("id");
    return googleapis_client::JsonValueToCppValueHelper<VoteId >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>id</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  VoteId mutable_id() {
    Json::Value* storage = MutableStorage("id");
    return googleapis_client::JsonValueToMutableCppValueHelper<VoteId >(storage);
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>vote</code>' attribute was set.
   *
   * @return true if the '<code>vote</code>' attribute was set.
   */
  bool has_vote() const {
    return Storage().isMember("vote");
  }

  /**
   * Clears the '<code>vote</code>' attribute.
   */
  void clear_vote() {
    MutableStorage()->removeMember("vote");
  }


  /**
   * Get the value of the '<code>vote</code>' attribute.
   */
  const StringPiece get_vote() const {
    const Json::Value& v = Storage("vote");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>vote</code>' attribute.
   * @param[in] value The new value.
   */
  void set_vote(const StringPiece& value) {
    *MutableStorage("vote") = value.data();
  }

 private:
  void operator=(const Vote&);
};  // Vote
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_VOTE_H_
=== end: ./google/kitch_sink_api/vote.h
=== begin: ./google/kitch_sink_api/vote_list.cc
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Description:
//   An API with every strange thing in it.
// Classes:
//   VoteList
// Documentation:
//   

#include "google/kitch_sink_api/vote_list.h"
#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/vote.h"


#include <string>
#include "strings/strcat.h"

namespace google_kitch_sink_api {


// Object factory method (static).
VoteList* VoteList::New() {
  return new googleapis_client::JsonCppCapsule<VoteList>;
}

// Standard immutable constructor.
VoteList::VoteList(const Json::Value& storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard mutable constructor.
VoteList::VoteList(Json::Value* storage)
  : googleapis_client::JsonCppData(storage) {
}

// Standard destructor.
VoteList::~VoteList() {
}

// Properties.

const googleapis_client::JsonCppArray<Vote > VoteList::get_items() const {
   const Json::Value& storage = Storage("items");
   return googleapis_client::JsonValueToCppValueHelper<googleapis_client::JsonCppArray<Vote > >(storage);
}

googleapis_client::JsonCppArray<Vote > VoteList::mutable_items() {
  Json::Value* storage = MutableStorage("items");
  return googleapis_client::JsonValueToMutableCppValueHelper<googleapis_client::JsonCppArray<Vote > >(storage);
}
}  // namespace google_kitch_sink_api
=== end: ./google/kitch_sink_api/vote_list.cc
=== begin: ./google/kitch_sink_api/vote_list.h
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   kitch_sink (kitch_sink/v1)
// Generated from:
//   Version: v1
//   Revision: snapshot
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_KITCH_SINK_API_VOTE_LIST_H_
#define  GOOGLE_KITCH_SINK_API_VOTE_LIST_H_

#include <string>
#include "apiserving/clients/cpp/data/jsoncpp_data.h"
#include "base/macros.h"
#include "strings/stringpiece.h"

#include "google/kitch_sink_api/vote.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_kitch_sink_api {


/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class VoteList : public googleapis_client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static VoteList* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit VoteList(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit VoteList(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~VoteList();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_kitch_sink_api::VoteList</code>
   */
  const char* GetTypeName() const {
    return "google_kitch_sink_api::VoteList";
  }

  /**
   * Determine if the '<code>items</code>' attribute was set.
   *
   * @return true if the '<code>items</code>' attribute was set.
   */
  bool has_items() const {
    return Storage().isMember("items");
  }

  /**
   * Clears the '<code>items</code>' attribute.
   */
  void clear_items() {
    MutableStorage()->removeMember("items");
  }


  /**
   * Get a reference to the value of the '<code>items</code>' attribute.
   */
  const googleapis_client::JsonCppArray<Vote > get_items() const;

  /**
   * Gets a reference to a mutable value of the '<code>items</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  googleapis_client::JsonCppArray<Vote > mutable_items();

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

 private:
  void operator=(const VoteList&);
};  // VoteList
}  // namespace google_kitch_sink_api
#endif  // GOOGLE_KITCH_SINK_API_VOTE_LIST_H_
=== end: ./google/kitch_sink_api/vote_list.h

// Package main contains the main driver for the mergesnippets tool,
// which merges manual and automatic snippets into public snippets
// that can be published to be GCS
package main

import (
	"flag"
	"log"

	"gapi-cmds/src/snippetgen/mergesnippets/snippet"
)

var (
	primaryLocation   = flag.String("primary", "manual/", "Location of the manual snippets to merge. If the prefix is gcs://, the location is taken to be in GCS; otherwise, the location is interpreted as a local path.")
	secondaryLocation = flag.String("secondary", "automatic/", "Location of the automatic snippets to merge. If the prefix is gcs://, the location is taken to be in GCS; otherwise, the location is interpreted as a local path.")
	mergedLocation    = flag.String("merged", "public/", "Location of the public, merged snippets. If the prefix is gcs://, the location is taken to be in GCS; otherwise, the location is interpreted as a local path.")
	gsutilPath        = flag.String("gsutil", "gsutil", "Path to the gsutil command (if not in your $PATH)")
)

func main() {
	flag.Parse()
	mrg := &snippet.Merger{}

	mrg.Init(*gsutilPath, *primaryLocation, *secondaryLocation, *mergedLocation)
	if err := mrg.Error(); err != nil {
		log.Fatalf("initialization errors:\n%s", err)
	}

	mrg.GetFragments()

	mrg.MergeFragments()
	if err := mrg.Error(); err != nil {
		log.Fatalf("merging errors:\n%s", err)
	}

	mrg.PublishMergedFragments()
	if err := mrg.Error(); err != nil {
		log.Fatalf("publishing errors:\n%s", err)
	}
}

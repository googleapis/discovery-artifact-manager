package fragment

func (info *Info) Clone() *Info {
	if info == nil {
		return nil
	}
	return &Info{
		Path:      info.Path.Clone(),
		File:      info.File.Clone(),
		Processed: false,
	}
}

func (path *Path) Clone() *Path {
	if path == nil {
		return nil
	}
	return &Path{
		apiName:      path.apiName,
		apiVersion:   path.apiVersion,
		apiRevision:  path.apiRevision,
		fragmentName: path.fragmentName,
	}
}

func (file *File) Clone() *File {
	if file == nil {
		return nil
	}
	other := &File{
		Format:       file.Format,
		ID:           file.ID,
		APIName:      file.APIName,
		APIVersion:   file.APIVersion,
		APIRevision:  file.APIRevision,
		CodeFragment: make(map[string]*CodeFragment),
	}
	for key, value := range file.CodeFragment {
		other.CodeFragment[key] = value.Clone()
	}
	return other
}

func (code *CodeFragment) Clone() *CodeFragment {
	if code == nil {
		return nil
	}
	other := &CodeFragment{
		GenerationVersion: code.GenerationVersion,
		GenerationDate:    code.GenerationDate,
		Fragment:          code.Fragment,
		Libraries:         make([]*LibraryInfo, len(code.Libraries)),
	}
	copy(other.Libraries, code.Libraries)
	return other
}
